<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\temp\D_F_CtrlLCD_Phase.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\temp\D_F_CtrlLCD_Phase.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5050106: Last Updated: Fri Nov 03 14:03:39 2017
<BR><P>
<H3>Maximum Stack Usage =        408 bytes + Unknown(Functions without stacksize, Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
Thread_SVC &rArr; Task_SVC_Function &rArr; svc_Ctrl_AutoRunProc &rArr; svc_Ctrl_JudgeAutoRun &rArr; svc_Ctrl_SelCap &rArr; svc_Ctrl_SelCap_Phase_Cmp &rArr; svc_Phase_Search &rArr; svc_Phase_CalcApparentCur &rArr; __aeabi_dmul
<P>
<H3>
Functions with no stack information
</H3><UL>
 <LI><a href="#[6d]">__user_initial_stackheap</a>
</UL>
</UL>
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[2d]">ADC1_2_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[2d]">ADC1_2_IRQHandler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[2d]">ADC1_2_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[15]">BusFault_Handler</a> from stm32f10x_it.o(i.BusFault_Handler) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[30]">CAN1_RX1_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[31]">CAN1_SCE_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[26]">DMA1_Channel1_IRQHandler</a> from stm32f10x_it.o(i.DMA1_Channel1_IRQHandler) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[27]">DMA1_Channel2_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[28]">DMA1_Channel3_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[29]">DMA1_Channel4_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[2a]">DMA1_Channel5_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[2b]">DMA1_Channel6_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[2c]">DMA1_Channel7_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[18]">DebugMon_Handler</a> from stm32f10x_it.o(i.DebugMon_Handler) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[4d]">DispMenu_AutoManualSet</a> from taskgui.o(i.DispMenu_AutoManualSet) referenced from taskgui.o(.constdata)
 <LI><a href="#[51]">DispMenu_DownLongData</a> from taskgui.o(i.DispMenu_DownLongData) referenced from taskgui.o(.constdata)
 <LI><a href="#[49]">DispMenu_LeftSet</a> from taskgui.o(i.DispMenu_LeftSet) referenced from taskgui.o(.constdata)
 <LI><a href="#[4b]">DispMenu_LeftSetValue</a> from taskgui.o(i.DispMenu_LeftSetValue) referenced from taskgui.o(.constdata)
 <LI><a href="#[48]">DispMenu_MainValue</a> from taskgui.o(i.DispMenu_MainValue) referenced from taskgui.o(.constdata)
 <LI><a href="#[4a]">DispMenu_RightSet</a> from taskgui.o(i.DispMenu_RightSet) referenced from taskgui.o(.constdata)
 <LI><a href="#[4c]">DispMenu_RightSetValue</a> from taskgui.o(i.DispMenu_RightSetValue) referenced from taskgui.o(.constdata)
 <LI><a href="#[4e]">DispMenu_UpLongFactory</a> from taskgui.o(i.DispMenu_UpLongFactory) referenced from taskgui.o(.constdata)
 <LI><a href="#[4f]">DispMenu_UpLongSel</a> from taskgui.o(i.DispMenu_UpLongSel) referenced from taskgui.o(.constdata)
 <LI><a href="#[50]">DispMenu_UpLongSelVal</a> from taskgui.o(i.DispMenu_UpLongSelVal) referenced from taskgui.o(.constdata)
 <LI><a href="#[21]">EXTI0_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[43]">EXTI15_10_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[22]">EXTI1_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[23]">EXTI2_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[24]">EXTI3_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[25]">EXTI4_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[32]">EXTI9_5_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[1f]">FLASH_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[13]">HardFault_Handler</a> from stm32f10x_it.o(i.HardFault_Handler) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[3b]">I2C1_ER_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[3a]">I2C1_EV_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[3d]">I2C2_ER_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[3c]">I2C2_EV_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[14]">MemManage_Handler</a> from stm32f10x_it.o(i.MemManage_Handler) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[12]">NMI_Handler</a> from stm32f10x_it.o(i.NMI_Handler) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[1c]">PVD_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[19]">PendSV_Handler</a> from stm32f10x_it.o(i.PendSV_Handler) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[20]">RCC_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[44]">RTCAlarm_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[1e]">RTC_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[11]">Reset_Handler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[3e]">SPI1_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[3f]">SPI2_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[17]">SVC_Handler</a> from stm32f10x_it.o(i.SVC_Handler) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[1a]">SysTick_Handler</a> from stm32f10x_it.o(i.SysTick_Handler) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[46]">SystemInit</a> from system_stm32f10x.o(i.SystemInit) referenced from startup_stm32f10x_md.o(.text)
 <LI><a href="#[1d]">TAMPER_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[33]">TIM1_BRK_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[36]">TIM1_CC_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[35]">TIM1_TRG_COM_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[34]">TIM1_UP_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[37]">TIM2_IRQHandler</a> from stm32f10x_it.o(i.TIM2_IRQHandler) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[38]">TIM3_IRQHandler</a> from stm32f10x_it.o(i.TIM3_IRQHandler) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[39]">TIM4_IRQHandler</a> from stm32f10x_it.o(i.TIM4_IRQHandler) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[f]">Thread_DevStatus</a> from sysmain.o(i.Thread_DevStatus) referenced 2 times from sysmain.o(.data)
 <LI><a href="#[4]">Thread_GUI</a> from sysmain.o(i.Thread_GUI) referenced 2 times from sysmain.o(.data)
 <LI><a href="#[10]">Thread_MS</a> from sysmain.o(i.Thread_MS) referenced 2 times from sysmain.o(.data)
 <LI><a href="#[9]">Thread_Power_CALIB</a> from sysmain.o(i.Thread_Power_CALIB) referenced 2 times from sysmain.o(.data)
 <LI><a href="#[7]">Thread_Power_DFT</a> from sysmain.o(i.Thread_Power_DFT) referenced 2 times from sysmain.o(.data)
 <LI><a href="#[8]">Thread_Power_Freq</a> from sysmain.o(i.Thread_Power_Freq) referenced 2 times from sysmain.o(.data)
 <LI><a href="#[5]">Thread_Power_Judge</a> from sysmain.o(i.Thread_Power_Judge) referenced 2 times from sysmain.o(.data)
 <LI><a href="#[6]">Thread_Power_RMS</a> from sysmain.o(i.Thread_Power_RMS) referenced 2 times from sysmain.o(.data)
 <LI><a href="#[e]">Thread_Protect</a> from sysmain.o(i.Thread_Protect) referenced 2 times from sysmain.o(.data)
 <LI><a href="#[c]">Thread_PtlJudgeStatus</a> from sysmain.o(i.Thread_PtlJudgeStatus) referenced 2 times from sysmain.o(.data)
 <LI><a href="#[b]">Thread_PtlRx</a> from sysmain.o(i.Thread_PtlRx) referenced 2 times from sysmain.o(.data)
 <LI><a href="#[a]">Thread_PtlTx</a> from sysmain.o(i.Thread_PtlTx) referenced 2 times from sysmain.o(.data)
 <LI><a href="#[d]">Thread_SVC</a> from sysmain.o(i.Thread_SVC) referenced 2 times from sysmain.o(.data)
 <LI><a href="#[40]">USART1_IRQHandler</a> from stm32f10x_it.o(i.USART1_IRQHandler) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[41]">USART2_IRQHandler</a> from stm32f10x_it.o(i.USART2_IRQHandler) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[42]">USART3_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[45]">USBWakeUp_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[2e]">USB_HP_CAN1_TX_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[2f]">USB_LP_CAN1_RX0_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[16]">UsageFault_Handler</a> from stm32f10x_it.o(i.UsageFault_Handler) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[1b]">WWDG_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[52]">__main</a> from __main.o(!!!main) referenced from startup_stm32f10x_md.o(.text)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[52]"></a>__main</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, __main.o(!!!main))
<BR><BR>[Calls]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[53]"></a>__scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter))
<BR><BR>[Called By]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[55]"></a>__scatterload_rt2</STRONG> (Thumb, 44 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[1e4]"></a>__scatterload_rt2_thumb_only</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[1e5]"></a>__scatterload_null</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[1e6]"></a>__decompress</STRONG> (Thumb, 90 bytes, Stack size unknown bytes, __dczerorl2.o(!!dczerorl2), UNUSED)

<P><STRONG><a name="[1e7]"></a>__decompress1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __dczerorl2.o(!!dczerorl2), UNUSED)

<P><STRONG><a name="[1e8]"></a>__scatterload_zeroinit</STRONG> (Thumb, 28 bytes, Stack size unknown bytes, __scatter_zi.o(!!handler_zi), UNUSED)

<P><STRONG><a name="[59]"></a>__rt_lib_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit.o(.ARM.Collect$$libinit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_li
</UL>

<P><STRONG><a name="[1e9]"></a>__rt_lib_init_alloca_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002E))

<P><STRONG><a name="[1ea]"></a>__rt_lib_init_argv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002C))

<P><STRONG><a name="[1eb]"></a>__rt_lib_init_atexit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001B))

<P><STRONG><a name="[1ec]"></a>__rt_lib_init_clock_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000021))

<P><STRONG><a name="[1ed]"></a>__rt_lib_init_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000032))

<P><STRONG><a name="[1ee]"></a>__rt_lib_init_exceptions_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000030))

<P><STRONG><a name="[1ef]"></a>__rt_lib_init_fp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000002))

<P><STRONG><a name="[1f0]"></a>__rt_lib_init_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001F))

<P><STRONG><a name="[1f1]"></a>__rt_lib_init_getenv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000023))

<P><STRONG><a name="[1f2]"></a>__rt_lib_init_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000A))

<P><STRONG><a name="[1f3]"></a>__rt_lib_init_lc_collate_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000011))

<P><STRONG><a name="[1f4]"></a>__rt_lib_init_lc_ctype_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000013))

<P><STRONG><a name="[1f5]"></a>__rt_lib_init_lc_monetary_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000015))

<P><STRONG><a name="[1f6]"></a>__rt_lib_init_lc_numeric_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000017))

<P><STRONG><a name="[1f7]"></a>__rt_lib_init_lc_time_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000019))

<P><STRONG><a name="[1f8]"></a>__rt_lib_init_preinit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000004))

<P><STRONG><a name="[1f9]"></a>__rt_lib_init_rand_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000E))

<P><STRONG><a name="[1fa]"></a>__rt_lib_init_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000033))

<P><STRONG><a name="[1fb]"></a>__rt_lib_init_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001D))

<P><STRONG><a name="[1fc]"></a>__rt_lib_init_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000025))

<P><STRONG><a name="[1fd]"></a>__rt_lib_init_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000C))

<P><STRONG><a name="[5e]"></a>__rt_lib_shutdown</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown.o(.ARM.Collect$$libshutdown$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_ls
</UL>

<P><STRONG><a name="[1fe]"></a>__rt_lib_shutdown_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000006))

<P><STRONG><a name="[1ff]"></a>__rt_lib_shutdown_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000E))

<P><STRONG><a name="[200]"></a>__rt_lib_shutdown_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000F))

<P><STRONG><a name="[201]"></a>__rt_lib_shutdown_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000009))

<P><STRONG><a name="[202]"></a>__rt_lib_shutdown_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000003))

<P><STRONG><a name="[203]"></a>__rt_lib_shutdown_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000B))

<P><STRONG><a name="[54]"></a>__rt_entry</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry.o(.ARM.Collect$$rtentry$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_rt2
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[204]"></a>__rt_entry_presh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000002))

<P><STRONG><a name="[56]"></a>__rt_entry_sh</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry4.o(.ARM.Collect$$rtentry$$00000004))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_entry_sh &rArr; __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[58]"></a>__rt_entry_li</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000A))
<BR><BR>[Calls]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init
</UL>

<P><STRONG><a name="[205]"></a>__rt_entry_postsh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000009))

<P><STRONG><a name="[5a]"></a>__rt_entry_main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000D))
<BR><BR>[Stack]<UL><LI>Max Depth = 368 + Unknown Stack Size
<LI>Call Chain = __rt_entry_main &rArr; main &rArr; App_Init &rArr; MemData_Init &rArr; MemData_InitSettingParam &rArr; MemData_ReadParam &rArr; MemData_WriteParam &rArr; MemData_Write_To_Flash &rArr; FLASH_ProgramWord &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[206]"></a>__rt_entry_postli_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000C))

<P><STRONG><a name="[6e]"></a>__rt_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit.o(.ARM.Collect$$rtexit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[5d]"></a>__rt_exit_ls</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000003))
<BR><BR>[Calls]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown
</UL>

<P><STRONG><a name="[207]"></a>__rt_exit_prels_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000002))

<P><STRONG><a name="[5f]"></a>__rt_exit_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>

<P><STRONG><a name="[11]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[2d]"></a>ADC1_2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_2_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_2_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[30]"></a>CAN1_RX1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[31]"></a>CAN1_SCE_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>DMA1_Channel2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>DMA1_Channel3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>DMA1_Channel4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>DMA1_Channel5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[2b]"></a>DMA1_Channel6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>DMA1_Channel7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>EXTI0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[43]"></a>EXTI15_10_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>EXTI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>EXTI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>EXTI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>EXTI4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[32]"></a>EXTI9_5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>FLASH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[3b]"></a>I2C1_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[3a]"></a>I2C1_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[3d]"></a>I2C2_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[3c]"></a>I2C2_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>PVD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>RCC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[44]"></a>RTCAlarm_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>RTC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[3e]"></a>SPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[3f]"></a>SPI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>TAMPER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[33]"></a>TIM1_BRK_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[36]"></a>TIM1_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[35]"></a>TIM1_TRG_COM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[34]"></a>TIM1_UP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[42]"></a>USART3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[45]"></a>USBWakeUp_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[2e]"></a>USB_HP_CAN1_TX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[2f]"></a>USB_LP_CAN1_RX0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>WWDG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[6d]"></a>__user_initial_stackheap</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, startup_stm32f10x_md.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[11a]"></a>__aeabi_ldivmod</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, llsdiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_ldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;linear_x32_y32
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sample_Calc_FreqYSQueue
</UL>

<P><STRONG><a name="[61]"></a>_ll_sdiv</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, llsdiv.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>

<P><STRONG><a name="[fb]"></a>__aeabi_memcpy</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memcpy_v6.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemData_ReadCalib
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sample_SetCalibValue
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sample_SetCalibCmd
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sample_GetCalibValue
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sample_Calib
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemData_WriteParam
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ptlGetOldAnswerDataAnalysis
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ptlAnalysisSendSetCmd
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ptlAnalysisSendQueryCmd
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemData_ReadParam
</UL>

<P><STRONG><a name="[63]"></a>__rt_memcpy</STRONG> (Thumb, 138 bytes, Stack size 0 bytes, rt_memcpy_v6.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>

<P><STRONG><a name="[208]"></a>_memcpy_lastbytes</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memcpy_v6.o(.text), UNUSED)

<P><STRONG><a name="[64]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_memcpy
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemData_ReadParam
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemData_CmlTime
</UL>

<P><STRONG><a name="[209]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[20a]"></a>__rt_memcpy_w</STRONG> (Thumb, 100 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[20b]"></a>_memcpy_lastbytes_aligned</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[65]"></a>__aeabi_memset</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, aeabi_memset.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemData_WriteParam
</UL>

<P><STRONG><a name="[f9]"></a>__aeabi_memclr</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memclr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ptlSetAllDeviceZero
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ptlMainClrSpareAddr
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ptlGetOldAnswerDataAnalysis
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ptlClrRecvPack
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ptl81_Analysis_Main
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemData_InitZNCap_State
</UL>

<P><STRONG><a name="[67]"></a>__rt_memclr</STRONG> (Thumb, 68 bytes, Stack size 0 bytes, rt_memclr.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset_w
</UL>

<P><STRONG><a name="[66]"></a>_memset</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memclr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[20c]"></a>__use_two_region_memory</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[20d]"></a>__rt_heap_escrow$2region</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[20e]"></a>__rt_heap_expand$2region</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[62]"></a>__aeabi_uldivmod</STRONG> (Thumb, 0 bytes, Stack size 48 bytes, lludivv7m.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ll_sdiv
</UL>

<P><STRONG><a name="[20f]"></a>_ll_udiv</STRONG> (Thumb, 238 bytes, Stack size 48 bytes, lludivv7m.o(.text), UNUSED)

<P><STRONG><a name="[69]"></a>__read_errno</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, _rserrno.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>

<P><STRONG><a name="[6b]"></a>__set_errno</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, _rserrno.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqrt
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cos
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asin
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;acos
</UL>

<P><STRONG><a name="[210]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 4 bytes, rt_memclr_w.o(.text), UNUSED)

<P><STRONG><a name="[211]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 4 bytes, rt_memclr_w.o(.text), UNUSED)

<P><STRONG><a name="[212]"></a>__rt_memclr_w</STRONG> (Thumb, 78 bytes, Stack size 4 bytes, rt_memclr_w.o(.text), UNUSED)

<P><STRONG><a name="[68]"></a>_memset_w</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memclr_w.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_memclr
</UL>

<P><STRONG><a name="[6a]"></a>__aeabi_errno_addr</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rt_errno_addr_intlibspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__read_errno
</UL>

<P><STRONG><a name="[213]"></a>__errno$intlibspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_errno_addr_intlibspace.o(.text), UNUSED)

<P><STRONG><a name="[214]"></a>__rt_errno_addr$intlibspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_errno_addr_intlibspace.o(.text), UNUSED)

<P><STRONG><a name="[215]"></a>__user_libspace</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[6c]"></a>__user_perproc_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[216]"></a>__user_perthread_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[57]"></a>__user_setup_stackheap</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, sys_stackheap_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_initial_stackheap
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_perproc_libspace
</UL>
<BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_sh
</UL>

<P><STRONG><a name="[5c]"></a>exit</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, exit.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[60]"></a>_sys_exit</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, sys_exit.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_exit
</UL>

<P><STRONG><a name="[217]"></a>__I$use$semihosting</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[218]"></a>__use_no_semihosting_swi</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[76]"></a>ADC_Cmd</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f10x_adc.o(i.ADC_Cmd))
<BR><BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Configuration
</UL>

<P><STRONG><a name="[219]"></a>__semihosting_library_function</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, indicate_semi.o(.text), UNUSED)

<P><STRONG><a name="[6f]"></a>ADC_Configuration</STRONG> (Thumb, 504 bytes, Stack size 80 bytes, bsp.o(i.ADC_Configuration))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = ADC_Configuration &rArr; ADC_RegularChannelConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Cmd
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TimeBaseInit
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SelectOutputTrigger
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ITConfig
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Cmd
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ClearFlag
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHBPeriphClockCmd
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_ADCCLKConfig
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Init
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_DeInit
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_StartCalibration
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_ResetCalibration
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_RegularChannelConfig
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Init
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_GetResetCalibrationStatus
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_GetCalibrationStatus
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_ExternalTrigConvCmd
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_DMACmd
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[7b]"></a>ADC_DMACmd</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f10x_adc.o(i.ADC_DMACmd))
<BR><BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Configuration
</UL>

<P><STRONG><a name="[7c]"></a>ADC_ExternalTrigConvCmd</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f10x_adc.o(i.ADC_ExternalTrigConvCmd))
<BR><BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Configuration
</UL>

<P><STRONG><a name="[80]"></a>ADC_GetCalibrationStatus</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f10x_adc.o(i.ADC_GetCalibrationStatus))
<BR><BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Configuration
</UL>

<P><STRONG><a name="[7e]"></a>ADC_GetResetCalibrationStatus</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f10x_adc.o(i.ADC_GetResetCalibrationStatus))
<BR><BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Configuration
</UL>

<P><STRONG><a name="[79]"></a>ADC_Init</STRONG> (Thumb, 70 bytes, Stack size 12 bytes, stm32f10x_adc.o(i.ADC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = ADC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Configuration
</UL>

<P><STRONG><a name="[7a]"></a>ADC_RegularChannelConfig</STRONG> (Thumb, 184 bytes, Stack size 20 bytes, stm32f10x_adc.o(i.ADC_RegularChannelConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = ADC_RegularChannelConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Configuration
</UL>

<P><STRONG><a name="[7d]"></a>ADC_ResetCalibration</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f10x_adc.o(i.ADC_ResetCalibration))
<BR><BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Configuration
</UL>

<P><STRONG><a name="[7f]"></a>ADC_StartCalibration</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f10x_adc.o(i.ADC_StartCalibration))
<BR><BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Configuration
</UL>

<P><STRONG><a name="[85]"></a>App_Init</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, sysmain.o(i.App_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 368 + Unknown Stack Size
<LI>Call Chain = App_Init &rArr; MemData_Init &rArr; MemData_InitSettingParam &rArr; MemData_ReadParam &rArr; MemData_WriteParam &rArr; MemData_Write_To_Flash &rArr; FLASH_ProgramWord &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_Power_init
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_GUI_init
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_Com_init
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PT_TimerDelay
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemData_Init
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_DevStatus_Init
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_SVC_init
</UL>
<BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[8d]"></a>Bsp_Init</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, bsp.o(i.Bsp_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = Bsp_Init &rArr; USART_Configuration &rArr; USART_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Configuration
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Configuration
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_Configuration
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Configuration
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Configuration
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_Configuration
</UL>
<BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[15]"></a>BusFault_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_it.o(i.BusFault_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[a7]"></a>ChangeSeat</STRONG> (Thumb, 78 bytes, Stack size 28 bytes, taskpower.o(i.ChangeSeat))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = ChangeSeat
</UL>
<BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FFT
</UL>

<P><STRONG><a name="[9f]"></a>CharToNumber</STRONG> (Thumb, 138 bytes, Stack size 12 bytes, taskgui.o(i.CharToNumber))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = CharToNumber
</UL>
<BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenu_LeftSetValuePublic
</UL>

<P><STRONG><a name="[a5]"></a>Clear_Screen</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, drvlcd.o(i.Clear_Screen))
<BR><BR>[Called By]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenu_UpLongFactory
</UL>

<P><STRONG><a name="[1a3]"></a>CmpDataByte</STRONG> (Thumb, 36 bytes, Stack size 12 bytes, taskcom.o(i.CmpDataByte))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = CmpDataByte
</UL>
<BR>[Called By]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ptlAnalysisSendSetCmd
</UL>

<P><STRONG><a name="[174]"></a>ComToUSARTx</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, bsp.o(i.ComToUSARTx))
<BR><BR>[Called By]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_DMAReConfig
</UL>

<P><STRONG><a name="[a9]"></a>Cos_find</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, taskpower.o(i.Cos_find))
<BR><BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FFT
</UL>

<P><STRONG><a name="[26]"></a>DMA1_Channel1_IRQHandler</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, stm32f10x_it.o(i.DMA1_Channel1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DMA1_Channel1_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Power_SampleDMAIT
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_GetITStatus
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_ClearITPendingBit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[96]"></a>DMA_ClearITPendingBit</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_dma.o(i.DMA_ClearITPendingBit))
<BR><BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_Channel1_IRQHandler
</UL>

<P><STRONG><a name="[75]"></a>DMA_Cmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_dma.o(i.DMA_Cmd))
<BR><BR>[Called By]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_DMAReConfig
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Configuration
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SERIAL2_IRQHandler
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SERIAL1_IRQHandler
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Configuration
</UL>

<P><STRONG><a name="[77]"></a>DMA_DeInit</STRONG> (Thumb, 324 bytes, Stack size 0 bytes, stm32f10x_dma.o(i.DMA_DeInit))
<BR><BR>[Called By]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_DMAReConfig
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Configuration
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Configuration
</UL>

<P><STRONG><a name="[10d]"></a>DMA_GetCurrDataCounter</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f10x_dma.o(i.DMA_GetCurrDataCounter))
<BR><BR>[Called By]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SERIAL2_IRQHandler
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SERIAL1_IRQHandler
</UL>

<P><STRONG><a name="[94]"></a>DMA_GetITStatus</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, stm32f10x_dma.o(i.DMA_GetITStatus))
<BR><BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_Channel1_IRQHandler
</UL>

<P><STRONG><a name="[78]"></a>DMA_Init</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, stm32f10x_dma.o(i.DMA_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DMA_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_DMAReConfig
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Configuration
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Configuration
</UL>

<P><STRONG><a name="[10e]"></a>DMA_SetCurrDataCounter</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_dma.o(i.DMA_SetCurrDataCounter))
<BR><BR>[Called By]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SERIAL2_IRQHandler
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SERIAL1_IRQHandler
</UL>

<P><STRONG><a name="[18]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(i.DebugMon_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[97]"></a>DevStatusToMain</STRONG> (Thumb, 112 bytes, Stack size 8 bytes, taskcom.o(i.DevStatusToMain))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DevStatusToMain
</UL>
<BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ptlSetStation2Type
</UL>
<BR>[Called By]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_PtlJudgeStatus_Function
</UL>

<P><STRONG><a name="[1aa]"></a>DevStatus_ChgFaultRegToNew</STRONG> (Thumb, 500 bytes, Stack size 12 bytes, taskdevstatus.o(i.DevStatus_ChgFaultRegToNew))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = DevStatus_ChgFaultRegToNew
</UL>
<BR>[Called By]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ptlStatusOldToNew
</UL>

<P><STRONG><a name="[1ab]"></a>DevStatus_ChgFaultRegToOld</STRONG> (Thumb, 278 bytes, Stack size 0 bytes, taskdevstatus.o(i.DevStatus_ChgFaultRegToOld))
<BR><BR>[Called By]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ptlStatusOldToNew
</UL>

<P><STRONG><a name="[19f]"></a>DevStatus_SetSimStatus</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, taskdevstatus.o(i.DevStatus_SetSimStatus))
<BR><BR>[Called By]<UL><LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ptlAnalysisSendQueryCmd
</UL>

<P><STRONG><a name="[99]"></a>DispCapStatus</STRONG> (Thumb, 250 bytes, Stack size 32 bytes, taskgui.o(i.DispCapStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = DispCapStatus &rArr; HT_WriteCapLED
</UL>
<BR>[Calls]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HT_WriteLedAddr
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HT_WriteCapLED
</UL>
<BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DisplayCapStatus_Flag
</UL>

<P><STRONG><a name="[4d]"></a>DispMenu_AutoManualSet</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, taskgui.o(i.DispMenu_AutoManualSet))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = DispMenu_AutoManualSet &rArr; DispMenu_MainValue &rArr; LCD_DisplayValue &rArr; HT_WriteValue
</UL>
<BR>[Calls]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenu_MainValue
</UL>
<BR>[Address Reference Count : 1]<UL><LI> taskgui.o(.constdata)
</UL>
<P><STRONG><a name="[51]"></a>DispMenu_DownLongData</STRONG> (Thumb, 100 bytes, Stack size 24 bytes, taskgui.o(i.DispMenu_DownLongData))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = DispMenu_DownLongData &rArr; LCD_DisplayValue &rArr; HT_WriteValue
</UL>
<BR>[Calls]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HT_WriteValue
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DisplayValue
</UL>
<BR>[Address Reference Count : 1]<UL><LI> taskgui.o(.constdata)
</UL>
<P><STRONG><a name="[49]"></a>DispMenu_LeftSet</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, taskgui.o(i.DispMenu_LeftSet))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = DispMenu_LeftSet &rArr; DispMenu_LeftSetValuePublic &rArr; LCD_DisplayValue &rArr; HT_WriteValue
</UL>
<BR>[Calls]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenu_LeftSetValuePublic
</UL>
<BR>[Address Reference Count : 1]<UL><LI> taskgui.o(.constdata)
</UL>
<P><STRONG><a name="[4b]"></a>DispMenu_LeftSetValue</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, taskgui.o(i.DispMenu_LeftSetValue))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = DispMenu_LeftSetValue &rArr; DispMenu_LeftSetValuePublic &rArr; LCD_DisplayValue &rArr; HT_WriteValue
</UL>
<BR>[Calls]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenu_LeftSetValuePublic
</UL>
<BR>[Address Reference Count : 1]<UL><LI> taskgui.o(.constdata)
</UL>
<P><STRONG><a name="[9e]"></a>DispMenu_LeftSetValuePublic</STRONG> (Thumb, 480 bytes, Stack size 40 bytes, taskgui.o(i.DispMenu_LeftSetValuePublic))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = DispMenu_LeftSetValuePublic &rArr; LCD_DisplayValue &rArr; HT_WriteValue
</UL>
<BR>[Calls]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DisplayValue
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CharToNumber
</UL>
<BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenu_LeftSetValue
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenu_LeftSet
</UL>

<P><STRONG><a name="[48]"></a>DispMenu_MainValue</STRONG> (Thumb, 1120 bytes, Stack size 48 bytes, taskgui.o(i.DispMenu_MainValue))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = DispMenu_MainValue &rArr; LCD_DisplayValue &rArr; HT_WriteValue
</UL>
<BR>[Calls]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HT_WriteValue
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DisplayValue
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
</UL>
<BR>[Called By]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenu_AutoManualSet
</UL>
<BR>[Address Reference Count : 1]<UL><LI> taskgui.o(.constdata)
</UL>
<P><STRONG><a name="[4a]"></a>DispMenu_RightSet</STRONG> (Thumb, 10 bytes, Stack size 4 bytes, taskgui.o(i.DispMenu_RightSet))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = DispMenu_RightSet
</UL>
<BR>[Calls]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenu_RightSetPublic
</UL>
<BR>[Address Reference Count : 1]<UL><LI> taskgui.o(.constdata)
</UL>
<P><STRONG><a name="[a4]"></a>DispMenu_RightSetPublic</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, taskgui.o(i.DispMenu_RightSetPublic))
<BR><BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenu_RightSetValue
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenu_RightSet
</UL>

<P><STRONG><a name="[4c]"></a>DispMenu_RightSetValue</STRONG> (Thumb, 12 bytes, Stack size 4 bytes, taskgui.o(i.DispMenu_RightSetValue))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = DispMenu_RightSetValue
</UL>
<BR>[Calls]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenu_RightSetPublic
</UL>
<BR>[Address Reference Count : 1]<UL><LI> taskgui.o(.constdata)
</UL>
<P><STRONG><a name="[4e]"></a>DispMenu_UpLongFactory</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, taskgui.o(i.DispMenu_UpLongFactory))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DispMenu_UpLongFactory
</UL>
<BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clear_Screen
</UL>
<BR>[Address Reference Count : 1]<UL><LI> taskgui.o(.constdata)
</UL>
<P><STRONG><a name="[4f]"></a>DispMenu_UpLongSel</STRONG> (Thumb, 288 bytes, Stack size 8 bytes, taskgui.o(i.DispMenu_UpLongSel))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = DispMenu_UpLongSel &rArr; HT_WriteValue
</UL>
<BR>[Calls]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HT_WriteValue
</UL>
<BR>[Address Reference Count : 1]<UL><LI> taskgui.o(.constdata)
</UL>
<P><STRONG><a name="[50]"></a>DispMenu_UpLongSelVal</STRONG> (Thumb, 200 bytes, Stack size 8 bytes, taskgui.o(i.DispMenu_UpLongSelVal))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = DispMenu_UpLongSelVal &rArr; HT_WriteValue
</UL>
<BR>[Calls]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HT_WriteValue
</UL>
<BR>[Address Reference Count : 1]<UL><LI> taskgui.o(.constdata)
</UL>
<P><STRONG><a name="[91]"></a>EXTI_Configuration</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, bsp.o(i.EXTI_Configuration))
<BR><BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_Init
</UL>

<P><STRONG><a name="[a6]"></a>FFT</STRONG> (Thumb, 414 bytes, Stack size 88 bytes, taskpower.o(i.FFT))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = FFT &rArr; ChangeSeat
</UL>
<BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sin_find
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cos_find
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChangeSeat
</UL>
<BR>[Called By]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calcPowerData_CalcFFTHarm1
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calcPowerData_CalcFFTHarm
</UL>

<P><STRONG><a name="[100]"></a>FLASH_ClearFlag</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_flash.o(i.FLASH_ClearFlag))
<BR><BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemData_Write_To_Flash
</UL>

<P><STRONG><a name="[aa]"></a>FLASH_ErasePage</STRONG> (Thumb, 72 bytes, Stack size 12 bytes, stm32f10x_flash.o(i.FLASH_ErasePage))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = FLASH_ErasePage &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
</UL>
<BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemData_Write_To_Flash
</UL>

<P><STRONG><a name="[ad]"></a>FLASH_GetBank1Status</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, stm32f10x_flash.o(i.FLASH_GetBank1Status))
<BR><BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
</UL>

<P><STRONG><a name="[101]"></a>FLASH_Lock</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f10x_flash.o(i.FLASH_Lock))
<BR><BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemData_Write_To_Flash
</UL>

<P><STRONG><a name="[ac]"></a>FLASH_ProgramWord</STRONG> (Thumb, 102 bytes, Stack size 20 bytes, stm32f10x_flash.o(i.FLASH_ProgramWord))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = FLASH_ProgramWord &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
</UL>
<BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemData_Write_To_Flash
</UL>

<P><STRONG><a name="[ff]"></a>FLASH_Unlock</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f10x_flash.o(i.FLASH_Unlock))
<BR><BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemData_Write_To_Flash
</UL>

<P><STRONG><a name="[ab]"></a>FLASH_WaitForLastOperation</STRONG> (Thumb, 38 bytes, Stack size 4 bytes, stm32f10x_flash.o(i.FLASH_WaitForLastOperation))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_GetBank1Status
</UL>
<BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ProgramWord
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ErasePage
</UL>

<P><STRONG><a name="[8f]"></a>GPIO_Configuration</STRONG> (Thumb, 402 bytes, Stack size 8 bytes, bsp.o(i.GPIO_Configuration))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = GPIO_Configuration &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_Init
</UL>

<P><STRONG><a name="[ae]"></a>GPIO_Init</STRONG> (Thumb, 278 bytes, Stack size 24 bytes, stm32f10x_gpio.o(i.GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Configuration
</UL>

<P><STRONG><a name="[e5]"></a>GPIO_ReadInputDataBit</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_gpio.o(i.GPIO_ReadInputDataBit))
<BR><BR>[Called By]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyStatus
</UL>

<P><STRONG><a name="[b0]"></a>GPIO_ResetBits</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_gpio.o(i.GPIO_ResetBits))
<BR><BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HT_TouchStatus
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HT_LedStatus
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Update_screen
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HT_Init
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Buzzer
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HT_WriteData
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HT_SendCmd
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HT_SendBit
</UL>

<P><STRONG><a name="[dd]"></a>GPIO_SetBits</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_gpio.o(i.GPIO_SetBits))
<BR><BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HT_TouchStatus
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HT_LedStatus
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Update_screen
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HT_Init
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HT_WriteData
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HT_SendCmd
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HT_SendBit
</UL>

<P><STRONG><a name="[af]"></a>GUI_Buzzer</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, taskgui.o(i.GUI_Buzzer))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = GUI_Buzzer
</UL>
<BR>[Calls]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_GUI_init
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyDiff
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Timer_On
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Key_UpLong
</UL>

<P><STRONG><a name="[b1]"></a>GUI_DispFlash</STRONG> (Thumb, 146 bytes, Stack size 8 bytes, taskgui.o(i.GUI_DispFlash))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = GUI_DispFlash &rArr; HT_WriteValue
</UL>
<BR>[Calls]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HT_WriteValue
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HT_WriteDot
</UL>
<BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Key_Default
</UL>

<P><STRONG><a name="[b3]"></a>GUI_Key_Default</STRONG> (Thumb, 238 bytes, Stack size 8 bytes, taskgui.o(i.GUI_Key_Default))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = GUI_Key_Default &rArr; LCD_DisplayCapStatus_Flag &rArr; DispCapStatus &rArr; HT_WriteCapLED
</UL>
<BR>[Calls]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Update_screen
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HT_WriteLedPhase
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HT_WriteCapStatus
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DisplayStatus_Flag
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DisplayRightSetValue_Flag
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DisplayMainValue_Flag
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DisplayLeftSetValue_Flag
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DisplayCapStatus_Flag
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispFlash
</UL>
<BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Main
</UL>

<P><STRONG><a name="[bc]"></a>GUI_Key_Down</STRONG> (Thumb, 278 bytes, Stack size 8 bytes, taskgui.o(i.GUI_Key_Down))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = GUI_Key_Down &rArr; UpdataDown_Manual_OFF &rArr; Manual_SearchCap &rArr; Manual_SearchOnState
</UL>
<BR>[Calls]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdataSetValue
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdataDown_Manual_OFF
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ManualCtrl
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetRightSetOldValue
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetLeftSetOldValue
</UL>
<BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Main
</UL>

<P><STRONG><a name="[d4]"></a>GUI_Key_DownLong</STRONG> (Thumb, 58 bytes, Stack size 0 bytes, taskgui.o(i.GUI_Key_DownLong))
<BR><BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Main
</UL>

<P><STRONG><a name="[d3]"></a>GUI_Key_Left</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, taskgui.o(i.GUI_Key_Left))
<BR><BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Main
</UL>

<P><STRONG><a name="[c2]"></a>GUI_Key_LeftLong</STRONG> (Thumb, 110 bytes, Stack size 8 bytes, taskgui.o(i.GUI_Key_LeftLong))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = GUI_Key_LeftLong &rArr; GetLeftSetOldValue &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemData_SetDefaultParam
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Manual_Init
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetLeftSetOldValue
</UL>
<BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Main
</UL>

<P><STRONG><a name="[c5]"></a>GUI_Key_Right</STRONG> (Thumb, 236 bytes, Stack size 8 bytes, taskgui.o(i.GUI_Key_Right))
<BR><BR>[Stack]<UL><LI>Max Depth = 224 + Unknown Stack Size
<LI>Call Chain = GUI_Key_Right &rArr; GetLeftSetNewValue &rArr; MemData_WriteParam &rArr; MemData_Write_To_Flash &rArr; FLASH_ProgramWord &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Manual_Init
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetUpSetOldValue
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetUpSetNewValue
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetLeftSetOldValue
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetLeftSetNewValue
</UL>
<BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Main
</UL>

<P><STRONG><a name="[c9]"></a>GUI_Key_RightLong</STRONG> (Thumb, 132 bytes, Stack size 8 bytes, taskgui.o(i.GUI_Key_RightLong))
<BR><BR>[Stack]<UL><LI>Max Depth = 224 + Unknown Stack Size
<LI>Call Chain = GUI_Key_RightLong &rArr; GetLeftSetNewValue &rArr; MemData_WriteParam &rArr; MemData_Write_To_Flash &rArr; FLASH_ProgramWord &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ClearLeftSetValue_Flag
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetUpSetNewValue
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetLeftSetOldValue
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetLeftSetNewValue
</UL>
<BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Main
</UL>

<P><STRONG><a name="[cb]"></a>GUI_Key_Up</STRONG> (Thumb, 308 bytes, Stack size 8 bytes, taskgui.o(i.GUI_Key_Up))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = GUI_Key_Up &rArr; UpdataUp_Manual_ON &rArr; Manual_SearchCap &rArr; Manual_SearchOnState
</UL>
<BR>[Calls]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdataUp_Manual_ON
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdataSetValue
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ManualCtrl
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetRightSetOldValue
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetRightSetNewValue
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetLeftSetOldValue
</UL>
<BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Main
</UL>

<P><STRONG><a name="[ce]"></a>GUI_Key_UpLong</STRONG> (Thumb, 108 bytes, Stack size 8 bytes, taskgui.o(i.GUI_Key_UpLong))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = GUI_Key_UpLong &rArr; HT_Init &rArr; Update_screen &rArr; HT_WriteData &rArr; HT_SendBit
</UL>
<BR>[Calls]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reset_Screen
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HT_Init
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetUpSetOldValue
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Buzzer
</UL>
<BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Main
</UL>

<P><STRONG><a name="[d1]"></a>GUI_Main</STRONG> (Thumb, 86 bytes, Stack size 8 bytes, taskgui.o(i.GUI_Main))
<BR><BR>[Stack]<UL><LI>Max Depth = 232 + Unknown Stack Size
<LI>Call Chain = GUI_Main &rArr; GUI_Key_RightLong &rArr; GetLeftSetNewValue &rArr; MemData_WriteParam &rArr; MemData_Write_To_Flash &rArr; FLASH_ProgramWord &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyDiff
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Key_UpLong
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Key_Up
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Key_RightLong
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Key_Right
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Key_LeftLong
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Key_Left
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Key_DownLong
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Key_Down
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Key_Default
</UL>
<BR>[Called By]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_GUI_Function
</UL>

<P><STRONG><a name="[198]"></a>GUI_SetComFlag</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, taskgui.o(i.GUI_SetComFlag))
<BR><BR>[Called By]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ptlOldDataAnalysis
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ptlNewDataAnalysis
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ptlAnalysisData_ptl81
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ptl81_Task_MainSendData
</UL>

<P><STRONG><a name="[d5]"></a>GUI_Timer_On</STRONG> (Thumb, 516 bytes, Stack size 24 bytes, taskgui.o(i.GUI_Timer_On))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = GUI_Timer_On &rArr; LCD_ClearLeftSetValue_Flag &rArr; HT_WriteUIHL12
</UL>
<BR>[Calls]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HT_TouchStatus
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HT_LedStatus
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HT_WriteUIHL12
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HT_WriteNorm
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HT_WriteCapType
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ClearLeftSetValue_Flag
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Buzzer
</UL>
<BR>[Called By]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_Timer_Function
</UL>

<P><STRONG><a name="[c6]"></a>GetLeftSetNewValue</STRONG> (Thumb, 838 bytes, Stack size 16 bytes, taskgui.o(i.GetLeftSetNewValue))
<BR><BR>[Stack]<UL><LI>Max Depth = 216 + Unknown Stack Size
<LI>Call Chain = GetLeftSetNewValue &rArr; MemData_WriteParam &rArr; MemData_Write_To_Flash &rArr; FLASH_ProgramWord &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JudgeSetNewValue
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemData_WriteParam
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_Com_init
</UL>
<BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Key_RightLong
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Key_Right
</UL>

<P><STRONG><a name="[bd]"></a>GetLeftSetOldValue</STRONG> (Thumb, 408 bytes, Stack size 24 bytes, taskgui.o(i.GetLeftSetOldValue))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = GetLeftSetOldValue &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
</UL>
<BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Key_Up
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Key_RightLong
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Key_Right
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Key_LeftLong
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Key_Down
</UL>

<P><STRONG><a name="[cc]"></a>GetRightSetNewValue</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, taskgui.o(i.GetRightSetNewValue))
<BR><BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Key_Up
</UL>

<P><STRONG><a name="[be]"></a>GetRightSetOldValue</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, taskgui.o(i.GetRightSetOldValue))
<BR><BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Key_Up
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Key_Down
</UL>

<P><STRONG><a name="[c8]"></a>GetUpSetNewValue</STRONG> (Thumb, 96 bytes, Stack size 8 bytes, taskgui.o(i.GetUpSetNewValue))
<BR><BR>[Stack]<UL><LI>Max Depth = 208 + Unknown Stack Size
<LI>Call Chain = GetUpSetNewValue &rArr; MemData_WriteParam &rArr; MemData_Write_To_Flash &rArr; FLASH_ProgramWord &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemData_WriteParam
</UL>
<BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Key_RightLong
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Key_Right
</UL>

<P><STRONG><a name="[c7]"></a>GetUpSetOldValue</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, taskgui.o(i.GetUpSetOldValue))
<BR><BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Key_UpLong
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Key_Right
</UL>

<P><STRONG><a name="[df]"></a>HT_I2C_delay</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, drvlcd.o(i.HT_I2C_delay))
<BR><BR>[Called By]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HT_Init
</UL>

<P><STRONG><a name="[d0]"></a>HT_Init</STRONG> (Thumb, 156 bytes, Stack size 8 bytes, drvlcd.o(i.HT_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = HT_Init &rArr; Update_screen &rArr; HT_WriteData &rArr; HT_SendBit
</UL>
<BR>[Calls]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HT_TouchStatus
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HT_LedStatus
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Update_screen
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HT_WriteLedPhase
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HT_WriteCapStatus
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HT_SendCmd
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HT_I2C_delay
</UL>
<BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_GUI_init
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Key_UpLong
</UL>

<P><STRONG><a name="[d6]"></a>HT_LedStatus</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, drvlcd.o(i.HT_LedStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HT_LedStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sample_SetCalibCmd
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HT_Init
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyDiff
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Timer_On
</UL>

<P><STRONG><a name="[e0]"></a>HT_SendBit</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, drvlcd.o(i.HT_SendBit))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HT_SendBit
</UL>
<BR>[Calls]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nus_delay
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HT_WriteData
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HT_SendCmd
</UL>

<P><STRONG><a name="[de]"></a>HT_SendCmd</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, drvlcd.o(i.HT_SendCmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HT_SendCmd &rArr; HT_SendBit
</UL>
<BR>[Calls]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nus_delay
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HT_SendBit
</UL>
<BR>[Called By]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HT_Init
</UL>

<P><STRONG><a name="[d7]"></a>HT_TouchStatus</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, drvlcd.o(i.HT_TouchStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HT_TouchStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sample_SetCalibCmd
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HT_Init
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyDiff
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Timer_On
</UL>

<P><STRONG><a name="[9a]"></a>HT_WriteCapLED</STRONG> (Thumb, 1108 bytes, Stack size 20 bytes, drvlcd.o(i.HT_WriteCapLED))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = HT_WriteCapLED
</UL>
<BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DisplayCapStatus_Flag
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispCapStatus
</UL>

<P><STRONG><a name="[b9]"></a>HT_WriteCapStatus</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, drvlcd.o(i.HT_WriteCapStatus))
<BR><BR>[Called By]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HT_Init
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DisplayStatus_Flag
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Key_Default
</UL>

<P><STRONG><a name="[d9]"></a>HT_WriteCapType</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, drvlcd.o(i.HT_WriteCapType))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HT_WriteCapType
</UL>
<BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DisplayLeftSetValue_Flag
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Timer_On
</UL>

<P><STRONG><a name="[ea]"></a>HT_WriteCtrl</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, drvlcd.o(i.HT_WriteCtrl))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HT_WriteCtrl
</UL>
<BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DisplayStatus_Flag
</UL>

<P><STRONG><a name="[e2]"></a>HT_WriteData</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, drvlcd.o(i.HT_WriteData))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = HT_WriteData &rArr; HT_SendBit
</UL>
<BR>[Calls]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HT_SendBit
</UL>
<BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Update_screen
</UL>

<P><STRONG><a name="[b2]"></a>HT_WriteDot</STRONG> (Thumb, 232 bytes, Stack size 12 bytes, drvlcd.o(i.HT_WriteDot))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = HT_WriteDot
</UL>
<BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DisplayValue
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispFlash
</UL>

<P><STRONG><a name="[9b]"></a>HT_WriteLedAddr</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, drvlcd.o(i.HT_WriteLedAddr))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HT_WriteLedAddr
</UL>
<BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DisplayCapStatus_Flag
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispCapStatus
</UL>

<P><STRONG><a name="[ba]"></a>HT_WriteLedPhase</STRONG> (Thumb, 96 bytes, Stack size 12 bytes, drvlcd.o(i.HT_WriteLedPhase))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = HT_WriteLedPhase
</UL>
<BR>[Called By]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HT_Init
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Key_Default
</UL>

<P><STRONG><a name="[da]"></a>HT_WriteNorm</STRONG> (Thumb, 256 bytes, Stack size 12 bytes, drvlcd.o(i.HT_WriteNorm))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = HT_WriteNorm
</UL>
<BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DisplayStatus_Flag
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DisplayMainValue_Flag
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DisplayLeftSetValue_Flag
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Timer_On
</UL>

<P><STRONG><a name="[e8]"></a>HT_WritePhase</STRONG> (Thumb, 96 bytes, Stack size 12 bytes, drvlcd.o(i.HT_WritePhase))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = HT_WritePhase
</UL>
<BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DisplayMainValue_Flag
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DisplayLeftSetValue_Flag
</UL>

<P><STRONG><a name="[e9]"></a>HT_WritePrt</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, drvlcd.o(i.HT_WritePrt))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HT_WritePrt
</UL>
<BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DisplayStatus_Flag
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DisplayLeftSetValue_Flag
</UL>

<P><STRONG><a name="[e7]"></a>HT_WriteSet</STRONG> (Thumb, 202 bytes, Stack size 16 bytes, drvlcd.o(i.HT_WriteSet))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HT_WriteSet
</UL>
<BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DisplayLeftSetValue_Flag
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ClearLeftSetValue_Flag
</UL>

<P><STRONG><a name="[eb]"></a>HT_WriteSys</STRONG> (Thumb, 76 bytes, Stack size 12 bytes, drvlcd.o(i.HT_WriteSys))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = HT_WriteSys
</UL>
<BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DisplayStatus_Flag
</UL>

<P><STRONG><a name="[d8]"></a>HT_WriteUIHL12</STRONG> (Thumb, 736 bytes, Stack size 24 bytes, drvlcd.o(i.HT_WriteUIHL12))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HT_WriteUIHL12
</UL>
<BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DisplayStatus_Flag
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DisplayLeftSetValue_Flag
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ClearLeftSetValue_Flag
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Timer_On
</UL>

<P><STRONG><a name="[9d]"></a>HT_WriteValue</STRONG> (Thumb, 624 bytes, Stack size 12 bytes, drvlcd.o(i.HT_WriteValue))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = HT_WriteValue
</UL>
<BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DisplayValue
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispFlash
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenu_UpLongSelVal
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenu_UpLongSel
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenu_MainValue
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenu_DownLongData
</UL>

<P><STRONG><a name="[13]"></a>HardFault_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_it.o(i.HardFault_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[db]"></a>JudgeSetNewValue</STRONG> (Thumb, 42 bytes, Stack size 12 bytes, taskgui.o(i.JudgeSetNewValue))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = JudgeSetNewValue
</UL>
<BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetLeftSetNewValue
</UL>

<P><STRONG><a name="[d2]"></a>KeyDiff</STRONG> (Thumb, 296 bytes, Stack size 16 bytes, taskgui.o(i.KeyDiff))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = KeyDiff &rArr; HT_TouchStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HT_TouchStatus
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HT_LedStatus
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OneKeyDiff
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Buzzer
</UL>
<BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Main
</UL>

<P><STRONG><a name="[e4]"></a>KeyStatus</STRONG> (Thumb, 108 bytes, Stack size 8 bytes, taskgui.o(i.KeyStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = KeyStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadInputDataBit
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OneKeyStaus
</UL>
<BR>[Called By]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_Timer_Function
</UL>

<P><STRONG><a name="[ca]"></a>LCD_ClearLeftSetValue_Flag</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, taskgui.o(i.LCD_ClearLeftSetValue_Flag))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = LCD_ClearLeftSetValue_Flag &rArr; HT_WriteUIHL12
</UL>
<BR>[Calls]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HT_WriteUIHL12
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HT_WriteSet
</UL>
<BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Timer_On
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Key_RightLong
</UL>

<P><STRONG><a name="[b8]"></a>LCD_DisplayCapStatus_Flag</STRONG> (Thumb, 456 bytes, Stack size 24 bytes, taskgui.o(i.LCD_DisplayCapStatus_Flag))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = LCD_DisplayCapStatus_Flag &rArr; DispCapStatus &rArr; HT_WriteCapLED
</UL>
<BR>[Calls]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HT_WriteLedAddr
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HT_WriteCapLED
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispCapStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Key_Default
</UL>

<P><STRONG><a name="[b4]"></a>LCD_DisplayLeftSetValue_Flag</STRONG> (Thumb, 628 bytes, Stack size 24 bytes, taskgui.o(i.LCD_DisplayLeftSetValue_Flag))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = LCD_DisplayLeftSetValue_Flag &rArr; HT_WriteUIHL12
</UL>
<BR>[Calls]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HT_WriteUIHL12
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HT_WriteSet
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HT_WritePrt
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HT_WritePhase
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HT_WriteNorm
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HT_WriteCapType
</UL>
<BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Key_Default
</UL>

<P><STRONG><a name="[b6]"></a>LCD_DisplayMainValue_Flag</STRONG> (Thumb, 186 bytes, Stack size 8 bytes, taskgui.o(i.LCD_DisplayMainValue_Flag))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = LCD_DisplayMainValue_Flag &rArr; HT_WritePhase
</UL>
<BR>[Calls]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HT_WritePhase
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HT_WriteNorm
</UL>
<BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Key_Default
</UL>

<P><STRONG><a name="[b5]"></a>LCD_DisplayRightSetValue_Flag</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, taskgui.o(i.LCD_DisplayRightSetValue_Flag))
<BR><BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Key_Default
</UL>

<P><STRONG><a name="[b7]"></a>LCD_DisplayStatus_Flag</STRONG> (Thumb, 920 bytes, Stack size 24 bytes, taskgui.o(i.LCD_DisplayStatus_Flag))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = LCD_DisplayStatus_Flag &rArr; HT_WriteUIHL12
</UL>
<BR>[Calls]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HT_WriteUIHL12
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HT_WriteSys
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HT_WritePrt
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HT_WriteNorm
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HT_WriteCtrl
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HT_WriteCapStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Key_Default
</UL>

<P><STRONG><a name="[9c]"></a>LCD_DisplayValue</STRONG> (Thumb, 832 bytes, Stack size 48 bytes, taskgui.o(i.LCD_DisplayValue))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = LCD_DisplayValue &rArr; HT_WriteValue
</UL>
<BR>[Calls]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HT_WriteValue
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HT_WriteDot
</UL>
<BR>[Called By]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenu_MainValue
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenu_LeftSetValuePublic
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenu_DownLongData
</UL>

<P><STRONG><a name="[c1]"></a>ManualCtrl</STRONG> (Thumb, 248 bytes, Stack size 8 bytes, taskgui.o(i.ManualCtrl))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = ManualCtrl &rArr; ptlSetSwitchStatusCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ptlSetSwitchStatusCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Key_Up
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Key_Down
</UL>

<P><STRONG><a name="[c3]"></a>Manual_Init</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, taskgui.o(i.Manual_Init))
<BR><BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Key_Right
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Key_LeftLong
</UL>

<P><STRONG><a name="[ed]"></a>Manual_SearchCap</STRONG> (Thumb, 466 bytes, Stack size 32 bytes, taskgui.o(i.Manual_SearchCap))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = Manual_SearchCap &rArr; Manual_SearchOnState
</UL>
<BR>[Calls]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Manual_SearchOnState
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Manual_SearchOffState
</UL>
<BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdataUp_Manual_ON
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdataDown_Manual_OFF
</UL>

<P><STRONG><a name="[ee]"></a>Manual_SearchOffState</STRONG> (Thumb, 138 bytes, Stack size 12 bytes, taskgui.o(i.Manual_SearchOffState))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = Manual_SearchOffState
</UL>
<BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Manual_SearchCap
</UL>

<P><STRONG><a name="[ef]"></a>Manual_SearchOnState</STRONG> (Thumb, 40 bytes, Stack size 12 bytes, taskgui.o(i.Manual_SearchOnState))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = Manual_SearchOnState
</UL>
<BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Manual_SearchCap
</UL>

<P><STRONG><a name="[f7]"></a>MemData_CalcParam</STRONG> (Thumb, 98 bytes, Stack size 0 bytes, memdataoperate.o(i.MemData_CalcParam))
<BR><BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemData_WriteParam
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemData_Init
</UL>

<P><STRONG><a name="[f0]"></a>MemData_CmlTime</STRONG> (Thumb, 174 bytes, Stack size 72 bytes, memdataoperate.o(i.MemData_CmlTime))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = MemData_CmlTime &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemData_Init
</UL>

<P><STRONG><a name="[f1]"></a>MemData_CmpParam</STRONG> (Thumb, 22 bytes, Stack size 4 bytes, memdataoperate.o(i.MemData_CmpParam))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = MemData_CmpParam
</UL>
<BR>[Calls]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemData_SetDefaultParam
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemData_CmpParamType
</UL>
<BR>[Called By]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemData_ReadParam
</UL>

<P><STRONG><a name="[f2]"></a>MemData_CmpParamType</STRONG> (Thumb, 350 bytes, Stack size 0 bytes, memdataoperate.o(i.MemData_CmpParamType))
<BR><BR>[Called By]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ptlAnalysisSendSetCmd
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemData_CmpParam
</UL>

<P><STRONG><a name="[fc]"></a>MemData_Crc</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, memdataoperate.o(i.MemData_Crc))
<BR><BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemData_WriteParam
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemData_ReadParam
</UL>

<P><STRONG><a name="[86]"></a>MemData_Init</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, memdataoperate.o(i.MemData_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 360 + Unknown Stack Size
<LI>Call Chain = MemData_Init &rArr; MemData_InitSettingParam &rArr; MemData_ReadParam &rArr; MemData_WriteParam &rArr; MemData_Write_To_Flash &rArr; FLASH_ProgramWord &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemData_WriteParam
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemData_InitZNCap_State
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemData_InitVerParam
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemData_InitSettingParam
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemData_InitPowerVal
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemData_CmlTime
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemData_CalcParam
</UL>
<BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Init
</UL>

<P><STRONG><a name="[f6]"></a>MemData_InitPowerVal</STRONG> (Thumb, 110 bytes, Stack size 0 bytes, memdataoperate.o(i.MemData_InitPowerVal))
<BR><BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemData_Init
</UL>

<P><STRONG><a name="[f4]"></a>MemData_InitSettingParam</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, memdataoperate.o(i.MemData_InitSettingParam))
<BR><BR>[Stack]<UL><LI>Max Depth = 352 + Unknown Stack Size
<LI>Call Chain = MemData_InitSettingParam &rArr; MemData_ReadParam &rArr; MemData_WriteParam &rArr; MemData_Write_To_Flash &rArr; FLASH_ProgramWord &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemData_SetDefaultParam
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemData_ReadParam
</UL>
<BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemData_Init
</UL>

<P><STRONG><a name="[f3]"></a>MemData_InitVerParam</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, memdataoperate.o(i.MemData_InitVerParam))
<BR><BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemData_Init
</UL>

<P><STRONG><a name="[f5]"></a>MemData_InitZNCap_State</STRONG> (Thumb, 116 bytes, Stack size 16 bytes, memdataoperate.o(i.MemData_InitZNCap_State))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = MemData_InitZNCap_State
</UL>
<BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemData_Init
</UL>

<P><STRONG><a name="[fa]"></a>MemData_ReadCalib</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, memdataoperate.o(i.MemData_ReadCalib))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = MemData_ReadCalib
</UL>
<BR>[Calls]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_Power_init
</UL>

<P><STRONG><a name="[f8]"></a>MemData_ReadParam</STRONG> (Thumb, 70 bytes, Stack size 144 bytes, memdataoperate.o(i.MemData_ReadParam))
<BR><BR>[Stack]<UL><LI>Max Depth = 344 + Unknown Stack Size
<LI>Call Chain = MemData_ReadParam &rArr; MemData_WriteParam &rArr; MemData_Write_To_Flash &rArr; FLASH_ProgramWord &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemData_WriteParam
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemData_Crc
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemData_CmpParam
</UL>
<BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemData_InitSettingParam
</UL>

<P><STRONG><a name="[c4]"></a>MemData_SetDefaultParam</STRONG> (Thumb, 132 bytes, Stack size 0 bytes, memdataoperate.o(i.MemData_SetDefaultParam))
<BR><BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Key_LeftLong
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemData_InitSettingParam
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemData_CmpParam
</UL>

<P><STRONG><a name="[fd]"></a>MemData_WriteCalib</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, memdataoperate.o(i.MemData_WriteCalib))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = MemData_WriteCalib &rArr; MemData_Write_To_Flash &rArr; FLASH_ProgramWord &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemData_Write_To_Flash
</UL>
<BR>[Called By]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sample_WriteAllCalibValue
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sample_Init_DefaultCalibValue
</UL>

<P><STRONG><a name="[dc]"></a>MemData_WriteParam</STRONG> (Thumb, 68 bytes, Stack size 144 bytes, memdataoperate.o(i.MemData_WriteParam))
<BR><BR>[Stack]<UL><LI>Max Depth = 200 + Unknown Stack Size
<LI>Call Chain = MemData_WriteParam &rArr; MemData_Write_To_Flash &rArr; FLASH_ProgramWord &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemData_Write_To_Flash
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemData_Crc
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemData_CalcParam
</UL>
<BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetUpSetNewValue
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetLeftSetNewValue
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ptlAnalysisSendSetCmd
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemData_Init
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemData_ReadParam
</UL>

<P><STRONG><a name="[fe]"></a>MemData_Write_To_Flash</STRONG> (Thumb, 92 bytes, Stack size 32 bytes, memdataoperate.o(i.MemData_Write_To_Flash))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = MemData_Write_To_Flash &rArr; FLASH_ProgramWord &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Unlock
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ProgramWord
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Lock
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ErasePage
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ClearFlag
</UL>
<BR>[Called By]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemData_WriteCalib
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemData_WriteParam
</UL>

<P><STRONG><a name="[14]"></a>MemManage_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_it.o(i.MemManage_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(i.NMI_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[92]"></a>NVIC_Configuration</STRONG> (Thumb, 134 bytes, Stack size 8 bytes, bsp.o(i.NVIC_Configuration))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = NVIC_Configuration &rArr; NVIC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SetVectorTable
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_PriorityGroupConfig
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_Init
</UL>

<P><STRONG><a name="[104]"></a>NVIC_Init</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, misc.o(i.NVIC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = NVIC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Configuration
</UL>

<P><STRONG><a name="[103]"></a>NVIC_PriorityGroupConfig</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, misc.o(i.NVIC_PriorityGroupConfig))
<BR><BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Configuration
</UL>

<P><STRONG><a name="[102]"></a>NVIC_SetVectorTable</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, misc.o(i.NVIC_SetVectorTable))
<BR><BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Configuration
</UL>

<P><STRONG><a name="[e3]"></a>OneKeyDiff</STRONG> (Thumb, 92 bytes, Stack size 8 bytes, taskgui.o(i.OneKeyDiff))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = OneKeyDiff
</UL>
<BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyDiff
</UL>

<P><STRONG><a name="[e6]"></a>OneKeyStaus</STRONG> (Thumb, 178 bytes, Stack size 0 bytes, taskgui.o(i.OneKeyStaus))
<BR><BR>[Called By]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyStatus
</UL>

<P><STRONG><a name="[12e]"></a>PT_SemClear</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, pt_sem.o(i.PT_SemClear))
<BR><BR>[Called By]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sample_SetCalibCmd
</UL>

<P><STRONG><a name="[16c]"></a>PT_SemPend</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, pt_sem.o(i.PT_SemPend))
<BR><BR>[Called By]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Thread_Power_RMS
<LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Thread_Power_Freq
<LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Thread_Power_DFT
<LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Thread_Power_CALIB
</UL>

<P><STRONG><a name="[10a]"></a>PT_SemPost</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, pt_sem.o(i.PT_SemPost))
<BR><BR>[Called By]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_Power_Function_Calib
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sample_SetCalibCmd
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sample_Calc_AddValue
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Power_SampleDotIT
</UL>

<P><STRONG><a name="[16d]"></a>PT_SemTest</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, pt_sem.o(i.PT_SemTest))
<BR><BR>[Called By]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Thread_Power_RMS
</UL>

<P><STRONG><a name="[8c]"></a>PT_TimerDelay</STRONG> (Thumb, 24 bytes, Stack size 12 bytes, pt_timer.o(i.PT_TimerDelay))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = PT_TimerDelay &rArr; PT_TimerDiff
</UL>
<BR>[Calls]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PT_TimerGet
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PT_TimerDiff
</UL>
<BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Init
</UL>

<P><STRONG><a name="[106]"></a>PT_TimerDiff</STRONG> (Thumb, 26 bytes, Stack size 4 bytes, pt_timer.o(i.PT_TimerDiff))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = PT_TimerDiff
</UL>
<BR>[Calls]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PT_TimerGet
</UL>
<BR>[Called By]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_PtlRx_Function
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PT_TimerDelay
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svc_Protect_ProtectRtn
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svc_Protect_ProtectHappen
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svc_Ctrl_AutoRunProc
</UL>

<P><STRONG><a name="[107]"></a>PT_TimerExpired</STRONG> (Thumb, 26 bytes, Stack size 4 bytes, pt_timer.o(i.PT_TimerExpired))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = PT_TimerExpired
</UL>
<BR>[Calls]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PT_TimerGet
</UL>
<BR>[Called By]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Thread_SVC
<LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Thread_PtlTx
<LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Thread_PtlRx
<LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Thread_PtlJudgeStatus
<LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Thread_Protect
<LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Thread_Power_Judge
<LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Thread_Power_Freq
<LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Thread_Power_DFT
<LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Thread_MS
<LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Thread_GUI
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Thread_DevStatus
</UL>

<P><STRONG><a name="[105]"></a>PT_TimerGet</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, pt_timer.o(i.PT_TimerGet))
<BR><BR>[Called By]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PT_TimerDiff
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_PtlTx_Function
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_PtlRx_Function
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PT_TimerSet
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PT_TimerExpired
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PT_TimerDelay
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svc_Protect_ProtectRtn
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svc_Protect_ProtectHappen
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svc_Ctrl_JudgeAutoRun
</UL>

<P><STRONG><a name="[134]"></a>PT_TimerIncrement</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, pt_timer.o(i.PT_TimerIncrement))
<BR><BR>[Called By]<UL><LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[108]"></a>PT_TimerSet</STRONG> (Thumb, 16 bytes, Stack size 4 bytes, pt_timer.o(i.PT_TimerSet))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = PT_TimerSet
</UL>
<BR>[Calls]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PT_TimerGet
</UL>
<BR>[Called By]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Thread_SendDelayTimer
<LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Thread_SVC
<LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Thread_PtlRx
<LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Thread_PtlJudgeStatus
<LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Thread_Protect
<LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Thread_Power_Judge
<LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Thread_Power_Freq
<LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Thread_Power_DFT
<LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Thread_MS
<LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Thread_GUI
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Thread_DevStatus
</UL>

<P><STRONG><a name="[19]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(i.PendSV_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[95]"></a>Power_SampleDMAIT</STRONG> (Thumb, 114 bytes, Stack size 0 bytes, taskpower.o(i.Power_SampleDMAIT))
<BR><BR>[Called By]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Power_SampleDotIT
<LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_Channel1_IRQHandler
</UL>

<P><STRONG><a name="[109]"></a>Power_SampleDotIT</STRONG> (Thumb, 300 bytes, Stack size 16 bytes, taskpower.o(i.Power_SampleDotIT))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Power_SampleDotIT
</UL>
<BR>[Calls]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PT_SemPost
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Power_SampleDMAIT
</UL>
<BR>[Called By]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM3_IRQHandler
</UL>

<P><STRONG><a name="[148]"></a>Power_SetPowerVal</STRONG> (Thumb, 82 bytes, Stack size 0 bytes, taskpower.o(i.Power_SetPowerVal))
<BR><BR>[Called By]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_Power_Function_RMS
</UL>

<P><STRONG><a name="[70]"></a>RCC_ADCCLKConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_rcc.o(i.RCC_ADCCLKConfig))
<BR><BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Configuration
</UL>

<P><STRONG><a name="[71]"></a>RCC_AHBPeriphClockCmd</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_rcc.o(i.RCC_AHBPeriphClockCmd))
<BR><BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Configuration
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_Configuration
</UL>

<P><STRONG><a name="[73]"></a>RCC_APB1PeriphClockCmd</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_rcc.o(i.RCC_APB1PeriphClockCmd))
<BR><BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Configuration
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_Configuration
</UL>

<P><STRONG><a name="[72]"></a>RCC_APB2PeriphClockCmd</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_rcc.o(i.RCC_APB2PeriphClockCmd))
<BR><BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Configuration
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_Configuration
</UL>

<P><STRONG><a name="[8e]"></a>RCC_Configuration</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, bsp.o(i.RCC_Configuration))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = RCC_Configuration
</UL>
<BR>[Calls]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHBPeriphClockCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_Init
</UL>

<P><STRONG><a name="[175]"></a>RCC_GetClocksFreq</STRONG> (Thumb, 192 bytes, Stack size 12 bytes, stm32f10x_rcc.o(i.RCC_GetClocksFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = RCC_GetClocksFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
</UL>

<P><STRONG><a name="[cf]"></a>Reset_Screen</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, drvlcd.o(i.Reset_Screen))
<BR><BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Key_UpLong
</UL>

<P><STRONG><a name="[10b]"></a>SERIAL1_IRQHandler</STRONG> (Thumb, 164 bytes, Stack size 16 bytes, drvserial.o(i.SERIAL1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = SERIAL1_IRQHandler &rArr; USART_GetITStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Cmd
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ReceiveData
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetITStatus
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetFlagStatus
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ClearFlag
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_SetCurrDataCounter
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_GetCurrDataCounter
</UL>
<BR>[Called By]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
</UL>

<P><STRONG><a name="[112]"></a>SERIAL2_IRQHandler</STRONG> (Thumb, 164 bytes, Stack size 16 bytes, drvserial.o(i.SERIAL2_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = SERIAL2_IRQHandler &rArr; USART_GetITStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Cmd
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ReceiveData
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetITStatus
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetFlagStatus
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ClearFlag
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_SetCurrDataCounter
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_GetCurrDataCounter
</UL>
<BR>[Called By]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_IRQHandler
</UL>

<P><STRONG><a name="[17]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(i.SVC_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[11c]"></a>Sample_CalcCrc</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, taskpower.o(i.Sample_CalcCrc))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Sample_CalcCrc
</UL>
<BR>[Called By]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sample_WriteAllCalibValue
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sample_Init_DefaultCalibValue
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sample_Calc_MemValue
</UL>

<P><STRONG><a name="[113]"></a>Sample_Calc_AddValue</STRONG> (Thumb, 906 bytes, Stack size 32 bytes, taskpower.o(i.Sample_Calc_AddValue))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Sample_Calc_AddValue
</UL>
<BR>[Calls]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PT_SemPost
</UL>
<BR>[Called By]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_Power_Function_Calc_AddValue
</UL>

<P><STRONG><a name="[114]"></a>Sample_Calc_CalibValue</STRONG> (Thumb, 176 bytes, Stack size 24 bytes, taskpower.o(i.Sample_Calc_CalibValue))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Sample_Calc_CalibValue &rArr; __aeabi_fdiv
</UL>
<BR>[Calls]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
</UL>
<BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_Power_init
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sample_Calib
</UL>

<P><STRONG><a name="[117]"></a>Sample_Calc_DotArray</STRONG> (Thumb, 778 bytes, Stack size 80 bytes, taskpower.o(i.Sample_Calc_DotArray))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = Sample_Calc_DotArray &rArr; calcPowerData_linearSampleDataModify &rArr; line_calc_x32_y32 &rArr; linear_x32_y32 &rArr; __aeabi_ldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calcPowerData_linearSampleDataModify
</UL>
<BR>[Called By]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_Power_Function_Calc_DotArray
</UL>

<P><STRONG><a name="[119]"></a>Sample_Calc_FreqYSQueue</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, taskpower.o(i.Sample_Calc_FreqYSQueue))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Sample_Calc_FreqYSQueue &rArr; __aeabi_ldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_Power_init
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_Power_Function_Freq
</UL>

<P><STRONG><a name="[11b]"></a>Sample_Calc_MemValue</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, taskpower.o(i.Sample_Calc_MemValue))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = Sample_Calc_MemValue &rArr; Sample_Init_DefaultCalibValue &rArr; MemData_WriteCalib &rArr; MemData_Write_To_Flash &rArr; FLASH_ProgramWord &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sample_SetCalibValue
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sample_Init_DefaultCalibValue
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sample_CalcCrc
</UL>
<BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_Power_init
</UL>

<P><STRONG><a name="[147]"></a>Sample_Calc_Phase</STRONG> (Thumb, 108 bytes, Stack size 0 bytes, taskpower.o(i.Sample_Calc_Phase))
<BR><BR>[Called By]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_Power_Function_RMS
</UL>

<P><STRONG><a name="[11f]"></a>Sample_Calc_RMS</STRONG> (Thumb, 568 bytes, Stack size 80 bytes, taskpower.o(i.Sample_Calc_RMS))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = Sample_Calc_RMS &rArr; cos &rArr; __ieee754_rem_pio2 &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqrt_64fixed
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cos
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2uiz
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
</UL>
<BR>[Called By]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_Power_Function_RMS
</UL>

<P><STRONG><a name="[14c]"></a>Sample_Calc_RelayTime</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, taskpower.o(i.Sample_Calc_RelayTime))
<BR><BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_Power_init
</UL>

<P><STRONG><a name="[126]"></a>Sample_Calc_Temperature</STRONG> (Thumb, 126 bytes, Stack size 24 bytes, taskpower.o(i.Sample_Calc_Temperature))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Sample_Calc_Temperature &rArr; __aeabi_fmul
</UL>
<BR>[Calls]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2uiz
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
</UL>
<BR>[Called By]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_Power_Function_RMS
</UL>

<P><STRONG><a name="[128]"></a>Sample_Calib</STRONG> (Thumb, 710 bytes, Stack size 104 bytes, taskpower.o(i.Sample_Calib))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = Sample_Calib &rArr; Sample_WriteAllCalibValue &rArr; MemData_WriteCalib &rArr; MemData_Write_To_Flash &rArr; FLASH_ProgramWord &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqrt_64fixed
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sample_WriteAllCalibValue
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sample_Calc_CalibValue
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;acos
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2uiz
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_Power_Function_Calib
</UL>

<P><STRONG><a name="[12b]"></a>Sample_GetCalibValue</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, taskpower.o(i.Sample_GetCalibValue))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Sample_GetCalibValue
</UL>
<BR>[Calls]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sample_WriteAllCalibValue
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sample_ReadAllCalibValue
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sample_Init_DefaultCalibValue
</UL>

<P><STRONG><a name="[14b]"></a>Sample_Get_MemRelayTime</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, taskpower.o(i.Sample_Get_MemRelayTime))
<BR><BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_Power_init
</UL>

<P><STRONG><a name="[11d]"></a>Sample_Init_DefaultCalibValue</STRONG> (Thumb, 70 bytes, Stack size 88 bytes, taskpower.o(i.Sample_Init_DefaultCalibValue))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = Sample_Init_DefaultCalibValue &rArr; MemData_WriteCalib &rArr; MemData_Write_To_Flash &rArr; FLASH_ProgramWord &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemData_WriteCalib
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sample_GetCalibValue
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sample_CalcCrc
</UL>
<BR>[Called By]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sample_Calc_MemValue
</UL>

<P><STRONG><a name="[13d]"></a>Sample_Init_MemValue</STRONG> (Thumb, 88 bytes, Stack size 0 bytes, taskpower.o(i.Sample_Init_MemValue))
<BR><BR>[Called By]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_Power_Function_RMS
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_Power_Function_CLR
</UL>

<P><STRONG><a name="[12c]"></a>Sample_ReadAllCalibValue</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, taskpower.o(i.Sample_ReadAllCalibValue))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Sample_ReadAllCalibValue &rArr; Sample_GetCalibValue
</UL>
<BR>[Calls]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sample_GetCalibValue
</UL>
<BR>[Called By]<UL><LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ptlAnalysisSendQueryCmd
</UL>

<P><STRONG><a name="[12d]"></a>Sample_SetCalibCmd</STRONG> (Thumb, 198 bytes, Stack size 16 bytes, taskpower.o(i.Sample_SetCalibCmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Sample_SetCalibCmd &rArr; HT_TouchStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PT_SemPost
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PT_SemClear
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HT_TouchStatus
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HT_LedStatus
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_Power_Function_CLR
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ptlCalibDataAnalysis
</UL>

<P><STRONG><a name="[11e]"></a>Sample_SetCalibValue</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, taskpower.o(i.Sample_SetCalibValue))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Sample_SetCalibValue
</UL>
<BR>[Calls]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sample_Calc_MemValue
</UL>

<P><STRONG><a name="[12a]"></a>Sample_WriteAllCalibValue</STRONG> (Thumb, 32 bytes, Stack size 80 bytes, taskpower.o(i.Sample_WriteAllCalibValue))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = Sample_WriteAllCalibValue &rArr; MemData_WriteCalib &rArr; MemData_Write_To_Flash &rArr; FLASH_ProgramWord &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemData_WriteCalib
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sample_GetCalibValue
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sample_CalcCrc
</UL>
<BR>[Called By]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sample_Calib
</UL>

<P><STRONG><a name="[193]"></a>Serial_ClrRxBuf</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, drvserial.o(i.Serial_ClrRxBuf))
<BR><BR>[Called By]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ptl81_SendBroadcast
</UL>

<P><STRONG><a name="[153]"></a>Serial_GetRxString</STRONG> (Thumb, 252 bytes, Stack size 16 bytes, drvserial.o(i.Serial_GetRxString))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Serial_GetRxString
</UL>
<BR>[Called By]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_PtlRx_Function
</UL>

<P><STRONG><a name="[132]"></a>Set_Thread_SendDelayTimer</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, sysmain.o(i.Set_Thread_SendDelayTimer))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = Set_Thread_SendDelayTimer &rArr; PT_TimerSet
</UL>
<BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PT_TimerSet
</UL>
<BR>[Called By]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_PtlTx_Function
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_PtlRx_Function
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[a8]"></a>Sin_find</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, taskpower.o(i.Sin_find))
<BR><BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FFT
</UL>

<P><STRONG><a name="[133]"></a>SysTick_CLKSourceConfig</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, misc.o(i.SysTick_CLKSourceConfig))
<BR><BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Configuration
</UL>

<P><STRONG><a name="[93]"></a>SysTick_Configuration</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, bsp.o(i.SysTick_Configuration))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SysTick_Configuration
</UL>
<BR>[Calls]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_CLKSourceConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_Init
</UL>

<P><STRONG><a name="[1a]"></a>SysTick_Handler</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, stm32f10x_it.o(i.SysTick_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = SysTick_Handler &rArr; Task_Timer_Function &rArr; GUI_Timer_On &rArr; LCD_ClearLeftSetValue_Flag &rArr; HT_WriteUIHL12
</UL>
<BR>[Calls]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_Timer_Function
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PT_TimerIncrement
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[46]"></a>SystemInit</STRONG> (Thumb, 78 bytes, Stack size 8 bytes, system_stm32f10x.o(i.SystemInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = SystemInit &rArr; SetSysClock &rArr; SetSysClockTo72
</UL>
<BR>[Calls]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSysClock
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(.text)
</UL>
<P><STRONG><a name="[37]"></a>TIM2_IRQHandler</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, stm32f10x_it.o(i.TIM2_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = TIM2_IRQHandler &rArr; TIM_GetITStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_GetITStatus
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ClearITPendingBit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[38]"></a>TIM3_IRQHandler</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, stm32f10x_it.o(i.TIM3_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = TIM3_IRQHandler &rArr; Power_SampleDotIT
</UL>
<BR>[Calls]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Power_SampleDotIT
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_GetITStatus
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ClearITPendingBit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[39]"></a>TIM4_IRQHandler</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, stm32f10x_it.o(i.TIM4_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = TIM4_IRQHandler &rArr; TIM_GetITStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_GetITStatus
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ClearITPendingBit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[83]"></a>TIM_ClearFlag</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_tim.o(i.TIM_ClearFlag))
<BR><BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Configuration
</UL>

<P><STRONG><a name="[137]"></a>TIM_ClearITPendingBit</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_tim.o(i.TIM_ClearITPendingBit))
<BR><BR>[Called By]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM4_IRQHandler
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM3_IRQHandler
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM2_IRQHandler
</UL>

<P><STRONG><a name="[74]"></a>TIM_Cmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_tim.o(i.TIM_Cmd))
<BR><BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Configuration
</UL>

<P><STRONG><a name="[136]"></a>TIM_GetITStatus</STRONG> (Thumb, 34 bytes, Stack size 12 bytes, stm32f10x_tim.o(i.TIM_GetITStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = TIM_GetITStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM4_IRQHandler
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM3_IRQHandler
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM2_IRQHandler
</UL>

<P><STRONG><a name="[84]"></a>TIM_ITConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_tim.o(i.TIM_ITConfig))
<BR><BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Configuration
</UL>

<P><STRONG><a name="[82]"></a>TIM_SelectOutputTrigger</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_tim.o(i.TIM_SelectOutputTrigger))
<BR><BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Configuration
</UL>

<P><STRONG><a name="[81]"></a>TIM_TimeBaseInit</STRONG> (Thumb, 122 bytes, Stack size 0 bytes, stm32f10x_tim.o(i.TIM_TimeBaseInit))
<BR><BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Configuration
</UL>

<P><STRONG><a name="[88]"></a>Task_Com_init</STRONG> (Thumb, 20 bytes, Stack size 4 bytes, taskcom.o(i.Task_Com_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = Task_Com_init
</UL>
<BR>[Calls]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ptlSetThreadStatus
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ptlClrDevAddrEnable
</UL>
<BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetLeftSetNewValue
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Init
</UL>

<P><STRONG><a name="[16b]"></a>Task_DevStatus_Function</STRONG> (Thumb, 58 bytes, Stack size 0 bytes, taskdevstatus.o(i.Task_DevStatus_Function))
<BR><BR>[Called By]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Thread_DevStatus
</UL>

<P><STRONG><a name="[8b]"></a>Task_DevStatus_Init</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, taskdevstatus.o(i.Task_DevStatus_Init))
<BR><BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Init
</UL>

<P><STRONG><a name="[13a]"></a>Task_GUI_Function</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, taskgui.o(i.Task_GUI_Function))
<BR><BR>[Stack]<UL><LI>Max Depth = 240 + Unknown Stack Size
<LI>Call Chain = Task_GUI_Function &rArr; GUI_Main &rArr; GUI_Key_RightLong &rArr; GetLeftSetNewValue &rArr; MemData_WriteParam &rArr; MemData_Write_To_Flash &rArr; FLASH_ProgramWord &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Main
</UL>
<BR>[Called By]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Thread_GUI
</UL>

<P><STRONG><a name="[8a]"></a>Task_GUI_init</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, taskgui.o(i.Task_GUI_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = Task_GUI_init &rArr; HT_Init &rArr; Update_screen &rArr; HT_WriteData &rArr; HT_SendBit
</UL>
<BR>[Calls]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HT_Init
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Buzzer
</UL>
<BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Init
</UL>

<P><STRONG><a name="[13b]"></a>Task_MS_Function</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, taskcom.o(i.Task_MS_Function))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = Task_MS_Function &rArr; ptl81_Task_MainSendData &rArr; ptl81_SendEnd &rArr; ptl81_SetFrame &rArr; USART_DMAReConfig &rArr; DMA_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ptl81_Task_MainSendData
</UL>
<BR>[Called By]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Thread_MS
</UL>

<P><STRONG><a name="[12f]"></a>Task_Power_Function_CLR</STRONG> (Thumb, 8 bytes, Stack size 4 bytes, taskpower.o(i.Task_Power_Function_CLR))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = Task_Power_Function_CLR
</UL>
<BR>[Calls]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sample_Init_MemValue
</UL>
<BR>[Called By]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sample_SetCalibCmd
<LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Thread_Power_CALIB
</UL>

<P><STRONG><a name="[13e]"></a>Task_Power_Function_Calc_AddValue</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, taskpower.o(i.Task_Power_Function_Calc_AddValue))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Task_Power_Function_Calc_AddValue &rArr; Sample_Calc_AddValue
</UL>
<BR>[Calls]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sample_Calc_AddValue
</UL>
<BR>[Called By]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Thread_Power_DFT
</UL>

<P><STRONG><a name="[13f]"></a>Task_Power_Function_Calc_DotArray</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, taskpower.o(i.Task_Power_Function_Calc_DotArray))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = Task_Power_Function_Calc_DotArray &rArr; Sample_Calc_DotArray &rArr; calcPowerData_linearSampleDataModify &rArr; line_calc_x32_y32 &rArr; linear_x32_y32 &rArr; __aeabi_ldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sample_Calc_DotArray
</UL>
<BR>[Called By]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Thread_Power_DFT
</UL>

<P><STRONG><a name="[140]"></a>Task_Power_Function_Calib</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, taskpower.o(i.Task_Power_Function_Calib))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = Task_Power_Function_Calib &rArr; Task_Power_init &rArr; Sample_Calc_MemValue &rArr; Sample_Init_DefaultCalibValue &rArr; MemData_WriteCalib &rArr; MemData_Write_To_Flash &rArr; FLASH_ProgramWord &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PT_SemPost
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_Power_init
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sample_Calib
</UL>
<BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Thread_Power_CALIB
</UL>

<P><STRONG><a name="[141]"></a>Task_Power_Function_Freq</STRONG> (Thumb, 290 bytes, Stack size 48 bytes, taskpower.o(i.Task_Power_Function_Freq))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = Task_Power_Function_Freq &rArr; calcPowerData_CalcFFTHarm1 &rArr; asin &rArr; sqrt &rArr; _dsqrt &rArr; __fpl_dnaninf
</UL>
<BR>[Calls]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calcPowerData_linearSampleDataModify
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calcPowerData_CalcFFTHarm1
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sample_Calc_FreqYSQueue
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2uiz
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
</UL>
<BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Thread_Power_Freq
</UL>

<P><STRONG><a name="[145]"></a>Task_Power_Function_JudgeErr</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, taskpower.o(i.Task_Power_Function_JudgeErr))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = Task_Power_Function_JudgeErr &rArr; Task_Power_init &rArr; Sample_Calc_MemValue &rArr; Sample_Init_DefaultCalibValue &rArr; MemData_WriteCalib &rArr; MemData_Write_To_Flash &rArr; FLASH_ProgramWord &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_Power_init
</UL>
<BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Thread_Power_Judge
</UL>

<P><STRONG><a name="[146]"></a>Task_Power_Function_RMS</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, taskpower.o(i.Task_Power_Function_RMS))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = Task_Power_Function_RMS &rArr; Sample_Calc_RMS &rArr; cos &rArr; __ieee754_rem_pio2 &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sample_Init_MemValue
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sample_Calc_Temperature
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sample_Calc_RMS
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sample_Calc_Phase
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Power_SetPowerVal
</UL>
<BR>[Called By]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Thread_Power_RMS
</UL>

<P><STRONG><a name="[149]"></a>Task_Power_Function_THD</STRONG> (Thumb, 196 bytes, Stack size 32 bytes, taskpower.o(i.Task_Power_Function_THD))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = Task_Power_Function_THD &rArr; calcPowerData_CalcFFTHarm &rArr; asin &rArr; sqrt &rArr; _dsqrt &rArr; __fpl_dnaninf
</UL>
<BR>[Calls]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calcPowerData_CalcFFTHarm
</UL>
<BR>[Called By]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Thread_Power_DFT
</UL>

<P><STRONG><a name="[87]"></a>Task_Power_init</STRONG> (Thumb, 60 bytes, Stack size 88 bytes, taskpower.o(i.Task_Power_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = Task_Power_init &rArr; Sample_Calc_MemValue &rArr; Sample_Init_DefaultCalibValue &rArr; MemData_WriteCalib &rArr; MemData_Write_To_Flash &rArr; FLASH_ProgramWord &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemData_ReadCalib
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sample_Get_MemRelayTime
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sample_Calc_RelayTime
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sample_Calc_MemValue
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sample_Calc_FreqYSQueue
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sample_Calc_CalibValue
</UL>
<BR>[Called By]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_Power_Function_JudgeErr
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_Power_Function_Calib
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Init
</UL>

<P><STRONG><a name="[14d]"></a>Task_Protect_Function</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, tasksvc.o(i.Task_Protect_Function))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = Task_Protect_Function &rArr; svc_Protect_JudgeFault &rArr; svc_Protect_JudgeOverProtectHappen &rArr; svc_Protect_ProtectRtn &rArr; PT_TimerDiff
</UL>
<BR>[Calls]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ptl81_Enable
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svc_Protect_SelFHKG
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svc_Protect_JudgeFault
</UL>
<BR>[Called By]<UL><LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Thread_Protect
</UL>

<P><STRONG><a name="[151]"></a>Task_PtlJudgeStatus_Function</STRONG> (Thumb, 108 bytes, Stack size 4 bytes, taskcom.o(i.Task_PtlJudgeStatus_Function))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = Task_PtlJudgeStatus_Function &rArr; DevStatusToMain
</UL>
<BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ptlSetStation2Type
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DevStatusToMain
</UL>
<BR>[Called By]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Thread_PtlJudgeStatus
</UL>

<P><STRONG><a name="[152]"></a>Task_PtlRx_Function</STRONG> (Thumb, 468 bytes, Stack size 8 bytes, taskcom.o(i.Task_PtlRx_Function))
<BR><BR>[Stack]<UL><LI>Max Depth = 248 + Unknown Stack Size
<LI>Call Chain = Task_PtlRx_Function &rArr; ptlAnalysisData &rArr; ptlNewDataAnalysis &rArr; ptlAnalysisSendSetCmd &rArr; MemData_WriteParam &rArr; MemData_Write_To_Flash &rArr; FLASH_ProgramWord &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Thread_SendDelayTimer
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Serial_GetRxString
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PT_TimerGet
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PT_TimerDiff
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ptlGetCRC
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ptlClrPtlData
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ptlAnalysisData_ptl81
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ptlAnalysisData
</UL>
<BR>[Called By]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Thread_PtlRx
</UL>

<P><STRONG><a name="[158]"></a>Task_PtlTx_Function</STRONG> (Thumb, 360 bytes, Stack size 8 bytes, taskcom.o(i.Task_PtlTx_Function))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = Task_PtlTx_Function &rArr; ptlSetJHFrame &rArr; vPtlSetFrameData &rArr; USART_DMAReConfig &rArr; DMA_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Thread_SendDelayTimer
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PT_TimerGet
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPtlSetFrameData
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ptlSetMainStationData
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ptlSetJHFrame
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ptlSetChangeFrame
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ptlMainSetFrame
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ptlMainSendActFrame
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ptlMainClrSpareAddr
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ptl81_SetIndicatorFrame
</UL>
<BR>[Called By]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Thread_PtlTx
</UL>

<P><STRONG><a name="[161]"></a>Task_SVC_Function</STRONG> (Thumb, 146 bytes, Stack size 8 bytes, tasksvc.o(i.Task_SVC_Function))
<BR><BR>[Stack]<UL><LI>Max Depth = 400<LI>Call Chain = Task_SVC_Function &rArr; svc_Ctrl_AutoRunProc &rArr; svc_Ctrl_JudgeAutoRun &rArr; svc_Ctrl_SelCap &rArr; svc_Ctrl_SelCap_Phase_Cmp &rArr; svc_Phase_Search &rArr; svc_Phase_CalcApparentCur &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svc_QueryAllZNCapState
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svc_Protect_GetProtectStatus
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svc_Ctrl_SetSysStatus
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svc_Ctrl_PhaseCalc
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svc_Ctrl_Calc
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svc_Ctrl_AutoRunProc
</UL>
<BR>[Called By]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Thread_SVC
</UL>

<P><STRONG><a name="[89]"></a>Task_SVC_init</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, tasksvc.o(i.Task_SVC_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Task_SVC_init
</UL>
<BR>[Calls]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svc_Protect_CancelJudge
</UL>
<BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Init
</UL>

<P><STRONG><a name="[135]"></a>Task_Timer_Function</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, taskgui.o(i.Task_Timer_Function))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = Task_Timer_Function &rArr; GUI_Timer_On &rArr; LCD_ClearLeftSetValue_Flag &rArr; HT_WriteUIHL12
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyStatus
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Timer_On
</UL>
<BR>[Called By]<UL><LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[f]"></a>Thread_DevStatus</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, sysmain.o(i.Thread_DevStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = Thread_DevStatus &rArr; PT_TimerSet
</UL>
<BR>[Calls]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pt_lc_set
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pt_lc_get
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PT_TimerSet
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PT_TimerExpired
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_DevStatus_Function
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sysmain.o(.data)
</UL>
<P><STRONG><a name="[4]"></a>Thread_GUI</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, sysmain.o(i.Thread_GUI))
<BR><BR>[Stack]<UL><LI>Max Depth = 248 + Unknown Stack Size
<LI>Call Chain = Thread_GUI &rArr; Task_GUI_Function &rArr; GUI_Main &rArr; GUI_Key_RightLong &rArr; GetLeftSetNewValue &rArr; MemData_WriteParam &rArr; MemData_Write_To_Flash &rArr; FLASH_ProgramWord &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_GUI_Function
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pt_lc_set
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pt_lc_get
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PT_TimerSet
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PT_TimerExpired
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sysmain.o(.data)
</UL>
<P><STRONG><a name="[10]"></a>Thread_MS</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, sysmain.o(i.Thread_MS))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = Thread_MS &rArr; Task_MS_Function &rArr; ptl81_Task_MainSendData &rArr; ptl81_SendEnd &rArr; ptl81_SetFrame &rArr; USART_DMAReConfig &rArr; DMA_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_MS_Function
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pt_lc_set
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pt_lc_get
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PT_TimerSet
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PT_TimerExpired
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sysmain.o(.data)
</UL>
<P><STRONG><a name="[9]"></a>Thread_Power_CALIB</STRONG> (Thumb, 106 bytes, Stack size 8 bytes, sysmain.o(i.Thread_Power_CALIB))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = Thread_Power_CALIB &rArr; Task_Power_Function_Calib &rArr; Task_Power_init &rArr; Sample_Calc_MemValue &rArr; Sample_Init_DefaultCalibValue &rArr; MemData_WriteCalib &rArr; MemData_Write_To_Flash &rArr; FLASH_ProgramWord &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_Power_Function_Calib
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_Power_Function_CLR
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pt_lc_set
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pt_lc_get
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PT_SemPend
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sysmain.o(.data)
</UL>
<P><STRONG><a name="[7]"></a>Thread_Power_DFT</STRONG> (Thumb, 208 bytes, Stack size 8 bytes, sysmain.o(i.Thread_Power_DFT))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = Thread_Power_DFT &rArr; Task_Power_Function_THD &rArr; calcPowerData_CalcFFTHarm &rArr; asin &rArr; sqrt &rArr; _dsqrt &rArr; __fpl_dnaninf
</UL>
<BR>[Calls]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_Power_Function_THD
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_Power_Function_Calc_DotArray
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_Power_Function_Calc_AddValue
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pt_lc_set
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pt_lc_get
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PT_TimerSet
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PT_TimerExpired
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PT_SemPend
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sysmain.o(.data)
</UL>
<P><STRONG><a name="[8]"></a>Thread_Power_Freq</STRONG> (Thumb, 106 bytes, Stack size 8 bytes, sysmain.o(i.Thread_Power_Freq))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = Thread_Power_Freq &rArr; Task_Power_Function_Freq &rArr; calcPowerData_CalcFFTHarm1 &rArr; asin &rArr; sqrt &rArr; _dsqrt &rArr; __fpl_dnaninf
</UL>
<BR>[Calls]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_Power_Function_Freq
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pt_lc_set
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pt_lc_get
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PT_TimerSet
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PT_TimerExpired
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PT_SemPend
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sysmain.o(.data)
</UL>
<P><STRONG><a name="[5]"></a>Thread_Power_Judge</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, sysmain.o(i.Thread_Power_Judge))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = Thread_Power_Judge &rArr; Task_Power_Function_JudgeErr &rArr; Task_Power_init &rArr; Sample_Calc_MemValue &rArr; Sample_Init_DefaultCalibValue &rArr; MemData_WriteCalib &rArr; MemData_Write_To_Flash &rArr; FLASH_ProgramWord &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_Power_Function_JudgeErr
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pt_lc_set
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pt_lc_get
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PT_TimerSet
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PT_TimerExpired
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sysmain.o(.data)
</UL>
<P><STRONG><a name="[6]"></a>Thread_Power_RMS</STRONG> (Thumb, 102 bytes, Stack size 8 bytes, sysmain.o(i.Thread_Power_RMS))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = Thread_Power_RMS &rArr; Task_Power_Function_RMS &rArr; Sample_Calc_RMS &rArr; cos &rArr; __ieee754_rem_pio2 &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_Power_Function_RMS
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pt_lc_set
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pt_lc_get
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PT_SemTest
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PT_SemPend
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sysmain.o(.data)
</UL>
<P><STRONG><a name="[e]"></a>Thread_Protect</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, sysmain.o(i.Thread_Protect))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = Thread_Protect &rArr; Task_Protect_Function &rArr; svc_Protect_JudgeFault &rArr; svc_Protect_JudgeOverProtectHappen &rArr; svc_Protect_ProtectRtn &rArr; PT_TimerDiff
</UL>
<BR>[Calls]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pt_lc_set
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pt_lc_get
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PT_TimerSet
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PT_TimerExpired
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_Protect_Function
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sysmain.o(.data)
</UL>
<P><STRONG><a name="[c]"></a>Thread_PtlJudgeStatus</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, sysmain.o(i.Thread_PtlJudgeStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = Thread_PtlJudgeStatus &rArr; Task_PtlJudgeStatus_Function &rArr; DevStatusToMain
</UL>
<BR>[Calls]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_PtlJudgeStatus_Function
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pt_lc_set
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pt_lc_get
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PT_TimerSet
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PT_TimerExpired
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sysmain.o(.data)
</UL>
<P><STRONG><a name="[b]"></a>Thread_PtlRx</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, sysmain.o(i.Thread_PtlRx))
<BR><BR>[Stack]<UL><LI>Max Depth = 256 + Unknown Stack Size
<LI>Call Chain = Thread_PtlRx &rArr; Task_PtlRx_Function &rArr; ptlAnalysisData &rArr; ptlNewDataAnalysis &rArr; ptlAnalysisSendSetCmd &rArr; MemData_WriteParam &rArr; MemData_Write_To_Flash &rArr; FLASH_ProgramWord &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_PtlRx_Function
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pt_lc_set
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pt_lc_get
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PT_TimerSet
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PT_TimerExpired
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sysmain.o(.data)
</UL>
<P><STRONG><a name="[a]"></a>Thread_PtlTx</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, sysmain.o(i.Thread_PtlTx))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = Thread_PtlTx &rArr; Task_PtlTx_Function &rArr; ptlSetJHFrame &rArr; vPtlSetFrameData &rArr; USART_DMAReConfig &rArr; DMA_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_PtlTx_Function
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pt_lc_set
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pt_lc_get
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PT_TimerExpired
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sysmain.o(.data)
</UL>
<P><STRONG><a name="[d]"></a>Thread_SVC</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, sysmain.o(i.Thread_SVC))
<BR><BR>[Stack]<UL><LI>Max Depth = 408<LI>Call Chain = Thread_SVC &rArr; Task_SVC_Function &rArr; svc_Ctrl_AutoRunProc &rArr; svc_Ctrl_JudgeAutoRun &rArr; svc_Ctrl_SelCap &rArr; svc_Ctrl_SelCap_Phase_Cmp &rArr; svc_Phase_Search &rArr; svc_Phase_CalcApparentCur &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pt_lc_set
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pt_lc_get
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PT_TimerSet
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PT_TimerExpired
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_SVC_Function
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sysmain.o(.data)
</UL>
<P><STRONG><a name="[40]"></a>USART1_IRQHandler</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, stm32f10x_it.o(i.USART1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = USART1_IRQHandler &rArr; SERIAL1_IRQHandler &rArr; USART_GetITStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SERIAL1_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[41]"></a>USART2_IRQHandler</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, stm32f10x_it.o(i.USART2_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = USART2_IRQHandler &rArr; SERIAL2_IRQHandler &rArr; USART_GetITStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SERIAL2_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[110]"></a>USART_ClearFlag</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_usart.o(i.USART_ClearFlag))
<BR><BR>[Called By]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_DMAReConfig
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SERIAL2_IRQHandler
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SERIAL1_IRQHandler
</UL>

<P><STRONG><a name="[16f]"></a>USART_ClockInit</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, stm32f10x_usart.o(i.USART_ClockInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USART_ClockInit
</UL>
<BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Configuration
</UL>

<P><STRONG><a name="[172]"></a>USART_Cmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_usart.o(i.USART_Cmd))
<BR><BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Configuration
</UL>

<P><STRONG><a name="[90]"></a>USART_Configuration</STRONG> (Thumb, 416 bytes, Stack size 32 bytes, bsp.o(i.USART_Configuration))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = USART_Configuration &rArr; USART_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Cmd
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ITConfig
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_DMACmd
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Cmd
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ClockInit
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Init
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_DeInit
</UL>
<BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_Init
</UL>

<P><STRONG><a name="[171]"></a>USART_DMACmd</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_usart.o(i.USART_DMACmd))
<BR><BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Configuration
</UL>

<P><STRONG><a name="[173]"></a>USART_DMAReConfig</STRONG> (Thumb, 142 bytes, Stack size 24 bytes, bsp.o(i.USART_DMAReConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = USART_DMAReConfig &rArr; DMA_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Cmd
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ClearFlag
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Init
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_DeInit
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ComToUSARTx
</UL>
<BR>[Called By]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPtlSetFrameData
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ptl81_SetIndicatorFrame
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ptl81_SetFrame
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ptl81SetParamFrame
</UL>

<P><STRONG><a name="[10f]"></a>USART_GetFlagStatus</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_usart.o(i.USART_GetFlagStatus))
<BR><BR>[Called By]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SERIAL2_IRQHandler
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SERIAL1_IRQHandler
</UL>

<P><STRONG><a name="[10c]"></a>USART_GetITStatus</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, stm32f10x_usart.o(i.USART_GetITStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USART_GetITStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SERIAL2_IRQHandler
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SERIAL1_IRQHandler
</UL>

<P><STRONG><a name="[170]"></a>USART_ITConfig</STRONG> (Thumb, 74 bytes, Stack size 20 bytes, stm32f10x_usart.o(i.USART_ITConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = USART_ITConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Configuration
</UL>

<P><STRONG><a name="[16e]"></a>USART_Init</STRONG> (Thumb, 210 bytes, Stack size 56 bytes, stm32f10x_usart.o(i.USART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = USART_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetClocksFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Configuration
</UL>

<P><STRONG><a name="[111]"></a>USART_ReceiveData</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f10x_usart.o(i.USART_ReceiveData))
<BR><BR>[Called By]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SERIAL2_IRQHandler
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SERIAL1_IRQHandler
</UL>

<P><STRONG><a name="[c0]"></a>UpdataDown_Manual_OFF</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, taskgui.o(i.UpdataDown_Manual_OFF))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = UpdataDown_Manual_OFF &rArr; Manual_SearchCap &rArr; Manual_SearchOnState
</UL>
<BR>[Calls]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Manual_SearchCap
</UL>
<BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Key_Down
</UL>

<P><STRONG><a name="[bf]"></a>UpdataSetValue</STRONG> (Thumb, 456 bytes, Stack size 16 bytes, taskgui.o(i.UpdataSetValue))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = UpdataSetValue
</UL>
<BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Key_Up
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Key_Down
</UL>

<P><STRONG><a name="[cd]"></a>UpdataUp_Manual_ON</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, taskgui.o(i.UpdataUp_Manual_ON))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = UpdataUp_Manual_ON &rArr; Manual_SearchCap &rArr; Manual_SearchOnState
</UL>
<BR>[Calls]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Manual_SearchCap
</UL>
<BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Key_Up
</UL>

<P><STRONG><a name="[bb]"></a>Update_screen</STRONG> (Thumb, 152 bytes, Stack size 8 bytes, drvlcd.o(i.Update_screen))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Update_screen &rArr; HT_WriteData &rArr; HT_SendBit
</UL>
<BR>[Calls]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nus_delay
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HT_WriteData
</UL>
<BR>[Called By]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HT_Init
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Key_Default
</UL>

<P><STRONG><a name="[16]"></a>UsageFault_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_it.o(i.UsageFault_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[17e]"></a>__ARM_fpclassify</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, fpclassify.o(i.__ARM_fpclassify))
<BR><BR>[Called By]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asin
</UL>

<P><STRONG><a name="[176]"></a>__ieee754_rem_pio2</STRONG> (Thumb, 828 bytes, Stack size 128 bytes, rred.o(i.__ieee754_rem_pio2))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = __ieee754_rem_pio2 &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cos
</UL>

<P><STRONG><a name="[17b]"></a>__kernel_cos</STRONG> (Thumb, 230 bytes, Stack size 48 bytes, cos_i.o(i.__kernel_cos))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = __kernel_cos &rArr; __kernel_poly &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
</UL>
<BR>[Called By]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cos
</UL>

<P><STRONG><a name="[17c]"></a>__kernel_poly</STRONG> (Thumb, 170 bytes, Stack size 24 bytes, poly.o(i.__kernel_poly))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = __kernel_poly &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_cos
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asin
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;acos
</UL>

<P><STRONG><a name="[17d]"></a>__kernel_sin</STRONG> (Thumb, 224 bytes, Stack size 64 bytes, sin_i.o(i.__kernel_sin))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = __kernel_sin &rArr; __kernel_poly &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassify
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_underflow
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cos
</UL>

<P><STRONG><a name="[180]"></a>__mathlib_dbl_infnan</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dunder.o(i.__mathlib_dbl_infnan))
<BR><BR>[Calls]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
</UL>
<BR>[Called By]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cos
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asin
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;acos
</UL>

<P><STRONG><a name="[181]"></a>__mathlib_dbl_invalid</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, dunder.o(i.__mathlib_dbl_invalid))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __mathlib_dbl_invalid &rArr; __aeabi_ddiv
</UL>
<BR>[Calls]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
</UL>
<BR>[Called By]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cos
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asin
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;acos
</UL>

<P><STRONG><a name="[17f]"></a>__mathlib_dbl_underflow</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, dunder.o(i.__mathlib_dbl_underflow))
<BR><BR>[Calls]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
</UL>
<BR>[Called By]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asin
</UL>

<P><STRONG><a name="[129]"></a>acos</STRONG> (Thumb, 574 bytes, Stack size 40 bytes, acos.o(i.acos))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = acos &rArr; sqrt &rArr; _dsqrt &rArr; __fpl_dnaninf
</UL>
<BR>[Calls]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_invalid
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_infnan
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqrt
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sample_Calib
</UL>

<P><STRONG><a name="[183]"></a>asin</STRONG> (Thumb, 572 bytes, Stack size 56 bytes, asin.o(i.asin))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = asin &rArr; sqrt &rArr; _dsqrt &rArr; __fpl_dnaninf
</UL>
<BR>[Calls]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassify
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_underflow
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_invalid
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_infnan
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqrt
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calcPowerData_CalcFFTHarm1
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calcPowerData_CalcFFTHarm
</UL>

<P><STRONG><a name="[14a]"></a>calcPowerData_CalcFFTHarm</STRONG> (Thumb, 464 bytes, Stack size 136 bytes, taskpower.o(i.calcPowerData_CalcFFTHarm))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = calcPowerData_CalcFFTHarm &rArr; asin &rArr; sqrt &rArr; _dsqrt &rArr; __fpl_dnaninf
</UL>
<BR>[Calls]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqrt_64fixed
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FFT
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asin
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2uiz
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
</UL>
<BR>[Called By]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_Power_Function_THD
</UL>

<P><STRONG><a name="[142]"></a>calcPowerData_CalcFFTHarm1</STRONG> (Thumb, 284 bytes, Stack size 72 bytes, taskpower.o(i.calcPowerData_CalcFFTHarm1))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = calcPowerData_CalcFFTHarm1 &rArr; asin &rArr; sqrt &rArr; _dsqrt &rArr; __fpl_dnaninf
</UL>
<BR>[Calls]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqrt_64fixed
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FFT
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asin
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfcmple
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
</UL>
<BR>[Called By]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_Power_Function_Freq
</UL>

<P><STRONG><a name="[118]"></a>calcPowerData_linearSampleDataModify</STRONG> (Thumb, 70 bytes, Stack size 48 bytes, taskpower.o(i.calcPowerData_linearSampleDataModify))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = calcPowerData_linearSampleDataModify &rArr; line_calc_x32_y32 &rArr; linear_x32_y32 &rArr; __aeabi_ldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;line_calc_x32_y32
</UL>
<BR>[Called By]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_Power_Function_Freq
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sample_Calc_DotArray
</UL>

<P><STRONG><a name="[124]"></a>cos</STRONG> (Thumb, 148 bytes, Stack size 32 bytes, cos.o(i.cos))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = cos &rArr; __ieee754_rem_pio2 &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_invalid
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_infnan
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_cos
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
</UL>
<BR>[Called By]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sample_Calc_RMS
</UL>

<P><STRONG><a name="[187]"></a>line_calc_x32_y32</STRONG> (Thumb, 80 bytes, Stack size 40 bytes, taskpower.o(i.line_calc_x32_y32))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = line_calc_x32_y32 &rArr; linear_x32_y32 &rArr; __aeabi_ldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;linear_x32_y32
</UL>
<BR>[Called By]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calcPowerData_linearSampleDataModify
</UL>

<P><STRONG><a name="[188]"></a>linear_x32_y32</STRONG> (Thumb, 198 bytes, Stack size 56 bytes, taskpower.o(i.linear_x32_y32))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = linear_x32_y32 &rArr; __aeabi_ldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;line_calc_x32_y32
</UL>

<P><STRONG><a name="[5b]"></a>main</STRONG> (Thumb, 122 bytes, Stack size 0 bytes, sysmain.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 368 + Unknown Stack Size
<LI>Call Chain = main &rArr; App_Init &rArr; MemData_Init &rArr; MemData_InitSettingParam &rArr; MemData_ReadParam &rArr; MemData_WriteParam &rArr; MemData_Write_To_Flash &rArr; FLASH_ProgramWord &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Thread_SendDelayTimer
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pt_execute
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PT_TimerDelay
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_Init
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Configuration
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[e1]"></a>nus_delay</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, pt_timer.o(i.nus_delay))
<BR><BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Update_screen
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HT_SendCmd
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HT_SendBit
</UL>

<P><STRONG><a name="[18a]"></a>pt_enable_get</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, pt.o(i.pt_enable_get))
<BR><BR>[Called By]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pt_execute
</UL>

<P><STRONG><a name="[189]"></a>pt_execute</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, pt.o(i.pt_execute))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = pt_execute
</UL>
<BR>[Calls]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pt_enable_get
</UL>
<BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[169]"></a>pt_lc_get</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, pt.o(i.pt_lc_get))
<BR><BR>[Called By]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Thread_SVC
<LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Thread_PtlTx
<LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Thread_PtlRx
<LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Thread_PtlJudgeStatus
<LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Thread_Protect
<LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Thread_Power_RMS
<LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Thread_Power_Judge
<LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Thread_Power_Freq
<LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Thread_Power_DFT
<LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Thread_Power_CALIB
<LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Thread_MS
<LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Thread_GUI
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Thread_DevStatus
</UL>

<P><STRONG><a name="[16a]"></a>pt_lc_set</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, pt.o(i.pt_lc_set))
<BR><BR>[Called By]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Thread_SVC
<LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Thread_PtlTx
<LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Thread_PtlRx
<LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Thread_PtlJudgeStatus
<LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Thread_Protect
<LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Thread_Power_RMS
<LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Thread_Power_Judge
<LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Thread_Power_Freq
<LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Thread_Power_DFT
<LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Thread_Power_CALIB
<LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Thread_MS
<LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Thread_GUI
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Thread_DevStatus
</UL>

<P><STRONG><a name="[18b]"></a>ptl81SetParamFrame</STRONG> (Thumb, 276 bytes, Stack size 8 bytes, taskcom.o(i.ptl81SetParamFrame))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = ptl81SetParamFrame &rArr; USART_DMAReConfig &rArr; DMA_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_DMAReConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ptl81_Task_MainSendData
</UL>

<P><STRONG><a name="[18c]"></a>ptl81_Analysis_Main</STRONG> (Thumb, 476 bytes, Stack size 32 bytes, taskcom.o(i.ptl81_Analysis_Main))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = ptl81_Analysis_Main &rArr; ptl81_GetSubState &rArr; ptlStatusOldToNew &rArr; DevStatus_ChgFaultRegToNew
</UL>
<BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ptlSetStation2Type
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ptl81_GetSubState
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ptlAnalysisData_ptl81
</UL>

<P><STRONG><a name="[14f]"></a>ptl81_Enable</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, taskcom.o(i.ptl81_Enable))
<BR><BR>[Called By]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_Protect_Function
</UL>

<P><STRONG><a name="[197]"></a>ptl81_GetCrc</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, taskcom.o(i.ptl81_GetCrc))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ptl81_GetCrc
</UL>
<BR>[Called By]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ptlAnalysisData_ptl81
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ptl81_SetIndicatorFrame
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ptl81_SetFrame
</UL>

<P><STRONG><a name="[18d]"></a>ptl81_GetSubState</STRONG> (Thumb, 654 bytes, Stack size 24 bytes, taskcom.o(i.ptl81_GetSubState))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = ptl81_GetSubState &rArr; ptlStatusOldToNew &rArr; DevStatus_ChgFaultRegToNew
</UL>
<BR>[Calls]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ptlStatusOldToNew
</UL>
<BR>[Called By]<UL><LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ptl81_Analysis_Main
</UL>

<P><STRONG><a name="[199]"></a>ptl81_MainSearchRepeatAddr</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, taskcom.o(i.ptl81_MainSearchRepeatAddr))
<BR><BR>[Called By]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ptl81_Task_MainSendData
</UL>

<P><STRONG><a name="[18f]"></a>ptl81_MainSetProcIndicatorOff</STRONG> (Thumb, 208 bytes, Stack size 16 bytes, taskcom.o(i.ptl81_MainSetProcIndicatorOff))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = ptl81_MainSetProcIndicatorOff &rArr; ptlSetSwitchStatusCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ptlSetSwitchStatusCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ptl81_Task_MainSendData
</UL>

<P><STRONG><a name="[190]"></a>ptl81_PrtActAll</STRONG> (Thumb, 360 bytes, Stack size 8 bytes, taskcom.o(i.ptl81_PrtActAll))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = ptl81_PrtActAll &rArr; ptlSetSwitchStatusCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svc_Protect_GetPhaseProtectStatus
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ptlSetSwitchStatusCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ptl81_Task_MainSendData
</UL>

<P><STRONG><a name="[192]"></a>ptl81_SendBroadcast</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, taskcom.o(i.ptl81_SendBroadcast))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = ptl81_SendBroadcast &rArr; ptl81_SetFrame &rArr; USART_DMAReConfig &rArr; DMA_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Serial_ClrRxBuf
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ptl81_SetFrame
</UL>
<BR>[Called By]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ptl81_Task_MainSendData
</UL>

<P><STRONG><a name="[195]"></a>ptl81_SendData_ActCmd</STRONG> (Thumb, 88 bytes, Stack size 8 bytes, taskcom.o(i.ptl81_SendData_ActCmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = ptl81_SendData_ActCmd &rArr; ptl81_SetFrame &rArr; USART_DMAReConfig &rArr; DMA_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ptl81_SetFrame
</UL>
<BR>[Called By]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ptl81_Task_MainSendData
</UL>

<P><STRONG><a name="[196]"></a>ptl81_SendEnd</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, taskcom.o(i.ptl81_SendEnd))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = ptl81_SendEnd &rArr; ptl81_SetFrame &rArr; USART_DMAReConfig &rArr; DMA_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ptl81_SetFrame
</UL>
<BR>[Called By]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ptl81_Task_MainSendData
</UL>

<P><STRONG><a name="[194]"></a>ptl81_SetFrame</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, taskcom.o(i.ptl81_SetFrame))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = ptl81_SetFrame &rArr; USART_DMAReConfig &rArr; DMA_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_DMAReConfig
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ptl81_GetCrc
</UL>
<BR>[Called By]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ptl81_Task_MainSendData
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ptl81_SendEnd
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ptl81_SendData_ActCmd
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ptl81_SendBroadcast
</UL>

<P><STRONG><a name="[160]"></a>ptl81_SetIndicatorFrame</STRONG> (Thumb, 308 bytes, Stack size 8 bytes, taskcom.o(i.ptl81_SetIndicatorFrame))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = ptl81_SetIndicatorFrame &rArr; USART_DMAReConfig &rArr; DMA_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_DMAReConfig
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ptl81_GetCrc
</UL>
<BR>[Called By]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ptl81_Task_MainSendData
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_PtlTx_Function
</UL>

<P><STRONG><a name="[13c]"></a>ptl81_Task_MainSendData</STRONG> (Thumb, 638 bytes, Stack size 8 bytes, taskcom.o(i.ptl81_Task_MainSendData))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = ptl81_Task_MainSendData &rArr; ptl81_SendEnd &rArr; ptl81_SetFrame &rArr; USART_DMAReConfig &rArr; DMA_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svc_Protect_GetPhaseProtectStatus
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetComFlag
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ptlSetThreadStatus
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ptlSetStation2Type
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ptlSetMainStationData
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ptlMainClrSpareAddr
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ptlClrDevAddrEnable
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ptl81_SetIndicatorFrame
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ptl81_SetFrame
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ptl81_SendEnd
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ptl81_SendData_ActCmd
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ptl81_SendBroadcast
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ptl81_PrtActAll
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ptl81_MainSetProcIndicatorOff
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ptl81_MainSearchRepeatAddr
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ptl81SetParamFrame
</UL>
<BR>[Called By]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_MS_Function
</UL>

<P><STRONG><a name="[155]"></a>ptlAnalysisData</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, taskcom.o(i.ptlAnalysisData))
<BR><BR>[Stack]<UL><LI>Max Depth = 240 + Unknown Stack Size
<LI>Call Chain = ptlAnalysisData &rArr; ptlNewDataAnalysis &rArr; ptlAnalysisSendSetCmd &rArr; MemData_WriteParam &rArr; MemData_Write_To_Flash &rArr; FLASH_ProgramWord &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ptlOldDataAnalysis
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ptlNewDataAnalysis
</UL>
<BR>[Called By]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_PtlRx_Function
</UL>

<P><STRONG><a name="[19c]"></a>ptlAnalysisData_IntoStatus</STRONG> (Thumb, 102 bytes, Stack size 8 bytes, taskcom.o(i.ptlAnalysisData_IntoStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ptlAnalysisData_IntoStatus &rArr; ptlSetDevStatusPause &rArr; ptlSetAllDeviceZero
</UL>
<BR>[Calls]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ptlSetDevStatusPause
</UL>
<BR>[Called By]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ptlAnalysisData_ptl81
</UL>

<P><STRONG><a name="[157]"></a>ptlAnalysisData_ptl81</STRONG> (Thumb, 168 bytes, Stack size 8 bytes, taskcom.o(i.ptlAnalysisData_ptl81))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = ptlAnalysisData_ptl81 &rArr; ptl81_Analysis_Main &rArr; ptl81_GetSubState &rArr; ptlStatusOldToNew &rArr; DevStatus_ChgFaultRegToNew
</UL>
<BR>[Calls]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetComFlag
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ptlAnalysisData_IntoStatus
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ptl81_GetCrc
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ptl81_Analysis_Main
</UL>
<BR>[Called By]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_PtlRx_Function
</UL>

<P><STRONG><a name="[19e]"></a>ptlAnalysisSendQueryCmd</STRONG> (Thumb, 232 bytes, Stack size 32 bytes, taskcom.o(i.ptlAnalysisSendQueryCmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = ptlAnalysisSendQueryCmd &rArr; Sample_ReadAllCalibValue &rArr; Sample_GetCalibValue
</UL>
<BR>[Calls]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sample_ReadAllCalibValue
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DevStatus_SetSimStatus
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ptlNewDataAnalysis
</UL>

<P><STRONG><a name="[1a0]"></a>ptlAnalysisSendQueryCmd_GetOldStatus</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, taskcom.o(i.ptlAnalysisSendQueryCmd_GetOldStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ptlAnalysisSendQueryCmd_GetOldStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ptlStatusNewToOld
</UL>
<BR>[Called By]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ptlGetOldSendDataAnalysis
</UL>

<P><STRONG><a name="[1a2]"></a>ptlAnalysisSendSetCmd</STRONG> (Thumb, 202 bytes, Stack size 24 bytes, taskcom.o(i.ptlAnalysisSendSetCmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 224 + Unknown Stack Size
<LI>Call Chain = ptlAnalysisSendSetCmd &rArr; MemData_WriteParam &rArr; MemData_Write_To_Flash &rArr; FLASH_ProgramWord &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemData_WriteParam
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemData_CmpParamType
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ptlSetStation2Type
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ptlCalibDataAnalysis
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmpDataByte
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ptlNewDataAnalysis
</UL>

<P><STRONG><a name="[1a4]"></a>ptlCalibDataAnalysis</STRONG> (Thumb, 112 bytes, Stack size 16 bytes, taskcom.o(i.ptlCalibDataAnalysis))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = ptlCalibDataAnalysis &rArr; Sample_SetCalibCmd &rArr; HT_TouchStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sample_SetCalibCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ptlAnalysisSendSetCmd
</UL>

<P><STRONG><a name="[139]"></a>ptlClrDevAddrEnable</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, taskcom.o(i.ptlClrDevAddrEnable))
<BR><BR>[Called By]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ptl81_Task_MainSendData
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_Com_init
</UL>

<P><STRONG><a name="[156]"></a>ptlClrPtlData</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, taskcom.o(i.ptlClrPtlData))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ptlClrPtlData &rArr; ptlClrRecvPack
</UL>
<BR>[Calls]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ptlClrRecvPack
</UL>
<BR>[Called By]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_PtlRx_Function
</UL>

<P><STRONG><a name="[1a5]"></a>ptlClrRecvPack</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, taskcom.o(i.ptlClrRecvPack))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ptlClrRecvPack
</UL>
<BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ptlClrPtlData
</UL>

<P><STRONG><a name="[154]"></a>ptlGetCRC</STRONG> (Thumb, 34 bytes, Stack size 12 bytes, taskcom.o(i.ptlGetCRC))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = ptlGetCRC
</UL>
<BR>[Called By]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPtlSetFrameData
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_PtlRx_Function
</UL>

<P><STRONG><a name="[1a6]"></a>ptlGetOldAnswerDataAnalysis</STRONG> (Thumb, 400 bytes, Stack size 80 bytes, taskcom.o(i.ptlGetOldAnswerDataAnalysis))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = ptlGetOldAnswerDataAnalysis &rArr; ptlStatusOldToNew &rArr; DevStatus_ChgFaultRegToNew
</UL>
<BR>[Calls]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ptlStatusOldToNew
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ptlOldDataAnalysis
</UL>

<P><STRONG><a name="[1a7]"></a>ptlGetOldSendDataAnalysis</STRONG> (Thumb, 160 bytes, Stack size 16 bytes, taskcom.o(i.ptlGetOldSendDataAnalysis))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = ptlGetOldSendDataAnalysis &rArr; ptlSetSwitchStatusCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ptlSetSwitchStatusCmd
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ptlAnalysisSendQueryCmd_GetOldStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ptlOldDataAnalysis
</UL>

<P><STRONG><a name="[1a8]"></a>ptlJudgeAddErrAnalysis</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, taskcom.o(i.ptlJudgeAddErrAnalysis))
<BR><BR>[Called By]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ptlOldDataAnalysis
</UL>

<P><STRONG><a name="[15c]"></a>ptlMainClrSpareAddr</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, taskcom.o(i.ptlMainClrSpareAddr))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ptlMainClrSpareAddr
</UL>
<BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ptl81_Task_MainSendData
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_PtlTx_Function
</UL>

<P><STRONG><a name="[159]"></a>ptlMainSendActFrame</STRONG> (Thumb, 162 bytes, Stack size 16 bytes, taskcom.o(i.ptlMainSendActFrame))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = ptlMainSendActFrame &rArr; ptlMainSetFrame
</UL>
<BR>[Calls]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ptlMainSetFrame
</UL>
<BR>[Called By]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_PtlTx_Function
</UL>

<P><STRONG><a name="[15b]"></a>ptlMainSetFrame</STRONG> (Thumb, 46 bytes, Stack size 20 bytes, taskcom.o(i.ptlMainSetFrame))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = ptlMainSetFrame
</UL>
<BR>[Called By]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ptlSetJHFrame
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ptlSetChangeFrame
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ptlMainSendActFrame
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_PtlTx_Function
</UL>

<P><STRONG><a name="[19b]"></a>ptlNewDataAnalysis</STRONG> (Thumb, 114 bytes, Stack size 8 bytes, taskcom.o(i.ptlNewDataAnalysis))
<BR><BR>[Stack]<UL><LI>Max Depth = 232 + Unknown Stack Size
<LI>Call Chain = ptlNewDataAnalysis &rArr; ptlAnalysisSendSetCmd &rArr; MemData_WriteParam &rArr; MemData_Write_To_Flash &rArr; FLASH_ProgramWord &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetComFlag
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ptlAnalysisSendSetCmd
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ptlAnalysisSendQueryCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ptlAnalysisData
</UL>

<P><STRONG><a name="[19a]"></a>ptlOldDataAnalysis</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, taskcom.o(i.ptlOldDataAnalysis))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = ptlOldDataAnalysis &rArr; ptlGetOldAnswerDataAnalysis &rArr; ptlStatusOldToNew &rArr; DevStatus_ChgFaultRegToNew
</UL>
<BR>[Calls]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetComFlag
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ptlJudgeAddErrAnalysis
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ptlGetOldSendDataAnalysis
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ptlGetOldAnswerDataAnalysis
</UL>
<BR>[Called By]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ptlAnalysisData
</UL>

<P><STRONG><a name="[1a9]"></a>ptlSetAllDeviceZero</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, taskcom.o(i.ptlSetAllDeviceZero))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ptlSetAllDeviceZero
</UL>
<BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ptlSetDevStatusPause
</UL>

<P><STRONG><a name="[15e]"></a>ptlSetChangeFrame</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, taskcom.o(i.ptlSetChangeFrame))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = ptlSetChangeFrame &rArr; vPtlSetFrameData &rArr; USART_DMAReConfig &rArr; DMA_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPtlSetFrameData
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ptlMainSetFrame
</UL>
<BR>[Called By]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_PtlTx_Function
</UL>

<P><STRONG><a name="[19d]"></a>ptlSetDevStatusPause</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, taskcom.o(i.ptlSetDevStatusPause))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ptlSetDevStatusPause &rArr; ptlSetAllDeviceZero
</UL>
<BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ptlSetStation2Type
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ptlSetAllDeviceZero
</UL>
<BR>[Called By]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ptlAnalysisData_IntoStatus
</UL>

<P><STRONG><a name="[15d]"></a>ptlSetJHFrame</STRONG> (Thumb, 124 bytes, Stack size 16 bytes, taskcom.o(i.ptlSetJHFrame))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = ptlSetJHFrame &rArr; vPtlSetFrameData &rArr; USART_DMAReConfig &rArr; DMA_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPtlSetFrameData
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ptlMainSetFrame
</UL>
<BR>[Called By]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_PtlTx_Function
</UL>

<P><STRONG><a name="[15f]"></a>ptlSetMainStationData</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, taskcom.o(i.ptlSetMainStationData))
<BR><BR>[Called By]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ptl81_Task_MainSendData
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_PtlTx_Function
</UL>

<P><STRONG><a name="[98]"></a>ptlSetStation2Type</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, taskcom.o(i.ptlSetStation2Type))
<BR><BR>[Called By]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ptlSetDevStatusPause
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ptlAnalysisSendSetCmd
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ptl81_Task_MainSendData
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ptl81_Analysis_Main
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_PtlJudgeStatus_Function
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DevStatusToMain
</UL>

<P><STRONG><a name="[ec]"></a>ptlSetSwitchStatusCmd</STRONG> (Thumb, 396 bytes, Stack size 20 bytes, taskcom.o(i.ptlSetSwitchStatusCmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = ptlSetSwitchStatusCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ManualCtrl
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ptlGetOldSendDataAnalysis
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ptl81_PrtActAll
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ptl81_MainSetProcIndicatorOff
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svc_Protect_SelFHKG
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svc_Ctrl_AutoRunProc
</UL>

<P><STRONG><a name="[138]"></a>ptlSetThreadStatus</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, taskcom.o(i.ptlSetThreadStatus))
<BR><BR>[Called By]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ptl81_Task_MainSendData
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_Com_init
</UL>

<P><STRONG><a name="[1a1]"></a>ptlStatusNewToOld</STRONG> (Thumb, 246 bytes, Stack size 0 bytes, taskcom.o(i.ptlStatusNewToOld))
<BR><BR>[Called By]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ptlAnalysisSendQueryCmd_GetOldStatus
</UL>

<P><STRONG><a name="[18e]"></a>ptlStatusOldToNew</STRONG> (Thumb, 522 bytes, Stack size 16 bytes, taskcom.o(i.ptlStatusOldToNew))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = ptlStatusOldToNew &rArr; DevStatus_ChgFaultRegToNew
</UL>
<BR>[Calls]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DevStatus_ChgFaultRegToOld
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DevStatus_ChgFaultRegToNew
</UL>
<BR>[Called By]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ptlGetOldAnswerDataAnalysis
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ptl81_GetSubState
</UL>

<P><STRONG><a name="[182]"></a>sqrt</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, sqrt.o(i.sqrt))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = sqrt &rArr; _dsqrt &rArr; __fpl_dnaninf
</UL>
<BR>[Calls]<UL><LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsqrt
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
</UL>
<BR>[Called By]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svc_Ctrl_Calc
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asin
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;acos
</UL>

<P><STRONG><a name="[120]"></a>sqrt_64fixed</STRONG> (Thumb, 86 bytes, Stack size 28 bytes, taskpower.o(i.sqrt_64fixed))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = sqrt_64fixed
</UL>
<BR>[Called By]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calcPowerData_CalcFFTHarm1
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calcPowerData_CalcFFTHarm
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sample_Calib
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sample_Calc_RMS
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svc_Phase_Search
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svc_Phase_CalcApparentCur
</UL>

<P><STRONG><a name="[163]"></a>svc_Ctrl_Calc</STRONG> (Thumb, 564 bytes, Stack size 56 bytes, tasksvc.o(i.svc_Ctrl_Calc))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = svc_Ctrl_Calc &rArr; sqrt &rArr; _dsqrt &rArr; __fpl_dnaninf
</UL>
<BR>[Calls]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqrt
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2iz
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_frsub
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
</UL>
<BR>[Called By]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_SVC_Function
</UL>

<P><STRONG><a name="[1b7]"></a>svc_Ctrl_CalcUnbValue</STRONG> (Thumb, 222 bytes, Stack size 40 bytes, tasksvc.o(i.svc_Ctrl_CalcUnbValue))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = svc_Ctrl_CalcUnbValue
</UL>
<BR>[Called By]<UL><LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svc_Phase_Search
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svc_Ctrl_PhaseCalc
</UL>

<P><STRONG><a name="[1ad]"></a>svc_Ctrl_JudgeAutoRun</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, tasksvc.o(i.svc_Ctrl_JudgeAutoRun))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = svc_Ctrl_JudgeAutoRun &rArr; svc_Ctrl_SelCap &rArr; svc_Ctrl_SelCap_Phase_Cmp &rArr; svc_Phase_Search &rArr; svc_Phase_CalcApparentCur &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PT_TimerGet
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svc_Ctrl_SelCap
</UL>
<BR>[Called By]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svc_Ctrl_AutoRunProc
</UL>

<P><STRONG><a name="[1c0]"></a>svc_Ctrl_JudgeCtrlSysState</STRONG> (Thumb, 450 bytes, Stack size 0 bytes, tasksvc.o(i.svc_Ctrl_JudgeCtrlSysState))
<BR><BR>[Called By]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svc_Ctrl_SetSysStatus
</UL>

<P><STRONG><a name="[1bf]"></a>svc_Ctrl_JudgeKGOnEnable</STRONG> (Thumb, 96 bytes, Stack size 0 bytes, tasksvc.o(i.svc_Ctrl_JudgeKGOnEnable))
<BR><BR>[Called By]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svc_Phase_SelGroupFun
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svc_Ctrl_SelGroupFun
</UL>

<P><STRONG><a name="[1b1]"></a>svc_Ctrl_OffSelDeltaCap</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, tasksvc.o(i.svc_Ctrl_OffSelDeltaCap))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = svc_Ctrl_OffSelDeltaCap &rArr; svc_Ctrl_SelDeltaCap &rArr; svc_Ctrl_SelGroupFun
</UL>
<BR>[Calls]<UL><LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svc_Ctrl_SelDeltaCap
</UL>
<BR>[Called By]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svc_Ctrl_SelCap_Norm
</UL>

<P><STRONG><a name="[1b3]"></a>svc_Ctrl_OffSelStarCap</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, tasksvc.o(i.svc_Ctrl_OffSelStarCap))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = svc_Ctrl_OffSelStarCap &rArr; svc_Ctrl_SelGroupFun
</UL>
<BR>[Calls]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svc_Ctrl_SelGroupFun
</UL>
<BR>[Called By]<UL><LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svc_Ctrl_SelCap_Phase_One
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svc_Ctrl_SelCap_Norm_One
</UL>

<P><STRONG><a name="[1b5]"></a>svc_Ctrl_OnSelDeltaCap</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, tasksvc.o(i.svc_Ctrl_OnSelDeltaCap))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = svc_Ctrl_OnSelDeltaCap &rArr; svc_Ctrl_SelDeltaCap &rArr; svc_Ctrl_SelGroupFun
</UL>
<BR>[Calls]<UL><LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svc_Ctrl_SelDeltaCap
</UL>
<BR>[Called By]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svc_Ctrl_SelCap_Norm
</UL>

<P><STRONG><a name="[1b6]"></a>svc_Ctrl_OnSelStarCap</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, tasksvc.o(i.svc_Ctrl_OnSelStarCap))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = svc_Ctrl_OnSelStarCap &rArr; svc_Ctrl_SelGroupFun
</UL>
<BR>[Calls]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svc_Ctrl_SelGroupFun
</UL>
<BR>[Called By]<UL><LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svc_Ctrl_SelCap_Phase_One
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svc_Ctrl_SelCap_Norm_One
</UL>

<P><STRONG><a name="[165]"></a>svc_Ctrl_PhaseCalc</STRONG> (Thumb, 170 bytes, Stack size 40 bytes, tasksvc.o(i.svc_Ctrl_PhaseCalc))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = svc_Ctrl_PhaseCalc &rArr; svc_Ctrl_CalcUnbValue
</UL>
<BR>[Calls]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svc_Ctrl_CalcUnbValue
</UL>
<BR>[Called By]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_SVC_Function
</UL>

<P><STRONG><a name="[1ba]"></a>svc_Ctrl_SelCap_Norm</STRONG> (Thumb, 166 bytes, Stack size 8 bytes, tasksvc.o(i.svc_Ctrl_SelCap_Norm))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = svc_Ctrl_SelCap_Norm &rArr; svc_Ctrl_SelCap_Norm_One &rArr; svc_Ctrl_OnSelStarCap &rArr; svc_Ctrl_SelGroupFun
</UL>
<BR>[Calls]<UL><LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svc_Ctrl_SelCap_Norm_One
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svc_Ctrl_OnSelDeltaCap
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svc_Ctrl_OffSelDeltaCap
</UL>
<BR>[Called By]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svc_Ctrl_SelCap
</UL>

<P><STRONG><a name="[1bb]"></a>svc_Ctrl_SelCap_Norm_One</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, tasksvc.o(i.svc_Ctrl_SelCap_Norm_One))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = svc_Ctrl_SelCap_Norm_One &rArr; svc_Ctrl_OnSelStarCap &rArr; svc_Ctrl_SelGroupFun
</UL>
<BR>[Calls]<UL><LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svc_Ctrl_OnSelStarCap
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svc_Ctrl_OffSelStarCap
</UL>
<BR>[Called By]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svc_Ctrl_SelCap_Norm
</UL>

<P><STRONG><a name="[1b9]"></a>svc_Ctrl_SelCap_Phase</STRONG> (Thumb, 100 bytes, Stack size 8 bytes, tasksvc.o(i.svc_Ctrl_SelCap_Phase))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = svc_Ctrl_SelCap_Phase &rArr; svc_Ctrl_SelCap_Phase_One &rArr; svc_Ctrl_OnSelStarCap &rArr; svc_Ctrl_SelGroupFun
</UL>
<BR>[Calls]<UL><LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svc_Ctrl_SelCap_Phase_One
</UL>
<BR>[Called By]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svc_Ctrl_SelCap
</UL>

<P><STRONG><a name="[1b8]"></a>svc_Ctrl_SelCap_Phase_Cmp</STRONG> (Thumb, 540 bytes, Stack size 40 bytes, tasksvc.o(i.svc_Ctrl_SelCap_Phase_Cmp))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = svc_Ctrl_SelCap_Phase_Cmp &rArr; svc_Phase_Search &rArr; svc_Phase_CalcApparentCur &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svc_Phase_SelGroupFun
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svc_Phase_Search
</UL>
<BR>[Called By]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svc_Ctrl_SelCap
</UL>

<P><STRONG><a name="[1bc]"></a>svc_Ctrl_SelCap_Phase_One</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, tasksvc.o(i.svc_Ctrl_SelCap_Phase_One))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = svc_Ctrl_SelCap_Phase_One &rArr; svc_Ctrl_OnSelStarCap &rArr; svc_Ctrl_SelGroupFun
</UL>
<BR>[Calls]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svc_Protect_GetPhaseProtectStatus
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svc_Ctrl_OnSelStarCap
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svc_Ctrl_OffSelStarCap
</UL>
<BR>[Called By]<UL><LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svc_Ctrl_SelCap_Phase
</UL>

<P><STRONG><a name="[1b2]"></a>svc_Ctrl_SelDeltaCap</STRONG> (Thumb, 136 bytes, Stack size 24 bytes, tasksvc.o(i.svc_Ctrl_SelDeltaCap))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = svc_Ctrl_SelDeltaCap &rArr; svc_Ctrl_SelGroupFun
</UL>
<BR>[Calls]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svc_Ctrl_SelGroupFun
</UL>
<BR>[Called By]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svc_Ctrl_OnSelDeltaCap
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svc_Ctrl_OffSelDeltaCap
</UL>

<P><STRONG><a name="[164]"></a>svc_Ctrl_SetSysStatus</STRONG> (Thumb, 140 bytes, Stack size 4 bytes, tasksvc.o(i.svc_Ctrl_SetSysStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = svc_Ctrl_SetSysStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svc_Ctrl_JudgeCtrlSysState
</UL>
<BR>[Called By]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_SVC_Function
</UL>

<P><STRONG><a name="[1c1]"></a>svc_Phase_CalcApparentCur</STRONG> (Thumb, 326 bytes, Stack size 128 bytes, tasksvc.o(i.svc_Phase_CalcApparentCur))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = svc_Phase_CalcApparentCur &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqrt_64fixed
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svc_Phase_Search
</UL>

<P><STRONG><a name="[1be]"></a>svc_Phase_Search</STRONG> (Thumb, 1198 bytes, Stack size 152 bytes, tasksvc.o(i.svc_Phase_Search))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = svc_Phase_Search &rArr; svc_Phase_CalcApparentCur &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqrt_64fixed
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svc_Phase_SelGroupFun
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svc_Phase_CalcApparentCur
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svc_Ctrl_CalcUnbValue
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svc_Ctrl_SelCap_Phase_Cmp
</UL>

<P><STRONG><a name="[1bd]"></a>svc_Phase_SelGroupFun</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, tasksvc.o(i.svc_Phase_SelGroupFun))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = svc_Phase_SelGroupFun
</UL>
<BR>[Calls]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svc_Ctrl_JudgeKGOnEnable
</UL>
<BR>[Called By]<UL><LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svc_Phase_Search
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svc_Ctrl_SelCap_Phase_Cmp
</UL>

<P><STRONG><a name="[1c6]"></a>svc_Protect_CalcCapSwitchOnStatus</STRONG> (Thumb, 120 bytes, Stack size 20 bytes, tasksvc.o(i.svc_Protect_CalcCapSwitchOnStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = svc_Protect_CalcCapSwitchOnStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svc_Protect_SelFHKG
</UL>

<P><STRONG><a name="[168]"></a>svc_Protect_CancelJudge</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, tasksvc.o(i.svc_Protect_CancelJudge))
<BR><BR>[Called By]<UL><LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svc_Protect_ProtectRtn
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svc_Protect_JudgeOverProtectHappen
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svc_Protect_JudgeLowProtectHappen
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_SVC_init
</UL>

<P><STRONG><a name="[191]"></a>svc_Protect_GetPhaseProtectStatus</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, tasksvc.o(i.svc_Protect_GetPhaseProtectStatus))
<BR><BR>[Called By]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ptl81_Task_MainSendData
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ptl81_PrtActAll
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svc_Ctrl_SelCap_Phase_One
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svc_Ctrl_SelCap
</UL>

<P><STRONG><a name="[166]"></a>svc_Protect_GetProtectStatus</STRONG> (Thumb, 76 bytes, Stack size 0 bytes, tasksvc.o(i.svc_Protect_GetProtectStatus))
<BR><BR>[Called By]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_SVC_Function
</UL>

<P><STRONG><a name="[14e]"></a>svc_Protect_JudgeFault</STRONG> (Thumb, 902 bytes, Stack size 32 bytes, tasksvc.o(i.svc_Protect_JudgeFault))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = svc_Protect_JudgeFault &rArr; svc_Protect_JudgeOverProtectHappen &rArr; svc_Protect_ProtectRtn &rArr; PT_TimerDiff
</UL>
<BR>[Calls]<UL><LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svc_Protect_JudgeOverProtectHappen
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svc_Protect_JudgeLowProtectHappen
</UL>
<BR>[Called By]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_Protect_Function
</UL>

<P><STRONG><a name="[1c3]"></a>svc_Protect_JudgeLowProtectHappen</STRONG> (Thumb, 204 bytes, Stack size 32 bytes, tasksvc.o(i.svc_Protect_JudgeLowProtectHappen))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = svc_Protect_JudgeLowProtectHappen &rArr; svc_Protect_ProtectRtn &rArr; PT_TimerDiff
</UL>
<BR>[Calls]<UL><LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svc_Protect_ProtectRtn
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svc_Protect_ProtectHappen
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svc_Protect_CancelJudge
</UL>
<BR>[Called By]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svc_Protect_JudgeFault
</UL>

<P><STRONG><a name="[1c2]"></a>svc_Protect_JudgeOverProtectHappen</STRONG> (Thumb, 204 bytes, Stack size 32 bytes, tasksvc.o(i.svc_Protect_JudgeOverProtectHappen))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = svc_Protect_JudgeOverProtectHappen &rArr; svc_Protect_ProtectRtn &rArr; PT_TimerDiff
</UL>
<BR>[Calls]<UL><LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svc_Protect_ProtectRtn
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svc_Protect_ProtectHappen
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svc_Protect_CancelJudge
</UL>
<BR>[Called By]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svc_Protect_JudgeFault
</UL>

<P><STRONG><a name="[1c4]"></a>svc_Protect_ProtectHappen</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, tasksvc.o(i.svc_Protect_ProtectHappen))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = svc_Protect_ProtectHappen &rArr; PT_TimerDiff
</UL>
<BR>[Calls]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PT_TimerGet
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PT_TimerDiff
</UL>
<BR>[Called By]<UL><LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svc_Protect_JudgeOverProtectHappen
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svc_Protect_JudgeLowProtectHappen
</UL>

<P><STRONG><a name="[1c5]"></a>svc_Protect_ProtectRtn</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, tasksvc.o(i.svc_Protect_ProtectRtn))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = svc_Protect_ProtectRtn &rArr; PT_TimerDiff
</UL>
<BR>[Calls]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PT_TimerGet
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PT_TimerDiff
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svc_Protect_CancelJudge
</UL>
<BR>[Called By]<UL><LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svc_Protect_JudgeOverProtectHappen
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svc_Protect_JudgeLowProtectHappen
</UL>

<P><STRONG><a name="[150]"></a>svc_Protect_SelFHKG</STRONG> (Thumb, 556 bytes, Stack size 24 bytes, tasksvc.o(i.svc_Protect_SelFHKG))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = svc_Protect_SelFHKG &rArr; ptlSetSwitchStatusCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ptlSetSwitchStatusCmd
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svc_Protect_CalcCapSwitchOnStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_Protect_Function
</UL>

<P><STRONG><a name="[162]"></a>svc_QueryAllZNCapState</STRONG> (Thumb, 1218 bytes, Stack size 20 bytes, tasksvc.o(i.svc_QueryAllZNCapState))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = svc_QueryAllZNCapState
</UL>
<BR>[Called By]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_SVC_Function
</UL>

<P><STRONG><a name="[15a]"></a>vPtlSetFrameData</STRONG> (Thumb, 126 bytes, Stack size 8 bytes, taskcom.o(i.vPtlSetFrameData))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = vPtlSetFrameData &rArr; USART_DMAReConfig &rArr; DMA_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_DMAReConfig
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ptlGetCRC
</UL>
<BR>[Called By]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ptlSetJHFrame
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ptlSetChangeFrame
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_PtlTx_Function
</UL>

<P><STRONG><a name="[185]"></a>__aeabi_d2f</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, d2f.o(x$fpl$d2f))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_d2f
</UL>
<BR>[Called By]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calcPowerData_CalcFFTHarm
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svc_Ctrl_Calc
</UL>

<P><STRONG><a name="[1c7]"></a>_d2f</STRONG> (Thumb, 98 bytes, Stack size 32 bytes, d2f.o(x$fpl$d2f), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fretinf
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[178]"></a>__aeabi_dadd</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, daddsub_clz.o(x$fpl$dadd))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svc_Phase_Search
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svc_Phase_CalcApparentCur
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asin
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;acos
</UL>

<P><STRONG><a name="[1ca]"></a>_dadd</STRONG> (Thumb, 332 bytes, Stack size 16 bytes, daddsub_clz.o(x$fpl$dadd), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dretinf
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsub1
</UL>

<P><STRONG><a name="[1cd]"></a>__fpl_dcheck_NaN1</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, dcheck1.o(x$fpl$dcheck1))
<BR><BR>[Calls]<UL><LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_return_NaN
</UL>
<BR>[Called By]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
</UL>

<P><STRONG><a name="[123]"></a>__aeabi_ddiv</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, ddiv.o(x$fpl$ddiv))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_ddiv
</UL>
<BR>[Called By]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sample_Calib
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sample_Calc_RMS
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_invalid
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asin
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;acos
</UL>

<P><STRONG><a name="[1cf]"></a>_ddiv</STRONG> (Thumb, 552 bytes, Stack size 32 bytes, ddiv.o(x$fpl$ddiv), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dretinf
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[a2]"></a>__aeabi_d2iz</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, dfix.o(x$fpl$dfix))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_d2iz
</UL>
<BR>[Called By]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calcPowerData_CalcFFTHarm1
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calcPowerData_CalcFFTHarm
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sample_Calib
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sample_Calc_RMS
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetLeftSetOldValue
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenu_MainValue
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svc_Phase_Search
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svc_Phase_CalcApparentCur
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_cos
</UL>

<P><STRONG><a name="[1d0]"></a>_dfix</STRONG> (Thumb, 94 bytes, Stack size 32 bytes, dfix.o(x$fpl$dfix), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[125]"></a>__aeabi_d2uiz</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, dfixu.o(x$fpl$dfixu))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_d2uiz
</UL>
<BR>[Called By]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sample_Calc_RMS
</UL>

<P><STRONG><a name="[1d1]"></a>_dfixu</STRONG> (Thumb, 90 bytes, Stack size 32 bytes, dfixu.o(x$fpl$dfixu), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[a0]"></a>__aeabi_i2d</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, dflt_clz.o(x$fpl$dflt))
<BR><BR>[Called By]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sample_Calib
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sample_Calc_RMS
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetLeftSetOldValue
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenu_MainValue
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svc_Phase_Search
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svc_Phase_CalcApparentCur
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
</UL>

<P><STRONG><a name="[21a]"></a>_dflt</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, dflt_clz.o(x$fpl$dflt), UNUSED)

<P><STRONG><a name="[a3]"></a>__aeabi_ui2d</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, dflt_clz.o(x$fpl$dfltu))
<BR><BR>[Called By]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sample_Calib
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenu_MainValue
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svc_Phase_Search
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
</UL>

<P><STRONG><a name="[21b]"></a>_dfltu</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, dflt_clz.o(x$fpl$dfltu), UNUSED)

<P><STRONG><a name="[a1]"></a>__aeabi_dmul</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, dmul.o(x$fpl$dmul))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_dmul
</UL>
<BR>[Called By]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calcPowerData_CalcFFTHarm1
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calcPowerData_CalcFFTHarm
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sample_Calib
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sample_Calc_RMS
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetLeftSetOldValue
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenu_MainValue
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svc_Phase_Search
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svc_Phase_CalcApparentCur
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_cos
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asin
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;acos
</UL>

<P><STRONG><a name="[1d2]"></a>_dmul</STRONG> (Thumb, 332 bytes, Stack size 32 bytes, dmul.o(x$fpl$dmul), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dretinf
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[1c9]"></a>__fpl_dnaninf</STRONG> (Thumb, 156 bytes, Stack size 16 bytes, dnaninf.o(x$fpl$dnaninf))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __fpl_dnaninf
</UL>
<BR>[Called By]<UL><LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsqrt
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dmul
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dfixu
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dfix
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ddiv
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsub
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_d2f
</UL>

<P><STRONG><a name="[1cc]"></a>__fpl_dretinf</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, dretinf.o(x$fpl$dretinf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_f2d
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dmul
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ddiv
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd
</UL>

<P><STRONG><a name="[179]"></a>__aeabi_drsub</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, daddsub_clz.o(x$fpl$drsb))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_drsub
</UL>
<BR>[Called By]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_cos
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asin
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;acos
</UL>

<P><STRONG><a name="[1d3]"></a>_drsb</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, daddsub_clz.o(x$fpl$drsb), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsub1
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd1
</UL>

<P><STRONG><a name="[1ac]"></a>_dsqrt</STRONG> (Thumb, 456 bytes, Stack size 24 bytes, dsqrt_noumaal.o(x$fpl$dsqrt))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _dsqrt &rArr; __fpl_dnaninf
</UL>
<BR>[Calls]<UL><LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>
<BR>[Called By]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqrt
</UL>

<P><STRONG><a name="[177]"></a>__aeabi_dsub</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, daddsub_clz.o(x$fpl$dsub))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_dsub
</UL>
<BR>[Called By]<UL><LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svc_Phase_Search
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svc_Phase_CalcApparentCur
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_cos
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asin
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;acos
</UL>

<P><STRONG><a name="[1d5]"></a>_dsub</STRONG> (Thumb, 464 bytes, Stack size 32 bytes, daddsub_clz.o(x$fpl$dsub), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd1
</UL>

<P><STRONG><a name="[184]"></a>__aeabi_f2d</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, f2d.o(x$fpl$f2d))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_f2d
</UL>
<BR>[Called By]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calcPowerData_CalcFFTHarm1
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calcPowerData_CalcFFTHarm
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svc_Ctrl_Calc
</UL>

<P><STRONG><a name="[1d6]"></a>_f2d</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, f2d.o(x$fpl$f2d), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fnaninf
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dretinf
</UL>

<P><STRONG><a name="[144]"></a>__aeabi_fadd</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, faddsub_clz.o(x$fpl$fadd))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_fadd
</UL>
<BR>[Called By]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_Power_Function_Freq
</UL>

<P><STRONG><a name="[1d8]"></a>_fadd</STRONG> (Thumb, 196 bytes, Stack size 16 bytes, faddsub_clz.o(x$fpl$fadd), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fretinf
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fnaninf
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fsub1
</UL>

<P><STRONG><a name="[1de]"></a>__fpl_fcmp_Inf</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, fcmpi.o(x$fpl$fcmpinf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fcmple
</UL>

<P><STRONG><a name="[116]"></a>__aeabi_fdiv</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, fdiv.o(x$fpl$fdiv))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_fdiv
</UL>
<BR>[Called By]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calcPowerData_CalcFFTHarm1
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calcPowerData_CalcFFTHarm
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_Power_Function_Freq
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sample_Calib
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sample_Calc_Temperature
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sample_Calc_RMS
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sample_Calc_CalibValue
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svc_Ctrl_Calc
</UL>

<P><STRONG><a name="[1da]"></a>_fdiv</STRONG> (Thumb, 384 bytes, Stack size 16 bytes, fdiv.o(x$fpl$fdiv), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fretinf
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fnaninf
</UL>

<P><STRONG><a name="[1af]"></a>__aeabi_f2iz</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, ffix.o(x$fpl$ffix))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_f2iz
</UL>
<BR>[Called By]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svc_Ctrl_Calc
</UL>

<P><STRONG><a name="[1db]"></a>_ffix</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, ffix.o(x$fpl$ffix), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fnaninf
</UL>

<P><STRONG><a name="[122]"></a>__aeabi_f2uiz</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, ffixu.o(x$fpl$ffixu))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_f2uiz
</UL>
<BR>[Called By]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calcPowerData_CalcFFTHarm
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_Power_Function_Freq
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sample_Calib
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sample_Calc_Temperature
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sample_Calc_RMS
</UL>

<P><STRONG><a name="[1dc]"></a>_ffixu</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, ffixu.o(x$fpl$ffixu), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fnaninf
</UL>

<P><STRONG><a name="[127]"></a>__aeabi_i2f</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, fflt_clz.o(x$fpl$fflt))
<BR><BR>[Called By]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_Power_Function_Freq
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sample_Calib
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sample_Calc_Temperature
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svc_Ctrl_Calc
</UL>

<P><STRONG><a name="[21c]"></a>_fflt</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, fflt_clz.o(x$fpl$fflt), UNUSED)

<P><STRONG><a name="[115]"></a>__aeabi_ui2f</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, fflt_clz.o(x$fpl$ffltu))
<BR><BR>[Called By]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calcPowerData_CalcFFTHarm1
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calcPowerData_CalcFFTHarm
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sample_Calib
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sample_Calc_RMS
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sample_Calc_CalibValue
</UL>

<P><STRONG><a name="[21d]"></a>_ffltu</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, fflt_clz.o(x$fpl$ffltu), UNUSED)

<P><STRONG><a name="[186]"></a>__aeabi_cfcmple</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, fleqf.o(x$fpl$fleqf))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_cfcmple
</UL>
<BR>[Called By]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calcPowerData_CalcFFTHarm1
</UL>

<P><STRONG><a name="[1dd]"></a>_fcmple</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, fleqf.o(x$fpl$fleqf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fnaninf
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fcmp_Inf
</UL>

<P><STRONG><a name="[21e]"></a>__fpl_fcmple_InfNaN</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, fleqf.o(x$fpl$fleqf), UNUSED)

<P><STRONG><a name="[121]"></a>__aeabi_fmul</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, fmul.o(x$fpl$fmul))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_fmul
</UL>
<BR>[Called By]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_Power_Function_Freq
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sample_Calib
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sample_Calc_Temperature
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sample_Calc_RMS
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svc_Ctrl_Calc
</UL>

<P><STRONG><a name="[1df]"></a>_fmul</STRONG> (Thumb, 258 bytes, Stack size 16 bytes, fmul.o(x$fpl$fmul), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fretinf
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fnaninf
</UL>

<P><STRONG><a name="[1d7]"></a>__fpl_fnaninf</STRONG> (Thumb, 140 bytes, Stack size 8 bytes, fnaninf.o(x$fpl$fnaninf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fmul
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fcmple
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ffixu
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ffix
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fdiv
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fsub
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fadd
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_f2d
</UL>

<P><STRONG><a name="[1c8]"></a>__fpl_fretinf</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, fretinf.o(x$fpl$fretinf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fmul
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fdiv
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fadd
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_d2f
</UL>

<P><STRONG><a name="[1ae]"></a>__aeabi_frsub</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, faddsub_clz.o(x$fpl$frsb))
<BR><BR>[Called By]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svc_Ctrl_Calc
</UL>

<P><STRONG><a name="[1e0]"></a>_frsb</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, faddsub_clz.o(x$fpl$frsb), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fsub1
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fadd1
</UL>

<P><STRONG><a name="[143]"></a>__aeabi_fsub</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, faddsub_clz.o(x$fpl$fsub))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_fsub
</UL>
<BR>[Called By]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_Power_Function_Freq
</UL>

<P><STRONG><a name="[1e2]"></a>_fsub</STRONG> (Thumb, 234 bytes, Stack size 16 bytes, faddsub_clz.o(x$fpl$fsub), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fnaninf
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fadd1
</UL>

<P><STRONG><a name="[1ce]"></a>__fpl_return_NaN</STRONG> (Thumb, 100 bytes, Stack size 0 bytes, retnan.o(x$fpl$retnan))
<BR><BR>[Calls]<UL><LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_cmpreturn
</UL>
<BR>[Called By]<UL><LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dcheck_NaN1
</UL>

<P><STRONG><a name="[17a]"></a>__ARM_scalbn</STRONG> (Thumb, 92 bytes, Stack size 0 bytes, scalbn.o(x$fpl$scalbn))
<BR><BR>[Calls]<UL><LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dcheck_NaN1
</UL>
<BR>[Called By]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_underflow
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_infnan
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_cos
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asin
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;acos
</UL>

<P><STRONG><a name="[1e3]"></a>__fpl_cmpreturn</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, trapv.o(x$fpl$trapveneer))
<BR><BR>[Called By]<UL><LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_return_NaN
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[130]"></a>SetSysClock</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, system_stm32f10x.o(i.SetSysClock))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = SetSysClock &rArr; SetSysClockTo72
</UL>
<BR>[Calls]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSysClockTo72
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[131]"></a>SetSysClockTo72</STRONG> (Thumb, 214 bytes, Stack size 12 bytes, system_stm32f10x.o(i.SetSysClockTo72))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = SetSysClockTo72
</UL>
<BR>[Called By]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSysClock
</UL>

<P><STRONG><a name="[167]"></a>svc_Ctrl_AutoRunProc</STRONG> (Thumb, 348 bytes, Stack size 24 bytes, tasksvc.o(i.svc_Ctrl_AutoRunProc))
<BR><BR>[Stack]<UL><LI>Max Depth = 392<LI>Call Chain = svc_Ctrl_AutoRunProc &rArr; svc_Ctrl_JudgeAutoRun &rArr; svc_Ctrl_SelCap &rArr; svc_Ctrl_SelCap_Phase_Cmp &rArr; svc_Phase_Search &rArr; svc_Phase_CalcApparentCur &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PT_TimerDiff
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ptlSetSwitchStatusCmd
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svc_Ctrl_JudgeAutoRun
</UL>
<BR>[Called By]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_SVC_Function
</UL>

<P><STRONG><a name="[1b0]"></a>svc_Ctrl_SelCap</STRONG> (Thumb, 94 bytes, Stack size 8 bytes, tasksvc.o(i.svc_Ctrl_SelCap))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = svc_Ctrl_SelCap &rArr; svc_Ctrl_SelCap_Phase_Cmp &rArr; svc_Phase_Search &rArr; svc_Phase_CalcApparentCur &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svc_Protect_GetPhaseProtectStatus
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svc_Ctrl_SelCap_Phase_Cmp
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svc_Ctrl_SelCap_Phase
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svc_Ctrl_SelCap_Norm
</UL>
<BR>[Called By]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svc_Ctrl_JudgeAutoRun
</UL>

<P><STRONG><a name="[1b4]"></a>svc_Ctrl_SelGroupFun</STRONG> (Thumb, 168 bytes, Stack size 24 bytes, tasksvc.o(i.svc_Ctrl_SelGroupFun))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = svc_Ctrl_SelGroupFun
</UL>
<BR>[Calls]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svc_Ctrl_JudgeKGOnEnable
</UL>
<BR>[Called By]<UL><LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svc_Ctrl_SelDeltaCap
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svc_Ctrl_OnSelStarCap
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svc_Ctrl_OffSelStarCap
</UL>

<P><STRONG><a name="[1d4]"></a>_dadd1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, daddsub_clz.o(x$fpl$dadd), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsub
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_drsb
</UL>

<P><STRONG><a name="[1cb]"></a>_dsub1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, daddsub_clz.o(x$fpl$dsub), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_drsb
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd
</UL>

<P><STRONG><a name="[1e1]"></a>_fadd1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, faddsub_clz.o(x$fpl$fadd), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fsub
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_frsb
</UL>

<P><STRONG><a name="[1d9]"></a>_fsub1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, faddsub_clz.o(x$fpl$fsub), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_frsb
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fadd
</UL>
<P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
<SCRIPT Language=VBScript><!--

//--></SCRIPT>