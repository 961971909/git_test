<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\temp\72_LED_Mult_.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\temp\72_LED_Mult_.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5060422: Last Updated: Mon Dec 24 12:42:18 2018
<BR><P>
<H3>Maximum Stack Usage =        640 bytes + Unknown(Functions without stacksize, Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
TIM2_IRQHandler &rArr; Modbus_IRQHandler &rArr; vMSRS232_RxProtocol &rArr; vMSRS232_Analysis &rArr; vMSRS232_Set_Adjust &rArr; RN8032_Adjust &rArr; RN8032_Updata &rArr; SaveParam &rArr; MemData_WriteParam &rArr; MemData_Write_To_Flash &rArr; FLASH_ProgramWord &rArr; FLASH_WaitForLastOperation
<P>
<H3>
Functions with no stack information
</H3><UL>
 <LI><a href="#[63]">__user_initial_stackheap</a>
</UL>
</UL>
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[7]">MemManage_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[7]">MemManage_Handler</a><BR>
 <LI><a href="#[8]">BusFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[8]">BusFault_Handler</a><BR>
 <LI><a href="#[9]">UsageFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[9]">UsageFault_Handler</a><BR>
 <LI><a href="#[b]">DebugMon_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[b]">DebugMon_Handler</a><BR>
 <LI><a href="#[20]">ADC1_2_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[20]">ADC1_2_IRQHandler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[20]">ADC1_2_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[8]">BusFault_Handler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[23]">CAN1_RX1_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[24]">CAN1_SCE_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[19]">DMA1_Channel1_IRQHandler</a> from stm32f10x_it.o(i.DMA1_Channel1_IRQHandler) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[1a]">DMA1_Channel2_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[1b]">DMA1_Channel3_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[1c]">DMA1_Channel4_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[1d]">DMA1_Channel5_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[1e]">DMA1_Channel6_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[1f]">DMA1_Channel7_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[b]">DebugMon_Handler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[40]">DispMenu_Main</a> from taskledgui.o(i.DispMenu_Main) referenced from taskledgui.o(.constdata)
 <LI><a href="#[41]">DispMenu_Menu1</a> from taskledgui.o(i.DispMenu_Menu1) referenced from taskledgui.o(.constdata)
 <LI><a href="#[42]">DispMenu_Menu2</a> from taskledgui.o(i.DispMenu_Menu2) referenced from taskledgui.o(.constdata)
 <LI><a href="#[43]">DispMenu_Menu3</a> from taskledgui.o(i.DispMenu_Menu3) referenced from taskledgui.o(.constdata)
 <LI><a href="#[45]">DispMenu_MenuCode</a> from taskledgui.o(i.DispMenu_MenuCode) referenced from taskledgui.o(.constdata)
 <LI><a href="#[46]">DispMenu_MenuCodeErr</a> from taskledgui.o(i.DispMenu_MenuCodeErr) referenced from taskledgui.o(.constdata)
 <LI><a href="#[47]">DispMenu_MenuSave</a> from taskledgui.o(i.DispMenu_MenuSave) referenced from taskledgui.o(.constdata)
 <LI><a href="#[44]">DispMenu_MenuValue</a> from taskledgui.o(i.DispMenu_MenuValue) referenced from taskledgui.o(.constdata)
 <LI><a href="#[14]">EXTI0_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[36]">EXTI15_10_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[15]">EXTI1_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[16]">EXTI2_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[17]">EXTI3_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[18]">EXTI4_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[25]">EXTI9_5_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[12]">FLASH_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[6]">HardFault_Handler</a> from stm32f10x_it.o(i.HardFault_Handler) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[2e]">I2C1_ER_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[2d]">I2C1_EV_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[30]">I2C2_ER_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[2f]">I2C2_EV_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[7]">MemManage_Handler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[5]">NMI_Handler</a> from stm32f10x_it.o(i.NMI_Handler) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[f]">PVD_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[c]">PendSV_Handler</a> from stm32f10x_it.o(i.PendSV_Handler) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[13]">RCC_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[37]">RTCAlarm_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[11]">RTC_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[4]">Reset_Handler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[31]">SPI1_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[32]">SPI2_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[a]">SVC_Handler</a> from stm32f10x_it.o(i.SVC_Handler) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[d]">SysTick_Handler</a> from stm32f10x_it.o(i.SysTick_Handler) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[39]">SystemInit</a> from system_stm32f10x.o(i.SystemInit) referenced from startup_stm32f10x_md.o(.text)
 <LI><a href="#[10]">TAMPER_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[26]">TIM1_BRK_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[29]">TIM1_CC_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[28]">TIM1_TRG_COM_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[27]">TIM1_UP_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[2a]">TIM2_IRQHandler</a> from stm32f10x_it.o(i.TIM2_IRQHandler) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[2b]">TIM3_IRQHandler</a> from stm32f10x_it.o(i.TIM3_IRQHandler) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[2c]">TIM4_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[3e]">Task_Extra_Function</a> from taskextra.o(i.Task_Extra_Function) referenced from sysmain.o(i.main)
 <LI><a href="#[3f]">Task_GUI_Function</a> from taskledgui.o(i.Task_GUI_Function) referenced from sysmain.o(i.main)
 <LI><a href="#[3c]">Task_Power_Function</a> from bsp_rn8302b.o(i.Task_Power_Function) referenced from sysmain.o(i.main)
 <LI><a href="#[3d]">Task_Protect_Function</a> from taskprotect.o(i.Task_Protect_Function) referenced from sysmain.o(i.main)
 <LI><a href="#[3b]">Task_RS232_Function</a> from taskrs232.o(i.Task_RS232_Function) referenced from sysmain.o(i.main)
 <LI><a href="#[33]">USART1_IRQHandler</a> from stm32f10x_it.o(i.USART1_IRQHandler) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[34]">USART2_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[35]">USART3_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[38]">USBWakeUp_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[21]">USB_HP_CAN1_TX_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[22]">USB_LP_CAN1_RX0_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[9]">UsageFault_Handler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[e]">WWDG_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[48]">__main</a> from __main.o(!!!main) referenced from startup_stm32f10x_md.o(.text)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[48]"></a>__main</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, __main.o(!!!main))
<BR><BR>[Calls]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[49]"></a>__scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter))
<BR><BR>[Called By]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[4b]"></a>__scatterload_rt2</STRONG> (Thumb, 44 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[186]"></a>__scatterload_rt2_thumb_only</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[187]"></a>__scatterload_null</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[188]"></a>__decompress</STRONG> (Thumb, 90 bytes, Stack size unknown bytes, __dczerorl2.o(!!dczerorl2), UNUSED)

<P><STRONG><a name="[189]"></a>__decompress1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __dczerorl2.o(!!dczerorl2), UNUSED)

<P><STRONG><a name="[18a]"></a>__scatterload_zeroinit</STRONG> (Thumb, 28 bytes, Stack size unknown bytes, __scatter_zi.o(!!handler_zi), UNUSED)

<P><STRONG><a name="[4f]"></a>__rt_lib_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit.o(.ARM.Collect$$libinit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_li
</UL>

<P><STRONG><a name="[18b]"></a>__rt_lib_init_alloca_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002E))

<P><STRONG><a name="[18c]"></a>__rt_lib_init_argv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002C))

<P><STRONG><a name="[18d]"></a>__rt_lib_init_atexit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001B))

<P><STRONG><a name="[18e]"></a>__rt_lib_init_clock_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000021))

<P><STRONG><a name="[18f]"></a>__rt_lib_init_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000032))

<P><STRONG><a name="[190]"></a>__rt_lib_init_exceptions_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000030))

<P><STRONG><a name="[191]"></a>__rt_lib_init_fp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000002))

<P><STRONG><a name="[192]"></a>__rt_lib_init_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001F))

<P><STRONG><a name="[193]"></a>__rt_lib_init_getenv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000023))

<P><STRONG><a name="[194]"></a>__rt_lib_init_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000A))

<P><STRONG><a name="[195]"></a>__rt_lib_init_lc_collate_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000011))

<P><STRONG><a name="[196]"></a>__rt_lib_init_lc_ctype_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000013))

<P><STRONG><a name="[197]"></a>__rt_lib_init_lc_monetary_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000015))

<P><STRONG><a name="[198]"></a>__rt_lib_init_lc_numeric_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000017))

<P><STRONG><a name="[199]"></a>__rt_lib_init_lc_time_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000019))

<P><STRONG><a name="[19a]"></a>__rt_lib_init_preinit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000004))

<P><STRONG><a name="[19b]"></a>__rt_lib_init_rand_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000E))

<P><STRONG><a name="[19c]"></a>__rt_lib_init_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000033))

<P><STRONG><a name="[19d]"></a>__rt_lib_init_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001D))

<P><STRONG><a name="[19e]"></a>__rt_lib_init_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000025))

<P><STRONG><a name="[19f]"></a>__rt_lib_init_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000C))

<P><STRONG><a name="[54]"></a>__rt_lib_shutdown</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown.o(.ARM.Collect$$libshutdown$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_ls
</UL>

<P><STRONG><a name="[1a0]"></a>__rt_lib_shutdown_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000002))

<P><STRONG><a name="[1a1]"></a>__rt_lib_shutdown_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000007))

<P><STRONG><a name="[1a2]"></a>__rt_lib_shutdown_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000F))

<P><STRONG><a name="[1a3]"></a>__rt_lib_shutdown_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000010))

<P><STRONG><a name="[1a4]"></a>__rt_lib_shutdown_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000A))

<P><STRONG><a name="[1a5]"></a>__rt_lib_shutdown_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000004))

<P><STRONG><a name="[1a6]"></a>__rt_lib_shutdown_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000C))

<P><STRONG><a name="[4a]"></a>__rt_entry</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry.o(.ARM.Collect$$rtentry$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_rt2
</UL>

<P><STRONG><a name="[1a7]"></a>__rt_entry_presh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000002))

<P><STRONG><a name="[4c]"></a>__rt_entry_sh</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry4.o(.ARM.Collect$$rtentry$$00000004))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_entry_sh &rArr; __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[4e]"></a>__rt_entry_li</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000A))
<BR><BR>[Calls]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init
</UL>

<P><STRONG><a name="[1a8]"></a>__rt_entry_postsh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000009))

<P><STRONG><a name="[50]"></a>__rt_entry_main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000D))
<BR><BR>[Stack]<UL><LI>Max Depth = 600 + Unknown Stack Size
<LI>Call Chain = __rt_entry_main &rArr; main &rArr; LoadParam &rArr; MemData_ReadParam &rArr; MemData_CmpParam &rArr; MemData_WriteParam &rArr; MemData_Write_To_Flash &rArr; FLASH_ProgramWord &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[1a9]"></a>__rt_entry_postli_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000C))

<P><STRONG><a name="[64]"></a>__rt_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit.o(.ARM.Collect$$rtexit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[53]"></a>__rt_exit_ls</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000003))
<BR><BR>[Calls]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown
</UL>

<P><STRONG><a name="[1aa]"></a>__rt_exit_prels_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000002))

<P><STRONG><a name="[55]"></a>__rt_exit_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>

<P><STRONG><a name="[4]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[7]"></a>MemManage_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[8]"></a>BusFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[9]"></a>UsageFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[b]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>ADC1_2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_2_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_2_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>CAN1_RX1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>CAN1_SCE_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>DMA1_Channel2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>DMA1_Channel3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>DMA1_Channel4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>DMA1_Channel5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>DMA1_Channel6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>DMA1_Channel7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>EXTI0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[36]"></a>EXTI15_10_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>EXTI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>EXTI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>EXTI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>EXTI4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>EXTI9_5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>FLASH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[2e]"></a>I2C1_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[2d]"></a>I2C1_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[30]"></a>I2C2_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[2f]"></a>I2C2_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[f]"></a>PVD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>RCC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[37]"></a>RTCAlarm_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>RTC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[31]"></a>SPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[32]"></a>SPI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>TAMPER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>TIM1_BRK_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>TIM1_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>TIM1_TRG_COM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>TIM1_UP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>TIM4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[34]"></a>USART2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[35]"></a>USART3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[38]"></a>USBWakeUp_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>USB_HP_CAN1_TX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>USB_LP_CAN1_RX0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[e]"></a>WWDG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[63]"></a>__user_initial_stackheap</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, startup_stm32f10x_md.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[105]"></a>__aeabi_ldivmod</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, llsdiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_ldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RN8032_Updata
</UL>

<P><STRONG><a name="[57]"></a>_ll_sdiv</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, llsdiv.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>

<P><STRONG><a name="[9a]"></a>__aeabi_memcpy</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memcpy_v6.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RN8032_Adjust
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vModeBus_Query_Primary
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vModeBusRtu_Analysis
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vMSRS232_Set_Adjust
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vMSRS232_Query_Power
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vMSRS232_Query_Param
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vMSRS232_Query_Adjust
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemData_WriteParam
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemData_ReadParam
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FRAM_ReadData
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FRAM_WriteData
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Key_Ok
</UL>

<P><STRONG><a name="[59]"></a>__rt_memcpy</STRONG> (Thumb, 138 bytes, Stack size 0 bytes, rt_memcpy_v6.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>

<P><STRONG><a name="[1ab]"></a>_memcpy_lastbytes</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memcpy_v6.o(.text), UNUSED)

<P><STRONG><a name="[5a]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemData_ReadParam
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_memcpy
</UL>

<P><STRONG><a name="[1ac]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[1ad]"></a>__rt_memcpy_w</STRONG> (Thumb, 100 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[1ae]"></a>_memcpy_lastbytes_aligned</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[5b]"></a>__aeabi_memset</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, aeabi_memset.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemData_WriteParam
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FRAM_WriteData
</UL>

<P><STRONG><a name="[134]"></a>__aeabi_memclr</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memclr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_RS232_init
</UL>

<P><STRONG><a name="[5d]"></a>__rt_memclr</STRONG> (Thumb, 68 bytes, Stack size 0 bytes, rt_memclr.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset_w
</UL>

<P><STRONG><a name="[5c]"></a>_memset</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memclr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[1af]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 4 bytes, rt_memclr_w.o(.text), UNUSED)

<P><STRONG><a name="[1b0]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 4 bytes, rt_memclr_w.o(.text), UNUSED)

<P><STRONG><a name="[1b1]"></a>__rt_memclr_w</STRONG> (Thumb, 78 bytes, Stack size 4 bytes, rt_memclr_w.o(.text), UNUSED)

<P><STRONG><a name="[5e]"></a>_memset_w</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memclr_w.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_memclr
</UL>

<P><STRONG><a name="[1b2]"></a>__use_two_region_memory</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[1b3]"></a>__rt_heap_escrow$2region</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[1b4]"></a>__rt_heap_expand$2region</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[58]"></a>__aeabi_uldivmod</STRONG> (Thumb, 0 bytes, Stack size 48 bytes, lludivv7m.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ll_sdiv
</UL>

<P><STRONG><a name="[1b5]"></a>_ll_udiv</STRONG> (Thumb, 238 bytes, Stack size 48 bytes, lludivv7m.o(.text), UNUSED)

<P><STRONG><a name="[5f]"></a>__read_errno</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, _rserrno.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>

<P><STRONG><a name="[61]"></a>__set_errno</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, _rserrno.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqrt
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sin
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cos
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asin
</UL>

<P><STRONG><a name="[60]"></a>__aeabi_errno_addr</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rt_errno_addr_intlibspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__read_errno
</UL>

<P><STRONG><a name="[1b6]"></a>__errno$intlibspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_errno_addr_intlibspace.o(.text), UNUSED)

<P><STRONG><a name="[1b7]"></a>__rt_errno_addr$intlibspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_errno_addr_intlibspace.o(.text), UNUSED)

<P><STRONG><a name="[1b8]"></a>__user_libspace</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[62]"></a>__user_perproc_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[1b9]"></a>__user_perthread_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[4d]"></a>__user_setup_stackheap</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, sys_stackheap_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_initial_stackheap
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_perproc_libspace
</UL>
<BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_sh
</UL>

<P><STRONG><a name="[52]"></a>exit</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, exit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = exit
</UL>
<BR>[Calls]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[56]"></a>_sys_exit</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, sys_exit.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_exit
</UL>

<P><STRONG><a name="[1ba]"></a>__I$use$semihosting</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[1bb]"></a>__use_no_semihosting_swi</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[160]"></a>Ao_Item_Judge</STRONG> (Thumb, 142 bytes, Stack size 0 bytes, taskrs232.o(i.Ao_Item_Judge))
<BR><BR>[Called By]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vModeBus_Set_Ctrl_Parm
</UL>

<P><STRONG><a name="[1bc]"></a>__semihosting_library_function</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, indicate_semi.o(.text), UNUSED)

<P><STRONG><a name="[65]"></a>Bsp_Init</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, bsp.o(i.Bsp_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = Bsp_Init &rArr; GPIO_Configuration &rArr; GPIO_PinRemapConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Configuration
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_Configuration
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Configuration
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Configuration
</UL>
<BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[83]"></a>CharToNumber</STRONG> (Thumb, 46 bytes, Stack size 12 bytes, taskledgui.o(i.CharToNumber))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = CharToNumber
</UL>
<BR>[Called By]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenu_MenuValue
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenu_MenuCode
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenu_Menu3
</UL>

<P><STRONG><a name="[19]"></a>DMA1_Channel1_IRQHandler</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, stm32f10x_it.o(i.DMA1_Channel1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DMA1_Channel1_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_GetITStatus
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_ClearITPendingBit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[6b]"></a>DMA_ClearITPendingBit</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f10x_dma.o(i.DMA_ClearITPendingBit))
<BR><BR>[Called By]<UL><LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_Channel1_IRQHandler
</UL>

<P><STRONG><a name="[13a]"></a>DMA_Cmd</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f10x_dma.o(i.DMA_Cmd))
<BR><BR>[Called By]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_DMAReConfig
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Configuration
</UL>

<P><STRONG><a name="[138]"></a>DMA_DeInit</STRONG> (Thumb, 218 bytes, Stack size 0 bytes, stm32f10x_dma.o(i.DMA_DeInit))
<BR><BR>[Called By]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_DMAReConfig
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Configuration
</UL>

<P><STRONG><a name="[6a]"></a>DMA_GetITStatus</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_dma.o(i.DMA_GetITStatus))
<BR><BR>[Called By]<UL><LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_Channel1_IRQHandler
</UL>

<P><STRONG><a name="[139]"></a>DMA_Init</STRONG> (Thumb, 58 bytes, Stack size 12 bytes, stm32f10x_dma.o(i.DMA_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = DMA_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_DMAReConfig
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Configuration
</UL>

<P><STRONG><a name="[6c]"></a>Ddi_Protect_JudgeLowProtectHappen</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, taskextra.o(i.Ddi_Protect_JudgeLowProtectHappen))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Ddi_Protect_JudgeLowProtectHappen &rArr; svc_Protect_ProtectHappen
</UL>
<BR>[Calls]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svc_Protect_ProtectRtn
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svc_Protect_ProtectHappen
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svc_Protect_CancelJudge
</UL>
<BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OutHandler_Second
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OutHandler_First
</UL>

<P><STRONG><a name="[70]"></a>Ddi_Protect_JudgeOverProtectHappen</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, taskextra.o(i.Ddi_Protect_JudgeOverProtectHappen))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Ddi_Protect_JudgeOverProtectHappen &rArr; svc_Protect_ProtectHappen
</UL>
<BR>[Calls]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svc_Protect_ProtectRtn
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svc_Protect_ProtectHappen
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svc_Protect_CancelJudge
</UL>
<BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OutHandler_Second
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OutHandler_First
</UL>

<P><STRONG><a name="[71]"></a>DinStatus</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, taskextra.o(i.DinStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = DinStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadInputDataBit
</UL>
<BR>[Called By]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_Extra_Function
</UL>

<P><STRONG><a name="[77]"></a>DispChar</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, taskledgui.o(i.DispChar))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = DispChar
</UL>
<BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispValueEnergy
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispValue
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispSetPT
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispSetCT
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenu_MenuValue
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenu_MenuSave
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenu_MenuCodeErr
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenu_MenuCode
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenu_Menu3
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenu_Menu2
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenu_Menu1
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenu_Main
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispHarmonicContent
</UL>

<P><STRONG><a name="[73]"></a>DispHarmonicContent</STRONG> (Thumb, 340 bytes, Stack size 48 bytes, taskledgui.o(i.DispHarmonicContent))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = DispHarmonicContent &rArr; DispValue &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispValue
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispChar
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2uiz
</UL>
<BR>[Called By]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenu_Main
</UL>

<P><STRONG><a name="[40]"></a>DispMenu_Main</STRONG> (Thumb, 6570 bytes, Stack size 104 bytes, taskledgui.o(i.DispMenu_Main))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = DispMenu_Main &rArr; DispValueVoltage &rArr; DispValue &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispValueVoltage
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispValuePower
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispValueEnergy
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispValueCurrent
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispValue
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispHarmonicContent
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispChar
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2lz
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2iz
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_l2d
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2lz
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2uiz
</UL>
<BR>[Address Reference Count : 1]<UL><LI> taskledgui.o(.constdata)
</UL>
<P><STRONG><a name="[41]"></a>DispMenu_Menu1</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, taskledgui.o(i.DispMenu_Menu1))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = DispMenu_Menu1 &rArr; DispChar
</UL>
<BR>[Calls]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispChar
</UL>
<BR>[Address Reference Count : 1]<UL><LI> taskledgui.o(.constdata)
</UL>
<P><STRONG><a name="[42]"></a>DispMenu_Menu2</STRONG> (Thumb, 122 bytes, Stack size 12 bytes, taskledgui.o(i.DispMenu_Menu2))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = DispMenu_Menu2 &rArr; DispChar
</UL>
<BR>[Calls]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispChar
</UL>
<BR>[Address Reference Count : 1]<UL><LI> taskledgui.o(.constdata)
</UL>
<P><STRONG><a name="[43]"></a>DispMenu_Menu3</STRONG> (Thumb, 3918 bytes, Stack size 56 bytes, taskledgui.o(i.DispMenu_Menu3))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = DispMenu_Menu3 &rArr; DispValue &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispValue
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispChar
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CharToNumber
</UL>
<BR>[Address Reference Count : 1]<UL><LI> taskledgui.o(.constdata)
</UL>
<P><STRONG><a name="[45]"></a>DispMenu_MenuCode</STRONG> (Thumb, 76 bytes, Stack size 32 bytes, taskledgui.o(i.DispMenu_MenuCode))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = DispMenu_MenuCode &rArr; DispValue &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispValue
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispChar
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CharToNumber
</UL>
<BR>[Address Reference Count : 1]<UL><LI> taskledgui.o(.constdata)
</UL>
<P><STRONG><a name="[46]"></a>DispMenu_MenuCodeErr</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, taskledgui.o(i.DispMenu_MenuCodeErr))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = DispMenu_MenuCodeErr &rArr; DispChar
</UL>
<BR>[Calls]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispChar
</UL>
<BR>[Address Reference Count : 1]<UL><LI> taskledgui.o(.constdata)
</UL>
<P><STRONG><a name="[47]"></a>DispMenu_MenuSave</STRONG> (Thumb, 88 bytes, Stack size 12 bytes, taskledgui.o(i.DispMenu_MenuSave))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = DispMenu_MenuSave &rArr; DispChar
</UL>
<BR>[Calls]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispChar
</UL>
<BR>[Address Reference Count : 1]<UL><LI> taskledgui.o(.constdata)
</UL>
<P><STRONG><a name="[44]"></a>DispMenu_MenuValue</STRONG> (Thumb, 3488 bytes, Stack size 56 bytes, taskledgui.o(i.DispMenu_MenuValue))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = DispMenu_MenuValue &rArr; DispValue &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispValue
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispSetPT
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispSetCT
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispChar
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CharToNumber
</UL>
<BR>[Address Reference Count : 1]<UL><LI> taskledgui.o(.constdata)
</UL>
<P><STRONG><a name="[85]"></a>DispSetCT</STRONG> (Thumb, 298 bytes, Stack size 40 bytes, taskledgui.o(i.DispSetCT))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = DispSetCT &rArr; DispChar
</UL>
<BR>[Calls]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HT_Data_Index
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispChar
</UL>
<BR>[Called By]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenu_MenuValue
</UL>

<P><STRONG><a name="[84]"></a>DispSetPT</STRONG> (Thumb, 298 bytes, Stack size 40 bytes, taskledgui.o(i.DispSetPT))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = DispSetPT &rArr; DispChar
</UL>
<BR>[Calls]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HT_Data_Index
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispChar
</UL>
<BR>[Called By]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenu_MenuValue
</UL>

<P><STRONG><a name="[76]"></a>DispValue</STRONG> (Thumb, 622 bytes, Stack size 64 bytes, taskledgui.o(i.DispValue))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = DispValue &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HT_Data_Index
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_Set_FU
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispChar
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispValueVoltage
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispValuePower
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispValueEnergy
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispValueCurrent
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenu_MenuValue
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenu_MenuCode
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenu_Menu3
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenu_Main
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispHarmonicContent
</UL>

<P><STRONG><a name="[7c]"></a>DispValueCurrent</STRONG> (Thumb, 310 bytes, Stack size 72 bytes, taskledgui.o(i.DispValueCurrent))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = DispValueCurrent &rArr; DispValue &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispValue
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
</UL>
<BR>[Called By]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenu_Main
</UL>

<P><STRONG><a name="[82]"></a>DispValueEnergy</STRONG> (Thumb, 234 bytes, Stack size 32 bytes, taskledgui.o(i.DispValueEnergy))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = DispValueEnergy &rArr; DispValue &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispValue
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispChar
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2uiz
</UL>
<BR>[Called By]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenu_Main
</UL>

<P><STRONG><a name="[80]"></a>DispValuePower</STRONG> (Thumb, 718 bytes, Stack size 72 bytes, taskledgui.o(i.DispValuePower))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = DispValuePower &rArr; DispValue &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispValue
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_l2d
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2lz
</UL>
<BR>[Called By]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenu_Main
</UL>

<P><STRONG><a name="[7b]"></a>DispValueVoltage</STRONG> (Thumb, 310 bytes, Stack size 72 bytes, taskledgui.o(i.DispValueVoltage))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = DispValueVoltage &rArr; DispValue &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispValue
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
</UL>
<BR>[Called By]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenu_Main
</UL>

<P><STRONG><a name="[88]"></a>Disp_Set_FU</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, taskledgui.o(i.Disp_Set_FU))
<BR><BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispValue
</UL>

<P><STRONG><a name="[161]"></a>Do_Item_Judge</STRONG> (Thumb, 378 bytes, Stack size 0 bytes, taskrs232.o(i.Do_Item_Judge))
<BR><BR>[Called By]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vModeBus_Set_Ctrl_Parm
</UL>

<P><STRONG><a name="[8a]"></a>FFT</STRONG> (Thumb, 428 bytes, Stack size 64 bytes, bsp_rn8302b.o(i.FFT))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = FFT &rArr; __aeabi_fsub
</UL>
<BR>[Calls]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_frsub
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
</UL>
<BR>[Called By]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fnDl645Fft_Harmonic_Exec
</UL>

<P><STRONG><a name="[d8]"></a>FLASH_ClearFlag</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_flash.o(i.FLASH_ClearFlag))
<BR><BR>[Called By]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemData_Write_To_Flash
</UL>

<P><STRONG><a name="[8e]"></a>FLASH_ErasePage</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, stm32f10x_flash.o(i.FLASH_ErasePage))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = FLASH_ErasePage &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
</UL>
<BR>[Called By]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemData_Write_To_Flash
</UL>

<P><STRONG><a name="[91]"></a>FLASH_GetBank1Status</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, stm32f10x_flash.o(i.FLASH_GetBank1Status))
<BR><BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
</UL>

<P><STRONG><a name="[d9]"></a>FLASH_Lock</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f10x_flash.o(i.FLASH_Lock))
<BR><BR>[Called By]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemData_Write_To_Flash
</UL>

<P><STRONG><a name="[90]"></a>FLASH_ProgramWord</STRONG> (Thumb, 76 bytes, Stack size 28 bytes, stm32f10x_flash.o(i.FLASH_ProgramWord))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = FLASH_ProgramWord &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
</UL>
<BR>[Called By]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemData_Write_To_Flash
</UL>

<P><STRONG><a name="[d7]"></a>FLASH_Unlock</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f10x_flash.o(i.FLASH_Unlock))
<BR><BR>[Called By]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemData_Write_To_Flash
</UL>

<P><STRONG><a name="[8f]"></a>FLASH_WaitForLastOperation</STRONG> (Thumb, 34 bytes, Stack size 4 bytes, stm32f10x_flash.o(i.FLASH_WaitForLastOperation))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_GetBank1Status
</UL>
<BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ProgramWord
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ErasePage
</UL>

<P><STRONG><a name="[92]"></a>FRAM_I2C_ReadData</STRONG> (Thumb, 102 bytes, Stack size 24 bytes, drvfram.o(i.FRAM_I2C_ReadData))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = FRAM_I2C_ReadData &rArr; MyI2C_SendByte &rArr; MyI2C_GPIO_Out_Config &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MyI2C_Stop
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MyI2C_Start
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MyI2C_SendByte
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MyI2C_ReceiveByte
</UL>
<BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FRAM_ReadData
</UL>

<P><STRONG><a name="[97]"></a>FRAM_I2C_WriteData</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, drvfram.o(i.FRAM_I2C_WriteData))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = FRAM_I2C_WriteData &rArr; MyI2C_SendByte &rArr; MyI2C_GPIO_Out_Config &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MyI2C_Stop
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MyI2C_Start
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MyI2C_SendByte
</UL>
<BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FRAM_WriteData
</UL>

<P><STRONG><a name="[98]"></a>FRAM_ReadData</STRONG> (Thumb, 68 bytes, Stack size 40 bytes, drvfram.o(i.FRAM_ReadData))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = FRAM_ReadData &rArr; FRAM_I2C_ReadData &rArr; MyI2C_SendByte &rArr; MyI2C_GPIO_Out_Config &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FramData_Crc
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FRAM_I2C_ReadData
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[9b]"></a>FRAM_WriteData</STRONG> (Thumb, 72 bytes, Stack size 48 bytes, drvfram.o(i.FRAM_WriteData))
<BR><BR>[Stack]<UL><LI>Max Depth = 116 + Unknown Stack Size
<LI>Call Chain = FRAM_WriteData &rArr; FRAM_I2C_WriteData &rArr; MyI2C_SendByte &rArr; MyI2C_GPIO_Out_Config &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FramData_Crc
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FRAM_I2C_WriteData
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_Power_Function
</UL>

<P><STRONG><a name="[99]"></a>FramData_Crc</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, drvfram.o(i.FramData_Crc))
<BR><BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FRAM_ReadData
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FRAM_WriteData
</UL>

<P><STRONG><a name="[67]"></a>GPIO_Configuration</STRONG> (Thumb, 462 bytes, Stack size 40 bytes, bsp.o(i.GPIO_Configuration))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = GPIO_Configuration &rArr; GPIO_PinRemapConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinRemapConfig
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_Init
</UL>

<P><STRONG><a name="[9f]"></a>GPIO_Init</STRONG> (Thumb, 156 bytes, Stack size 20 bytes, stm32f10x_gpio.o(i.GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_PWM_Configuration
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Configuration
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MyI2C_GPIO_Out_Config
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MyI2C_GPIO_IN_Config
</UL>

<P><STRONG><a name="[9e]"></a>GPIO_PinRemapConfig</STRONG> (Thumb, 82 bytes, Stack size 20 bytes, stm32f10x_gpio.o(i.GPIO_PinRemapConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = GPIO_PinRemapConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Configuration
</UL>

<P><STRONG><a name="[72]"></a>GPIO_ReadInputDataBit</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f10x_gpio.o(i.GPIO_ReadInputDataBit))
<BR><BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DinStatus
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Spi_RN8302_ReadByte
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyStatus
</UL>

<P><STRONG><a name="[9c]"></a>GPIO_ResetBits</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_gpio.o(i.GPIO_ResetBits))
<BR><BR>[Called By]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM1640_Start
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM1640_I2C_WrByte
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM1640_End
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FRAM_WriteData
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Spi_RN8302_SendByte
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Spi_RN8302_ReadByte
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RN8302RDBUFF
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RN8302_TX_Frame
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RN8302_RX_Frame
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Timer_On
</UL>

<P><STRONG><a name="[9d]"></a>GPIO_SetBits</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_gpio.o(i.GPIO_SetBits))
<BR><BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Configuration
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM1640_Start
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM1640_I2C_WrByte
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM1640_End
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FRAM_WriteData
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Spi_RN8302_SendByte
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Spi_RN8302_ReadByte
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RN8302RDBUFF
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RN8302_TX_Frame
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RN8302_RX_Frame
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Timer_On
</UL>

<P><STRONG><a name="[b1]"></a>GUI_Key_Default</STRONG> (Thumb, 100 bytes, Stack size 8 bytes, taskledgui.o(i.GUI_Key_Default))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = GUI_Key_Default
</UL>
<BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Main
</UL>

<P><STRONG><a name="[a0]"></a>GUI_Key_Down</STRONG> (Thumb, 690 bytes, Stack size 36 bytes, taskledgui.o(i.GUI_Key_Down))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = GUI_Key_Down &rArr; UpdataOrSetValue
</UL>
<BR>[Calls]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdataSetValue
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdataOrSetValue
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetPT_CT
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSetOldValue
</UL>
<BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Main
</UL>

<P><STRONG><a name="[af]"></a>GUI_Key_Menu</STRONG> (Thumb, 130 bytes, Stack size 12 bytes, taskledgui.o(i.GUI_Key_Menu))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = GUI_Key_Menu
</UL>
<BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Main
</UL>

<P><STRONG><a name="[b0]"></a>GUI_Key_MenuLong</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, taskledgui.o(i.GUI_Key_MenuLong))
<BR><BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Main
</UL>

<P><STRONG><a name="[a5]"></a>GUI_Key_Ok</STRONG> (Thumb, 484 bytes, Stack size 40 bytes, taskledgui.o(i.GUI_Key_Ok))
<BR><BR>[Stack]<UL><LI>Max Depth = 368 + Unknown Stack Size
<LI>Call Chain = GUI_Key_Ok &rArr; SaveParam &rArr; MemData_WriteParam &rArr; MemData_Write_To_Flash &rArr; FLASH_ProgramWord &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Configuration
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveParam
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PT_TimerDelay
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCH_Delete_Task
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Modebus_Init_T
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSetOldValue
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSetNewValue
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Main
</UL>

<P><STRONG><a name="[ac]"></a>GUI_Key_Up</STRONG> (Thumb, 756 bytes, Stack size 52 bytes, taskledgui.o(i.GUI_Key_Up))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = GUI_Key_Up &rArr; UpdataOrSetValue
</UL>
<BR>[Calls]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdataOrSetValue
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSetOldValue
</UL>
<BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Main
</UL>

<P><STRONG><a name="[ad]"></a>GUI_Main</STRONG> (Thumb, 112 bytes, Stack size 16 bytes, taskledgui.o(i.GUI_Main))
<BR><BR>[Stack]<UL><LI>Max Depth = 384 + Unknown Stack Size
<LI>Call Chain = GUI_Main &rArr; GUI_Key_Ok &rArr; SaveParam &rArr; MemData_WriteParam &rArr; MemData_Write_To_Flash &rArr; FLASH_ProgramWord &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyDiff
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Key_Up
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Key_Ok
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Key_MenuLong
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Key_Menu
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Key_Down
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Key_Default
</UL>
<BR>[Called By]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_GUI_Function
</UL>

<P><STRONG><a name="[b2]"></a>GUI_Timer_On</STRONG> (Thumb, 566 bytes, Stack size 32 bytes, taskledgui.o(i.GUI_Timer_On))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = GUI_Timer_On
</UL>
<BR>[Calls]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_Timer_Function
</UL>

<P><STRONG><a name="[a6]"></a>GetSetNewValue</STRONG> (Thumb, 804 bytes, Stack size 36 bytes, taskledgui.o(i.GetSetNewValue))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = GetSetNewValue &rArr; JudgeSetNewValue
</UL>
<BR>[Calls]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JudgeSetNewValue
</UL>
<BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Key_Ok
</UL>

<P><STRONG><a name="[a1]"></a>GetSetOldValue</STRONG> (Thumb, 372 bytes, Stack size 16 bytes, taskledgui.o(i.GetSetOldValue))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = GetSetOldValue
</UL>
<BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Key_Up
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Key_Ok
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Key_Down
</UL>

<P><STRONG><a name="[86]"></a>HT_Data_Index</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, drvled.o(i.HT_Data_Index))
<BR><BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispValue
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispSetPT
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispSetCT
</UL>

<P><STRONG><a name="[6]"></a>HardFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(i.HardFault_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[d3]"></a>InitCtrlParam</STRONG> (Thumb, 158 bytes, Stack size 0 bytes, param.o(i.InitCtrlParam))
<BR><BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemData_CmpParam
</UL>

<P><STRONG><a name="[b4]"></a>InitForFFT</STRONG> (Thumb, 86 bytes, Stack size 40 bytes, bsp_rn8302b.o(i.InitForFFT))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = InitForFFT &rArr; sin &rArr; __ieee754_rem_pio2 &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sin
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cos
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
</UL>
<BR>[Called By]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fnDl645Fft_Harmonic_Exec
</UL>

<P><STRONG><a name="[b9]"></a>InitRNParam</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, param.o(i.InitRNParam))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = InitRNParam
</UL>
<BR>[Calls]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitRNParam_Phase
</UL>
<BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RN8032_Adjust
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemData_CmpParam
</UL>

<P><STRONG><a name="[bb]"></a>InitRNParamToZero</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, param.o(i.InitRNParamToZero))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = InitRNParamToZero &rArr; InitRNParam_PhaseToZero
</UL>
<BR>[Calls]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitRNParam_PhaseToZero
</UL>
<BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RN8032_Adjust
</UL>

<P><STRONG><a name="[ba]"></a>InitRNParam_Phase</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, param.o(i.InitRNParam_Phase))
<BR><BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RN8032_Adjust
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitRNParam
</UL>

<P><STRONG><a name="[bc]"></a>InitRNParam_PhaseToZero</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, param.o(i.InitRNParam_PhaseToZero))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = InitRNParam_PhaseToZero
</UL>
<BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RN8032_Adjust
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitRNParamToZero
</UL>

<P><STRONG><a name="[b3]"></a>JudgeSetNewValue</STRONG> (Thumb, 36 bytes, Stack size 12 bytes, taskledgui.o(i.JudgeSetNewValue))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = JudgeSetNewValue
</UL>
<BR>[Called By]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vModeBus_Set_Ctrl_Parm
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSetNewValue
</UL>

<P><STRONG><a name="[be]"></a>KG_CancelJudge</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, taskprotect.o(i.KG_CancelJudge))
<BR><BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KG_ProtectRtn
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KG_JudgeOverHappen
</UL>

<P><STRONG><a name="[bd]"></a>KG_JudgeOverHappen</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, taskprotect.o(i.KG_JudgeOverHappen))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = KG_JudgeOverHappen &rArr; KG_ProtectHappen
</UL>
<BR>[Calls]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KG_ProtectRtn
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KG_ProtectHappen
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KG_CancelJudge
</UL>
<BR>[Called By]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Protect_AutoProc
</UL>

<P><STRONG><a name="[c0]"></a>KG_ProtectHappen</STRONG> (Thumb, 54 bytes, Stack size 24 bytes, taskprotect.o(i.KG_ProtectHappen))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = KG_ProtectHappen
</UL>
<BR>[Calls]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PT_TimerGet
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PT_TimerDiff
</UL>
<BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KG_JudgeOverHappen
</UL>

<P><STRONG><a name="[bf]"></a>KG_ProtectRtn</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, taskprotect.o(i.KG_ProtectRtn))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = KG_ProtectRtn
</UL>
<BR>[Calls]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KG_CancelJudge
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PT_TimerGet
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PT_TimerDiff
</UL>
<BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KG_JudgeOverHappen
</UL>

<P><STRONG><a name="[ae]"></a>KeyDiff</STRONG> (Thumb, 80 bytes, Stack size 0 bytes, taskledgui.o(i.KeyDiff))
<BR><BR>[Called By]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_GUI_init
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Main
</UL>

<P><STRONG><a name="[c3]"></a>KeyStatus</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, taskledgui.o(i.KeyStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = KeyStatus &rArr; OneKeyStaus
</UL>
<BR>[Calls]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadInputDataBit
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OneKeyStaus
</UL>
<BR>[Called By]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_Timer_Function
</UL>

<P><STRONG><a name="[c5]"></a>LineCalcFunc</STRONG> (Thumb, 470 bytes, Stack size 40 bytes, bsp_rn8302b.o(i.LineCalcFunc))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = LineCalcFunc &rArr; cos &rArr; __ieee754_rem_pio2 &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqrt_64fixed
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ul2d
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cos
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbnf
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2ulz
</UL>
<BR>[Called By]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RN8032_Updata
</UL>

<P><STRONG><a name="[cf]"></a>LoadParam</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, param.o(i.LoadParam))
<BR><BR>[Stack]<UL><LI>Max Depth = 600 + Unknown Stack Size
<LI>Call Chain = LoadParam &rArr; MemData_ReadParam &rArr; MemData_CmpParam &rArr; MemData_WriteParam &rArr; MemData_Write_To_Flash &rArr; FLASH_ProgramWord &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemData_ReadParam
</UL>
<BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[155]"></a>MSRS232_CRC</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, taskrs232.o(i.MSRS232_CRC))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = MSRS232_CRC
</UL>
<BR>[Called By]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vMSRS232_SetFrameData
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vMSRS232_RxProtocol
</UL>

<P><STRONG><a name="[d1]"></a>MemData_CmpParam</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, memdataoperate.o(i.MemData_CmpParam))
<BR><BR>[Stack]<UL><LI>Max Depth = 336 + Unknown Stack Size
<LI>Call Chain = MemData_CmpParam &rArr; MemData_WriteParam &rArr; MemData_Write_To_Flash &rArr; FLASH_ProgramWord &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemData_WriteParam
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitCtrlParam
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitRNParam
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemData_CmpParamType
</UL>
<BR>[Called By]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemData_ReadParam
</UL>

<P><STRONG><a name="[d2]"></a>MemData_CmpParamType</STRONG> (Thumb, 284 bytes, Stack size 0 bytes, memdataoperate.o(i.MemData_CmpParamType))
<BR><BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemData_CmpParam
</UL>

<P><STRONG><a name="[d5]"></a>MemData_Crc</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, memdataoperate.o(i.MemData_Crc))
<BR><BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemData_WriteParam
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemData_ReadParam
</UL>

<P><STRONG><a name="[d0]"></a>MemData_ReadParam</STRONG> (Thumb, 64 bytes, Stack size 264 bytes, memdataoperate.o(i.MemData_ReadParam))
<BR><BR>[Stack]<UL><LI>Max Depth = 600 + Unknown Stack Size
<LI>Call Chain = MemData_ReadParam &rArr; MemData_CmpParam &rArr; MemData_WriteParam &rArr; MemData_Write_To_Flash &rArr; FLASH_ProgramWord &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemData_WriteParam
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemData_Crc
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemData_CmpParam
</UL>
<BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadParam
</UL>

<P><STRONG><a name="[d4]"></a>MemData_WriteParam</STRONG> (Thumb, 58 bytes, Stack size 272 bytes, memdataoperate.o(i.MemData_WriteParam))
<BR><BR>[Stack]<UL><LI>Max Depth = 328 + Unknown Stack Size
<LI>Call Chain = MemData_WriteParam &rArr; MemData_Write_To_Flash &rArr; FLASH_ProgramWord &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemData_Write_To_Flash
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemData_Crc
</UL>
<BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveParam
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemData_ReadParam
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemData_CmpParam
</UL>

<P><STRONG><a name="[d6]"></a>MemData_Write_To_Flash</STRONG> (Thumb, 86 bytes, Stack size 24 bytes, memdataoperate.o(i.MemData_Write_To_Flash))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = MemData_Write_To_Flash &rArr; FLASH_ProgramWord &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Unlock
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ProgramWord
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Lock
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ErasePage
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ClearFlag
</UL>
<BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemData_WriteParam
</UL>

<P><STRONG><a name="[da]"></a>ModbusReceiveHandle</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, drvserial.o(i.ModbusReceiveHandle))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ModbusReceiveHandle
</UL>
<BR>[Calls]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PT_TimerGet
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PT_TimerDiff
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_PutDatatoRxBuf
</UL>
<BR>[Called By]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SERIAL_IRQHandler
</UL>

<P><STRONG><a name="[dc]"></a>Modbus_IRQHandler</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, sch.o(i.Modbus_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 640 + Unknown Stack Size
<LI>Call Chain = Modbus_IRQHandler &rArr; vMSRS232_RxProtocol &rArr; vMSRS232_Analysis &rArr; vMSRS232_Set_Adjust &rArr; RN8032_Adjust &rArr; RN8032_Updata &rArr; SaveParam &rArr; MemData_WriteParam &rArr; MemData_Write_To_Flash &rArr; FLASH_ProgramWord &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vMSRS232_RxProtocol
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ClearFlag
</UL>
<BR>[Called By]<UL><LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM2_IRQHandler
</UL>

<P><STRONG><a name="[aa]"></a>Modebus_Init_T</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, sch.o(i.Modebus_Init_T))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = Modebus_Init_T &rArr; TIM_TimeBaseInit
</UL>
<BR>[Calls]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TimeBaseInit
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Cmd
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ITConfig
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_DeInit
</UL>
<BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Key_Ok
</UL>

<P><STRONG><a name="[e3]"></a>MyI2C_GPIO_IN_Config</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, drvfram.o(i.MyI2C_GPIO_IN_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = MyI2C_GPIO_IN_Config &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MyI2C_SendByte
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MyI2C_ReceiveByte
</UL>

<P><STRONG><a name="[e4]"></a>MyI2C_GPIO_Out_Config</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, drvfram.o(i.MyI2C_GPIO_Out_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = MyI2C_GPIO_Out_Config &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MyI2C_Stop
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MyI2C_Start
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MyI2C_SendByte
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MyI2C_ReceiveByte
</UL>

<P><STRONG><a name="[96]"></a>MyI2C_ReceiveByte</STRONG> (Thumb, 110 bytes, Stack size 24 bytes, drvfram.o(i.MyI2C_ReceiveByte))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = MyI2C_ReceiveByte &rArr; MyI2C_GPIO_Out_Config &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MyI2C_GPIO_Out_Config
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MyI2C_GPIO_IN_Config
</UL>
<BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FRAM_I2C_ReadData
</UL>

<P><STRONG><a name="[94]"></a>MyI2C_SendByte</STRONG> (Thumb, 100 bytes, Stack size 24 bytes, drvfram.o(i.MyI2C_SendByte))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = MyI2C_SendByte &rArr; MyI2C_GPIO_Out_Config &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MyI2C_GPIO_Out_Config
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MyI2C_GPIO_IN_Config
</UL>
<BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FRAM_I2C_WriteData
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FRAM_I2C_ReadData
</UL>

<P><STRONG><a name="[93]"></a>MyI2C_Start</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, drvfram.o(i.MyI2C_Start))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = MyI2C_Start &rArr; MyI2C_GPIO_Out_Config &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MyI2C_GPIO_Out_Config
</UL>
<BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FRAM_I2C_WriteData
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FRAM_I2C_ReadData
</UL>

<P><STRONG><a name="[95]"></a>MyI2C_Stop</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, drvfram.o(i.MyI2C_Stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = MyI2C_Stop &rArr; MyI2C_GPIO_Out_Config &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MyI2C_GPIO_Out_Config
</UL>
<BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FRAM_I2C_WriteData
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FRAM_I2C_ReadData
</UL>

<P><STRONG><a name="[5]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(i.NMI_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[68]"></a>NVIC_Configuration</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, bsp.o(i.NVIC_Configuration))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = NVIC_Configuration &rArr; NVIC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_PriorityGroupConfig
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_Init
</UL>

<P><STRONG><a name="[e7]"></a>NVIC_Init</STRONG> (Thumb, 94 bytes, Stack size 12 bytes, misc.o(i.NVIC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = NVIC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Configuration
</UL>

<P><STRONG><a name="[e6]"></a>NVIC_PriorityGroupConfig</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, misc.o(i.NVIC_PriorityGroupConfig))
<BR><BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Configuration
</UL>

<P><STRONG><a name="[c4]"></a>OneKeyStaus</STRONG> (Thumb, 128 bytes, Stack size 16 bytes, taskledgui.o(i.OneKeyStaus))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = OneKeyStaus
</UL>
<BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyStatus
</UL>

<P><STRONG><a name="[e8]"></a>OutHandler_First</STRONG> (Thumb, 2148 bytes, Stack size 192 bytes, taskextra.o(i.OutHandler_First))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = OutHandler_First &rArr; Ddi_Protect_JudgeOverProtectHappen &rArr; svc_Protect_ProtectHappen
</UL>
<BR>[Calls]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ddi_Protect_JudgeOverProtectHappen
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ddi_Protect_JudgeLowProtectHappen
</UL>
<BR>[Called By]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_Extra_Function
</UL>

<P><STRONG><a name="[e9]"></a>OutHandler_Second</STRONG> (Thumb, 2150 bytes, Stack size 192 bytes, taskextra.o(i.OutHandler_Second))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = OutHandler_Second &rArr; Ddi_Protect_JudgeOverProtectHappen &rArr; svc_Protect_ProtectHappen
</UL>
<BR>[Calls]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ddi_Protect_JudgeOverProtectHappen
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ddi_Protect_JudgeLowProtectHappen
</UL>
<BR>[Called By]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_Extra_Function
</UL>

<P><STRONG><a name="[12f]"></a>OutStatus</STRONG> (Thumb, 48 bytes, Stack size 12 bytes, taskextra.o(i.OutStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = OutStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_Extra_Function
</UL>

<P><STRONG><a name="[a8]"></a>PT_TimerDelay</STRONG> (Thumb, 24 bytes, Stack size 4 bytes, pt_timer.o(i.PT_TimerDelay))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = PT_TimerDelay
</UL>
<BR>[Calls]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PT_TimerDiff
</UL>
<BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RN8032_Adjust
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vModeBus_Set_Ctrl_Parm
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_GUI_init
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Key_Ok
</UL>

<P><STRONG><a name="[c1]"></a>PT_TimerDiff</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, pt_timer.o(i.PT_TimerDiff))
<BR><BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PT_TimerDelay
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KG_ProtectRtn
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KG_ProtectHappen
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svc_Protect_ProtectRtn
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svc_Protect_ProtectHappen
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModbusReceiveHandle
</UL>

<P><STRONG><a name="[c2]"></a>PT_TimerGet</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, pt_timer.o(i.PT_TimerGet))
<BR><BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vMSRS232_RxProtocol
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KG_ProtectRtn
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KG_ProtectHappen
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svc_Protect_ProtectRtn
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svc_Protect_ProtectHappen
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModbusReceiveHandle
</UL>

<P><STRONG><a name="[11f]"></a>PT_TimerIncrement</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, pt_timer.o(i.PT_TimerIncrement))
<BR><BR>[Called By]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[c]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(i.PendSV_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[ea]"></a>Protect_AutoProc</STRONG> (Thumb, 254 bytes, Stack size 32 bytes, taskprotect.o(i.Protect_AutoProc))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = Protect_AutoProc &rArr; KG_JudgeOverHappen &rArr; KG_ProtectHappen
</UL>
<BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KG_JudgeOverHappen
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2uiz
</UL>
<BR>[Called By]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_Protect_Function
</UL>

<P><STRONG><a name="[ed]"></a>PwmPercentOutput_First</STRONG> (Thumb, 458 bytes, Stack size 40 bytes, taskextra.o(i.PwmPercentOutput_First))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = PwmPercentOutput_First &rArr; __aeabi_f2iz
</UL>
<BR>[Calls]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SetCompare4
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2iz
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_frsub
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbnf
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfrcmple
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
</UL>
<BR>[Called By]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_Extra_Function
</UL>

<P><STRONG><a name="[f1]"></a>PwmPercentOutput_Second</STRONG> (Thumb, 434 bytes, Stack size 40 bytes, taskextra.o(i.PwmPercentOutput_Second))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = PwmPercentOutput_Second &rArr; __aeabi_fdiv
</UL>
<BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SetCompare3
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_frsub
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbnf
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfrcmple
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2uiz
</UL>
<BR>[Called By]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_Extra_Function
</UL>

<P><STRONG><a name="[f5]"></a>RCC_AHBPeriphClockCmd</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_rcc.o(i.RCC_AHBPeriphClockCmd))
<BR><BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_Configuration
</UL>

<P><STRONG><a name="[f3]"></a>RCC_APB1PeriphClockCmd</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_rcc.o(i.RCC_APB1PeriphClockCmd))
<BR><BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_Configuration
</UL>

<P><STRONG><a name="[122]"></a>RCC_APB1PeriphResetCmd</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_rcc.o(i.RCC_APB1PeriphResetCmd))
<BR><BR>[Called By]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_DeInit
</UL>

<P><STRONG><a name="[f4]"></a>RCC_APB2PeriphClockCmd</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_rcc.o(i.RCC_APB2PeriphClockCmd))
<BR><BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_Configuration
</UL>

<P><STRONG><a name="[123]"></a>RCC_APB2PeriphResetCmd</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_rcc.o(i.RCC_APB2PeriphResetCmd))
<BR><BR>[Called By]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_DeInit
</UL>

<P><STRONG><a name="[66]"></a>RCC_Configuration</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, bsp.o(i.RCC_Configuration))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = RCC_Configuration
</UL>
<BR>[Calls]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHBPeriphClockCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_Init
</UL>

<P><STRONG><a name="[141]"></a>RCC_GetClocksFreq</STRONG> (Thumb, 132 bytes, Stack size 12 bytes, stm32f10x_rcc.o(i.RCC_GetClocksFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = RCC_GetClocksFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
</UL>

<P><STRONG><a name="[f6]"></a>RN8032_Adjust</STRONG> (Thumb, 610 bytes, Stack size 72 bytes, bsp_rn8302b.o(i.RN8032_Adjust))
<BR><BR>[Stack]<UL><LI>Max Depth = 472 + Unknown Stack Size
<LI>Call Chain = RN8032_Adjust &rArr; RN8032_Updata &rArr; SaveParam &rArr; MemData_WriteParam &rArr; MemData_Write_To_Flash &rArr; FLASH_ProgramWord &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveParam
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PT_TimerDelay
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteRNParam
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitRNParam_PhaseToZero
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitRNParam_Phase
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitRNParamToZero
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitRNParam
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RN8302InitAdjust
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RN8032_Updata
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RN8032_Adjust_U
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RN8032_Adjust_Section_I
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RN8032_Adjust_I
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RN8032_Adjust_Angle
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RN8302RD
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RN8302Init
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
</UL>
<BR>[Called By]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vMSRS232_Set_Adjust
</UL>

<P><STRONG><a name="[fc]"></a>RN8032_Adjust_Angle</STRONG> (Thumb, 450 bytes, Stack size 40 bytes, bsp_rn8302b.o(i.RN8032_Adjust_Angle))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = RN8032_Adjust_Angle &rArr; asin &rArr; sqrt &rArr; _dsqrt &rArr; __fpl_dnaninf
</UL>
<BR>[Calls]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RN8302RD
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2iz
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_frsub
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asin
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbnf
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
</UL>
<BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RN8032_Adjust
</UL>

<P><STRONG><a name="[fa]"></a>RN8032_Adjust_I</STRONG> (Thumb, 146 bytes, Stack size 16 bytes, bsp_rn8302b.o(i.RN8032_Adjust_I))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = RN8032_Adjust_I &rArr; RN8302RD &rArr; RN8302_RX_Frame &rArr; Spi_RN8302_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RN8302RD
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbnf
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2uiz
</UL>
<BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RN8032_Adjust
</UL>

<P><STRONG><a name="[fb]"></a>RN8032_Adjust_Section_I</STRONG> (Thumb, 178 bytes, Stack size 24 bytes, bsp_rn8302b.o(i.RN8032_Adjust_Section_I))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = RN8032_Adjust_Section_I &rArr; RN8302WR &rArr; RN8302_TX_Frame &rArr; Spi_RN8302_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RN8302WR
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RN8302RD
</UL>
<BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RN8032_Adjust
</UL>

<P><STRONG><a name="[f9]"></a>RN8032_Adjust_U</STRONG> (Thumb, 146 bytes, Stack size 16 bytes, bsp_rn8302b.o(i.RN8032_Adjust_U))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = RN8032_Adjust_U &rArr; RN8302RD &rArr; RN8302_RX_Frame &rArr; Spi_RN8302_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RN8302RD
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbnf
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2uiz
</UL>
<BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RN8032_Adjust
</UL>

<P><STRONG><a name="[f8]"></a>RN8032_Updata</STRONG> (Thumb, 4674 bytes, Stack size 72 bytes, bsp_rn8302b.o(i.RN8032_Updata))
<BR><BR>[Stack]<UL><LI>Max Depth = 400 + Unknown Stack Size
<LI>Call Chain = RN8032_Updata &rArr; SaveParam &rArr; MemData_WriteParam &rArr; MemData_Write_To_Flash &rArr; FLASH_ProgramWord &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveParam
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LineCalcFunc
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RN8302RD
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2iz
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ldivmod
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqrt
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbnf
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfrcmple
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfcmple
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_l2f
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ul2f
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2uiz
</UL>
<BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RN8032_Adjust
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_Power_Function
</UL>

<P><STRONG><a name="[f7]"></a>RN8302InitAdjust</STRONG> (Thumb, 184 bytes, Stack size 24 bytes, bsp_rn8302b.o(i.RN8302InitAdjust))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = RN8302InitAdjust &rArr; RN8302WR &rArr; RN8302_TX_Frame &rArr; Spi_RN8302_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RN8302WR
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RN8302RD
</UL>
<BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RN8032_Adjust
</UL>

<P><STRONG><a name="[108]"></a>RN8302RDBUFF</STRONG> (Thumb, 194 bytes, Stack size 32 bytes, bsp_rn8302b.o(i.RN8302RDBUFF))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = RN8302RDBUFF &rArr; Spi_RN8302_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Spi_RN8302_SendByte
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Spi_RN8302_ReadByte
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fnDl645Fft_Harmonic_Exec
</UL>

<P><STRONG><a name="[14d]"></a>SCH_Add_Task</STRONG> (Thumb, 54 bytes, Stack size 12 bytes, sch.o(i.SCH_Add_Task))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = SCH_Add_Task
</UL>
<BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[ab]"></a>SCH_Delete_Task</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, sch.o(i.SCH_Delete_Task))
<BR><BR>[Called By]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCH_RUN_Tasks
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCH_Init_T
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Key_Ok
</UL>

<P><STRONG><a name="[10c]"></a>SCH_Init_T</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, sch.o(i.SCH_Init_T))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = SCH_Init_T &rArr; TIM_TimeBaseInit
</UL>
<BR>[Calls]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TimeBaseInit
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCH_Delete_Task
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_DeInit
</UL>
<BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[10d]"></a>SCH_RUN_Tasks</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, sch.o(i.SCH_RUN_Tasks))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SCH_RUN_Tasks
</UL>
<BR>[Calls]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCH_Delete_Task
</UL>
<BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[10e]"></a>SCH_Start</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, sch.o(i.SCH_Start))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SCH_Start
</UL>
<BR>[Calls]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Cmd
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ITConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[10f]"></a>SERIAL_IRQHandler</STRONG> (Thumb, 144 bytes, Stack size 16 bytes, drvserial.o(i.SERIAL_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = SERIAL_IRQHandler &rArr; USART_GetITStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_SendData
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ReceiveData
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetITStatus
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetFlagStatus
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ClearITPendingBit
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ClearFlag
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_PutDatatoRxBuf
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_IsDataInTxBuf
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetTxBufData
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UASRT_StopSend
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModbusReceiveHandle
</UL>
<BR>[Called By]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
</UL>

<P><STRONG><a name="[119]"></a>SIGNAL_IRQHandler</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, sch.o(i.SIGNAL_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SIGNAL_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_GetITStatus
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ClearITPendingBit
</UL>
<BR>[Called By]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM3_IRQHandler
</UL>

<P><STRONG><a name="[a]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(i.SVC_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[11c]"></a>SampleDataModifyF</STRONG> (Thumb, 86 bytes, Stack size 24 bytes, bsp_rn8302b.o(i.SampleDataModifyF))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = SampleDataModifyF &rArr; __aeabi_fmul
</UL>
<BR>[Calls]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbnf
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
</UL>
<BR>[Called By]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fnDl645Fft_Harmonic_Exec
</UL>

<P><STRONG><a name="[a9]"></a>SaveParam</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, param.o(i.SaveParam))
<BR><BR>[Stack]<UL><LI>Max Depth = 328 + Unknown Stack Size
<LI>Call Chain = SaveParam &rArr; MemData_WriteParam &rArr; MemData_Write_To_Flash &rArr; FLASH_ProgramWord &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemData_WriteParam
</UL>
<BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RN8032_Adjust
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vModeBus_Set_Ctrl_Parm
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RN8032_Updata
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Key_Ok
</UL>

<P><STRONG><a name="[a3]"></a>SetPT_CT</STRONG> (Thumb, 268 bytes, Stack size 28 bytes, taskledgui.o(i.SetPT_CT))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = SetPT_CT
</UL>
<BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Key_Down
</UL>

<P><STRONG><a name="[10a]"></a>Spi_RN8302_ReadByte</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, bsp_rn8302b.o(i.Spi_RN8302_ReadByte))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Spi_RN8302_ReadByte
</UL>
<BR>[Calls]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadInputDataBit
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_nop
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RN8302RDBUFF
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RN8302_TX_Frame
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RN8302_RX_Frame
</UL>

<P><STRONG><a name="[109]"></a>Spi_RN8302_SendByte</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, bsp_rn8302b.o(i.Spi_RN8302_SendByte))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Spi_RN8302_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_nop
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RN8302RDBUFF
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RN8302_TX_Frame
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RN8302_RX_Frame
</UL>

<P><STRONG><a name="[11e]"></a>SysTick_CLKSourceConfig</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, misc.o(i.SysTick_CLKSourceConfig))
<BR><BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Configuration
</UL>

<P><STRONG><a name="[69]"></a>SysTick_Configuration</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, bsp.o(i.SysTick_Configuration))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SysTick_Configuration
</UL>
<BR>[Calls]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_CLKSourceConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_Init
</UL>

<P><STRONG><a name="[d]"></a>SysTick_Handler</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, stm32f10x_it.o(i.SysTick_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = SysTick_Handler &rArr; Task_Timer_Function &rArr; KeyStatus &rArr; OneKeyStaus
</UL>
<BR>[Calls]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_Timer_Function
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PT_TimerIncrement
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[39]"></a>SystemInit</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, system_stm32f10x.o(i.SystemInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = SystemInit &rArr; SetSysClockTo72
</UL>
<BR>[Calls]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSysClockTo72
</UL>
<BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_Init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(.text)
</UL>
<P><STRONG><a name="[2a]"></a>TIM2_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_it.o(i.TIM2_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 640 + Unknown Stack Size
<LI>Call Chain = TIM2_IRQHandler &rArr; Modbus_IRQHandler &rArr; vMSRS232_RxProtocol &rArr; vMSRS232_Analysis &rArr; vMSRS232_Set_Adjust &rArr; RN8032_Adjust &rArr; RN8032_Updata &rArr; SaveParam &rArr; MemData_WriteParam &rArr; MemData_Write_To_Flash &rArr; FLASH_ProgramWord &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Modbus_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[2b]"></a>TIM3_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_it.o(i.TIM3_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TIM3_IRQHandler &rArr; SIGNAL_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIGNAL_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[129]"></a>TIM_ARRPreloadConfig</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f10x_tim.o(i.TIM_ARRPreloadConfig))
<BR><BR>[Called By]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_PWM_Configuration
</UL>

<P><STRONG><a name="[de]"></a>TIM_ClearFlag</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_tim.o(i.TIM_ClearFlag))
<BR><BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Modbus_IRQHandler
</UL>

<P><STRONG><a name="[11b]"></a>TIM_ClearITPendingBit</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_tim.o(i.TIM_ClearITPendingBit))
<BR><BR>[Called By]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIGNAL_IRQHandler
</UL>

<P><STRONG><a name="[e1]"></a>TIM_Cmd</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f10x_tim.o(i.TIM_Cmd))
<BR><BR>[Called By]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_PWM_Configuration
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCH_Start
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Modebus_Init_T
</UL>

<P><STRONG><a name="[12a]"></a>TIM_CtrlPWMOutputs</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f10x_tim.o(i.TIM_CtrlPWMOutputs))
<BR><BR>[Called By]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_PWM_Configuration
</UL>

<P><STRONG><a name="[df]"></a>TIM_DeInit</STRONG> (Thumb, 304 bytes, Stack size 8 bytes, stm32f10x_tim.o(i.TIM_DeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TIM_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphResetCmd
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphResetCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCH_Init_T
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Modebus_Init_T
</UL>

<P><STRONG><a name="[11a]"></a>TIM_GetITStatus</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_tim.o(i.TIM_GetITStatus))
<BR><BR>[Called By]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIGNAL_IRQHandler
</UL>

<P><STRONG><a name="[e2]"></a>TIM_ITConfig</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f10x_tim.o(i.TIM_ITConfig))
<BR><BR>[Called By]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCH_Start
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Modebus_Init_T
</UL>

<P><STRONG><a name="[127]"></a>TIM_OC3Init</STRONG> (Thumb, 116 bytes, Stack size 16 bytes, stm32f10x_tim.o(i.TIM_OC3Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TIM_OC3Init
</UL>
<BR>[Called By]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_PWM_Configuration
</UL>

<P><STRONG><a name="[128]"></a>TIM_OC3PreloadConfig</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f10x_tim.o(i.TIM_OC3PreloadConfig))
<BR><BR>[Called By]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_PWM_Configuration
</UL>

<P><STRONG><a name="[125]"></a>TIM_OC4Init</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, stm32f10x_tim.o(i.TIM_OC4Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TIM_OC4Init
</UL>
<BR>[Called By]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_PWM_Configuration
</UL>

<P><STRONG><a name="[126]"></a>TIM_OC4PreloadConfig</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f10x_tim.o(i.TIM_OC4PreloadConfig))
<BR><BR>[Called By]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_PWM_Configuration
</UL>

<P><STRONG><a name="[124]"></a>TIM_PWM_Configuration</STRONG> (Thumb, 206 bytes, Stack size 32 bytes, bsp.o(i.TIM_PWM_Configuration))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = TIM_PWM_Configuration &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TimeBaseInit
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC4PreloadConfig
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC4Init
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC3PreloadConfig
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC3Init
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_CtrlPWMOutputs
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Cmd
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ARRPreloadConfig
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_Extra_Function
</UL>

<P><STRONG><a name="[f2]"></a>TIM_SetCompare3</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_tim.o(i.TIM_SetCompare3))
<BR><BR>[Called By]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vMSRS232_Set_Adjust
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PwmPercentOutput_Second
</UL>

<P><STRONG><a name="[f0]"></a>TIM_SetCompare4</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_tim.o(i.TIM_SetCompare4))
<BR><BR>[Called By]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vMSRS232_Set_Adjust
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PwmPercentOutput_First
</UL>

<P><STRONG><a name="[e0]"></a>TIM_TimeBaseInit</STRONG> (Thumb, 114 bytes, Stack size 12 bytes, stm32f10x_tim.o(i.TIM_TimeBaseInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = TIM_TimeBaseInit
</UL>
<BR>[Called By]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_PWM_Configuration
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCH_Init_T
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Modebus_Init_T
</UL>

<P><STRONG><a name="[12b]"></a>TM1640_End</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, drvled.o(i.TM1640_End))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TM1640_End
</UL>
<BR>[Calls]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM1640_delay
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Update_screen
</UL>

<P><STRONG><a name="[12d]"></a>TM1640_I2C_WrByte</STRONG> (Thumb, 78 bytes, Stack size 24 bytes, drvled.o(i.TM1640_I2C_WrByte))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = TM1640_I2C_WrByte
</UL>
<BR>[Calls]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM1640_delay
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Update_screen
</UL>

<P><STRONG><a name="[12e]"></a>TM1640_Start</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, drvled.o(i.TM1640_Start))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TM1640_Start
</UL>
<BR>[Calls]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM1640_delay
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Update_screen
</UL>

<P><STRONG><a name="[12c]"></a>TM1640_delay</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, drvled.o(i.TM1640_delay))
<BR><BR>[Called By]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM1640_Start
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM1640_I2C_WrByte
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM1640_End
</UL>

<P><STRONG><a name="[3e]"></a>Task_Extra_Function</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, taskextra.o(i.Task_Extra_Function))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = Task_Extra_Function &rArr; OutHandler_Second &rArr; Ddi_Protect_JudgeOverProtectHappen &rArr; svc_Protect_ProtectHappen
</UL>
<BR>[Calls]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_PWM_Configuration
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PwmPercentOutput_Second
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PwmPercentOutput_First
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OutStatus
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OutHandler_Second
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OutHandler_First
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DinStatus
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sysmain.o(i.main)
</UL>
<P><STRONG><a name="[3f]"></a>Task_GUI_Function</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, taskledgui.o(i.Task_GUI_Function))
<BR><BR>[Stack]<UL><LI>Max Depth = 392 + Unknown Stack Size
<LI>Call Chain = Task_GUI_Function &rArr; GUI_Main &rArr; GUI_Key_Ok &rArr; SaveParam &rArr; MemData_WriteParam &rArr; MemData_Write_To_Flash &rArr; FLASH_ProgramWord &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Update_screen
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Main
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sysmain.o(i.main)
</UL>
<P><STRONG><a name="[131]"></a>Task_GUI_init</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, taskledgui.o(i.Task_GUI_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = Task_GUI_init &rArr; Update_screen &rArr; TM1640_I2C_WrByte
</UL>
<BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PT_TimerDelay
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Update_screen
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyDiff
</UL>
<BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[3c]"></a>Task_Power_Function</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, bsp_rn8302b.o(i.Task_Power_Function))
<BR><BR>[Stack]<UL><LI>Max Depth = 408 + Unknown Stack Size
<LI>Call Chain = Task_Power_Function &rArr; RN8032_Updata &rArr; SaveParam &rArr; MemData_WriteParam &rArr; MemData_Write_To_Flash &rArr; FLASH_ProgramWord &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FRAM_WriteData
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fnDl645Fft_Harmonic_Exec
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RN8032_Updata
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sysmain.o(i.main)
</UL>
<P><STRONG><a name="[3d]"></a>Task_Protect_Function</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, taskprotect.o(i.Task_Protect_Function))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = Task_Protect_Function &rArr; Protect_AutoProc &rArr; KG_JudgeOverHappen &rArr; KG_ProtectHappen
</UL>
<BR>[Calls]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Protect_AutoProc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sysmain.o(i.main)
</UL>
<P><STRONG><a name="[3b]"></a>Task_RS232_Function</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, taskrs232.o(i.Task_RS232_Function))
<BR><BR>[Stack]<UL><LI>Max Depth = 632 + Unknown Stack Size
<LI>Call Chain = Task_RS232_Function &rArr; vMSRS232_RxProtocol &rArr; vMSRS232_Analysis &rArr; vMSRS232_Set_Adjust &rArr; RN8032_Adjust &rArr; RN8032_Updata &rArr; SaveParam &rArr; MemData_WriteParam &rArr; MemData_Write_To_Flash &rArr; FLASH_ProgramWord &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vMSRS232_RxProtocol
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sysmain.o(i.main)
</UL>
<P><STRONG><a name="[133]"></a>Task_RS232_init</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, taskrs232.o(i.Task_RS232_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Task_RS232_init
</UL>
<BR>[Calls]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vMSRS232_RxProtocol
</UL>

<P><STRONG><a name="[120]"></a>Task_Timer_Function</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, taskledgui.o(i.Task_Timer_Function))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Task_Timer_Function &rArr; KeyStatus &rArr; OneKeyStaus
</UL>
<BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyStatus
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Timer_On
</UL>
<BR>[Called By]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[114]"></a>UASRT_StopSend</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, drvserial.o(i.UASRT_StopSend))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = UASRT_StopSend &rArr; USART_ITConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ITConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SERIAL_IRQHandler
</UL>

<P><STRONG><a name="[33]"></a>USART1_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_it.o(i.USART1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = USART1_IRQHandler &rArr; SERIAL_IRQHandler &rArr; USART_GetITStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SERIAL_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[116]"></a>USART_ClearFlag</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_usart.o(i.USART_ClearFlag))
<BR><BR>[Called By]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_DMAReConfig
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SERIAL_IRQHandler
</UL>

<P><STRONG><a name="[112]"></a>USART_ClearITPendingBit</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f10x_usart.o(i.USART_ClearITPendingBit))
<BR><BR>[Called By]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SERIAL_IRQHandler
</UL>

<P><STRONG><a name="[137]"></a>USART_ClockInit</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, stm32f10x_usart.o(i.USART_ClockInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USART_ClockInit
</UL>
<BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Configuration
</UL>

<P><STRONG><a name="[13c]"></a>USART_Cmd</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f10x_usart.o(i.USART_Cmd))
<BR><BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Configuration
</UL>

<P><STRONG><a name="[a7]"></a>USART_Configuration</STRONG> (Thumb, 254 bytes, Stack size 48 bytes, bsp.o(i.USART_Configuration))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = USART_Configuration &rArr; USART_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_DMACmd
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Cmd
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ClockInit
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Init
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_DeInit
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Cmd
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ITConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vModeBus_Set_Ctrl_Parm
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Key_Ok
</UL>

<P><STRONG><a name="[13b]"></a>USART_DMACmd</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f10x_usart.o(i.USART_DMACmd))
<BR><BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Configuration
</UL>

<P><STRONG><a name="[13d]"></a>USART_DMAReConfig</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, bsp.o(i.USART_DMAReConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = USART_DMAReConfig &rArr; DMA_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Init
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_DeInit
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Cmd
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ClearFlag
</UL>
<BR>[Called By]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vModeBus_SetFrameData
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vMSRS232_SetFrameData
</UL>

<P><STRONG><a name="[115]"></a>USART_GetFlagStatus</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f10x_usart.o(i.USART_GetFlagStatus))
<BR><BR>[Called By]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SERIAL_IRQHandler
</UL>

<P><STRONG><a name="[110]"></a>USART_GetITStatus</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, stm32f10x_usart.o(i.USART_GetITStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USART_GetITStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SERIAL_IRQHandler
</UL>

<P><STRONG><a name="[140]"></a>USART_GetRxBufData</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, drvserial.o(i.USART_GetRxBufData))
<BR><BR>[Called By]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetRxString
</UL>

<P><STRONG><a name="[13f]"></a>USART_GetRxBufLen</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, drvserial.o(i.USART_GetRxBufLen))
<BR><BR>[Called By]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetRxString
</UL>

<P><STRONG><a name="[13e]"></a>USART_GetRxString</STRONG> (Thumb, 38 bytes, Stack size 12 bytes, drvserial.o(i.USART_GetRxString))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = USART_GetRxString
</UL>
<BR>[Calls]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetRxBufLen
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetRxBufData
</UL>
<BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vMSRS232_RxProtocol
</UL>

<P><STRONG><a name="[117]"></a>USART_GetTxBufData</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, drvserial.o(i.USART_GetTxBufData))
<BR><BR>[Called By]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SERIAL_IRQHandler
</UL>

<P><STRONG><a name="[135]"></a>USART_ITConfig</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, stm32f10x_usart.o(i.USART_ITConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USART_ITConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Configuration
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UASRT_StopSend
</UL>

<P><STRONG><a name="[136]"></a>USART_Init</STRONG> (Thumb, 166 bytes, Stack size 32 bytes, stm32f10x_usart.o(i.USART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = USART_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetClocksFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Configuration
</UL>

<P><STRONG><a name="[113]"></a>USART_IsDataInTxBuf</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, drvserial.o(i.USART_IsDataInTxBuf))
<BR><BR>[Called By]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SERIAL_IRQHandler
</UL>

<P><STRONG><a name="[db]"></a>USART_PutDatatoRxBuf</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, drvserial.o(i.USART_PutDatatoRxBuf))
<BR><BR>[Called By]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SERIAL_IRQHandler
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModbusReceiveHandle
</UL>

<P><STRONG><a name="[111]"></a>USART_ReceiveData</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f10x_usart.o(i.USART_ReceiveData))
<BR><BR>[Called By]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SERIAL_IRQHandler
</UL>

<P><STRONG><a name="[118]"></a>USART_SendData</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f10x_usart.o(i.USART_SendData))
<BR><BR>[Called By]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SERIAL_IRQHandler
</UL>

<P><STRONG><a name="[a4]"></a>UpdataOrSetValue</STRONG> (Thumb, 276 bytes, Stack size 32 bytes, taskledgui.o(i.UpdataOrSetValue))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = UpdataOrSetValue
</UL>
<BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Key_Up
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Key_Down
</UL>

<P><STRONG><a name="[a2]"></a>UpdataSetValue</STRONG> (Thumb, 228 bytes, Stack size 24 bytes, taskledgui.o(i.UpdataSetValue))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = UpdataSetValue
</UL>
<BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Key_Down
</UL>

<P><STRONG><a name="[130]"></a>Update_screen</STRONG> (Thumb, 116 bytes, Stack size 16 bytes, drvled.o(i.Update_screen))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Update_screen &rArr; TM1640_I2C_WrByte
</UL>
<BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM1640_Start
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM1640_I2C_WrByte
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM1640_End
</UL>
<BR>[Called By]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_GUI_init
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_GUI_Function
</UL>

<P><STRONG><a name="[fd]"></a>WriteRNParam</STRONG> (Thumb, 242 bytes, Stack size 0 bytes, param.o(i.WriteRNParam))
<BR><BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RN8032_Adjust
</UL>

<P><STRONG><a name="[147]"></a>__ARM_fpclassify</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, fpclassify.o(i.__ARM_fpclassify))
<BR><BR>[Called By]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asin
</UL>

<P><STRONG><a name="[142]"></a>__ieee754_rem_pio2</STRONG> (Thumb, 828 bytes, Stack size 128 bytes, rred.o(i.__ieee754_rem_pio2))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = __ieee754_rem_pio2 &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
</UL>
<BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sin
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cos
</UL>

<P><STRONG><a name="[144]"></a>__kernel_cos</STRONG> (Thumb, 230 bytes, Stack size 48 bytes, cos_i.o(i.__kernel_cos))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = __kernel_cos &rArr; __kernel_poly &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
</UL>
<BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sin
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cos
</UL>

<P><STRONG><a name="[145]"></a>__kernel_poly</STRONG> (Thumb, 170 bytes, Stack size 24 bytes, poly.o(i.__kernel_poly))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = __kernel_poly &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_cos
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asin
</UL>

<P><STRONG><a name="[146]"></a>__kernel_sin</STRONG> (Thumb, 224 bytes, Stack size 64 bytes, sin_i.o(i.__kernel_sin))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = __kernel_sin &rArr; __kernel_poly &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassify
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_underflow
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
</UL>
<BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sin
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cos
</UL>

<P><STRONG><a name="[149]"></a>__mathlib_dbl_infnan</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dunder.o(i.__mathlib_dbl_infnan))
<BR><BR>[Calls]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
</UL>
<BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sin
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cos
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asin
</UL>

<P><STRONG><a name="[14a]"></a>__mathlib_dbl_invalid</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, dunder.o(i.__mathlib_dbl_invalid))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __mathlib_dbl_invalid &rArr; __aeabi_ddiv
</UL>
<BR>[Calls]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
</UL>
<BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sin
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cos
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asin
</UL>

<P><STRONG><a name="[148]"></a>__mathlib_dbl_underflow</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, dunder.o(i.__mathlib_dbl_underflow))
<BR><BR>[Calls]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
</UL>
<BR>[Called By]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asin
</UL>

<P><STRONG><a name="[100]"></a>asin</STRONG> (Thumb, 572 bytes, Stack size 56 bytes, asin.o(i.asin))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = asin &rArr; sqrt &rArr; _dsqrt &rArr; __fpl_dnaninf
</UL>
<BR>[Calls]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassify
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_underflow
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_invalid
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_infnan
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqrt
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
</UL>
<BR>[Called By]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RN8032_Adjust_Angle
</UL>

<P><STRONG><a name="[14b]"></a>bsp_InitRN8023</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, bsp_rn8302b.o(i.bsp_InitRN8023))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = bsp_InitRN8023 &rArr; RN8302Init &rArr; RN8302WR &rArr; RN8302_TX_Frame &rArr; Spi_RN8302_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RN8302Init
</UL>
<BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[b8]"></a>cos</STRONG> (Thumb, 148 bytes, Stack size 32 bytes, cos.o(i.cos))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = cos &rArr; __ieee754_rem_pio2 &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_invalid
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_infnan
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_cos
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
</UL>
<BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LineCalcFunc
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitForFFT
</UL>

<P><STRONG><a name="[e5]"></a>delay_us</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, drvfram.o(i.delay_us))
<BR><BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MyI2C_Stop
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MyI2C_Start
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MyI2C_SendByte
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MyI2C_ReceiveByte
</UL>

<P><STRONG><a name="[14c]"></a>fnDl645Fft_DataCmp</STRONG> (Thumb, 138 bytes, Stack size 20 bytes, bsp_rn8302b.o(i.fnDl645Fft_DataCmp))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = fnDl645Fft_DataCmp
</UL>
<BR>[Called By]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fnDl645Fft_Harmonic_Exec
</UL>

<P><STRONG><a name="[132]"></a>fnDl645Fft_Harmonic_Exec</STRONG> (Thumb, 398 bytes, Stack size 40 bytes, bsp_rn8302b.o(i.fnDl645Fft_Harmonic_Exec))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = fnDl645Fft_Harmonic_Exec &rArr; InitForFFT &rArr; sin &rArr; __ieee754_rem_pio2 &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fnDl645Fft_DataCmp
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SampleDataModifyF
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RN8302RDBUFF
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitForFFT
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FFT
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RN8302WR
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RN8302RD
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqrt
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
</UL>
<BR>[Called By]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_Power_Function
</UL>

<P><STRONG><a name="[51]"></a>main</STRONG> (Thumb, 122 bytes, Stack size 0 bytes, sysmain.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 600 + Unknown Stack Size
<LI>Call Chain = main &rArr; LoadParam &rArr; MemData_ReadParam &rArr; MemData_CmpParam &rArr; MemData_WriteParam &rArr; MemData_Write_To_Flash &rArr; FLASH_ProgramWord &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Configuration
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PT_TimerDelay
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCH_Start
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCH_RUN_Tasks
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCH_Init_T
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCH_Add_Task
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_Init
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadParam
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FRAM_ReadData
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_InitRN8023
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCH_Delete_Task
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Modebus_Init_T
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_GUI_init
</UL>
<BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[b6]"></a>sin</STRONG> (Thumb, 150 bytes, Stack size 32 bytes, sin.o(i.sin))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = sin &rArr; __ieee754_rem_pio2 &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_invalid
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_infnan
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_cos
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
</UL>
<BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitForFFT
</UL>

<P><STRONG><a name="[11d]"></a>spi_nop</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, bsp_rn8302b.o(i.spi_nop))
<BR><BR>[Called By]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Spi_RN8302_SendByte
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Spi_RN8302_ReadByte
</UL>

<P><STRONG><a name="[104]"></a>sqrt</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, sqrt.o(i.sqrt))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = sqrt &rArr; _dsqrt &rArr; __fpl_dnaninf
</UL>
<BR>[Calls]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsqrt
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
</UL>
<BR>[Called By]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fnDl645Fft_Harmonic_Exec
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RN8032_Updata
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asin
</UL>

<P><STRONG><a name="[cd]"></a>sqrt_64fixed</STRONG> (Thumb, 64 bytes, Stack size 20 bytes, bsp_rn8302b.o(i.sqrt_64fixed))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = sqrt_64fixed
</UL>
<BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LineCalcFunc
</UL>

<P><STRONG><a name="[6d]"></a>svc_Protect_CancelJudge</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, taskextra.o(i.svc_Protect_CancelJudge))
<BR><BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svc_Protect_ProtectRtn
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ddi_Protect_JudgeOverProtectHappen
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ddi_Protect_JudgeLowProtectHappen
</UL>

<P><STRONG><a name="[6f]"></a>svc_Protect_ProtectHappen</STRONG> (Thumb, 54 bytes, Stack size 24 bytes, taskextra.o(i.svc_Protect_ProtectHappen))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = svc_Protect_ProtectHappen
</UL>
<BR>[Calls]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PT_TimerGet
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PT_TimerDiff
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ddi_Protect_JudgeOverProtectHappen
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ddi_Protect_JudgeLowProtectHappen
</UL>

<P><STRONG><a name="[6e]"></a>svc_Protect_ProtectRtn</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, taskextra.o(i.svc_Protect_ProtectRtn))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = svc_Protect_ProtectRtn
</UL>
<BR>[Calls]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PT_TimerGet
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PT_TimerDiff
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svc_Protect_CancelJudge
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ddi_Protect_JudgeOverProtectHappen
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ddi_Protect_JudgeLowProtectHappen
</UL>

<P><STRONG><a name="[156]"></a>usMBCRC16</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, taskrs232.o(i.usMBCRC16))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = usMBCRC16
</UL>
<BR>[Called By]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vModeBus_SetFrameData
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vMSRS232_RxProtocol
</UL>

<P><STRONG><a name="[14f]"></a>vMSRS232_Analysis</STRONG> (Thumb, 134 bytes, Stack size 16 bytes, taskrs232.o(i.vMSRS232_Analysis))
<BR><BR>[Stack]<UL><LI>Max Depth = 600 + Unknown Stack Size
<LI>Call Chain = vMSRS232_Analysis &rArr; vMSRS232_Set_Adjust &rArr; RN8032_Adjust &rArr; RN8032_Updata &rArr; SaveParam &rArr; MemData_WriteParam &rArr; MemData_Write_To_Flash &rArr; FLASH_ProgramWord &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vMSRS232_Set_Adjust
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vMSRS232_SetFrameData
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vMSRS232_Query_Power
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vMSRS232_Query_Param
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vMSRS232_Query_Adjust
</UL>
<BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vMSRS232_RxProtocol
</UL>

<P><STRONG><a name="[151]"></a>vMSRS232_Query_Adjust</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, taskrs232.o(i.vMSRS232_Query_Adjust))
<BR><BR>[Calls]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vMSRS232_Analysis
</UL>

<P><STRONG><a name="[152]"></a>vMSRS232_Query_Param</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, taskrs232.o(i.vMSRS232_Query_Param))
<BR><BR>[Calls]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vMSRS232_Analysis
</UL>

<P><STRONG><a name="[153]"></a>vMSRS232_Query_Power</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, taskrs232.o(i.vMSRS232_Query_Power))
<BR><BR>[Calls]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vMSRS232_Analysis
</UL>

<P><STRONG><a name="[dd]"></a>vMSRS232_RxProtocol</STRONG> (Thumb, 522 bytes, Stack size 32 bytes, taskrs232.o(i.vMSRS232_RxProtocol))
<BR><BR>[Stack]<UL><LI>Max Depth = 632 + Unknown Stack Size
<LI>Call Chain = vMSRS232_RxProtocol &rArr; vMSRS232_Analysis &rArr; vMSRS232_Set_Adjust &rArr; RN8032_Adjust &rArr; RN8032_Updata &rArr; SaveParam &rArr; MemData_WriteParam &rArr; MemData_Write_To_Flash &rArr; FLASH_ProgramWord &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetRxString
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vModeBusRtu_Analysis
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vMSRS232_Analysis
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usMBCRC16
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_RS232_init
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSRS232_CRC
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PT_TimerGet
</UL>
<BR>[Called By]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_RS232_Function
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Modbus_IRQHandler
</UL>

<P><STRONG><a name="[154]"></a>vMSRS232_SetFrameData</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, taskrs232.o(i.vMSRS232_SetFrameData))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = vMSRS232_SetFrameData &rArr; USART_DMAReConfig &rArr; DMA_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_DMAReConfig
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSRS232_CRC
</UL>
<BR>[Called By]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vMSRS232_Analysis
</UL>

<P><STRONG><a name="[150]"></a>vMSRS232_Set_Adjust</STRONG> (Thumb, 380 bytes, Stack size 112 bytes, taskrs232.o(i.vMSRS232_Set_Adjust))
<BR><BR>[Stack]<UL><LI>Max Depth = 584 + Unknown Stack Size
<LI>Call Chain = vMSRS232_Set_Adjust &rArr; RN8032_Adjust &rArr; RN8032_Updata &rArr; SaveParam &rArr; MemData_WriteParam &rArr; MemData_Write_To_Flash &rArr; FLASH_ProgramWord &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RN8032_Adjust
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SetCompare4
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SetCompare3
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vMSRS232_Analysis
</UL>

<P><STRONG><a name="[157]"></a>vModeBusRtu_Analysis</STRONG> (Thumb, 354 bytes, Stack size 24 bytes, taskrs232.o(i.vModeBusRtu_Analysis))
<BR><BR>[Stack]<UL><LI>Max Depth = 400 + Unknown Stack Size
<LI>Call Chain = vModeBusRtu_Analysis &rArr; vModeBus_Set_Ctrl_Parm &rArr; SaveParam &rArr; MemData_WriteParam &rArr; MemData_Write_To_Flash &rArr; FLASH_ProgramWord &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vModeBus_Set_Relay
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vModeBus_Set_Multi_Relay
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vModeBus_Set_Ctrl_Parm
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vModeBus_SetFrameData
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vModeBus_Query_THD
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vModeBus_Query_Secondary
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vModeBus_Query_Primary
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vModeBus_Query_CTRL
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vMSRS232_RxProtocol
</UL>

<P><STRONG><a name="[15c]"></a>vModeBus_Query_CTRL</STRONG> (Thumb, 206 bytes, Stack size 0 bytes, taskrs232.o(i.vModeBus_Query_CTRL))
<BR><BR>[Called By]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vModeBusRtu_Analysis
</UL>

<P><STRONG><a name="[159]"></a>vModeBus_Query_Primary</STRONG> (Thumb, 94 bytes, Stack size 168 bytes, taskrs232.o(i.vModeBus_Query_Primary))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = vModeBus_Query_Primary
</UL>
<BR>[Calls]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vModeBusRtu_Analysis
</UL>

<P><STRONG><a name="[15a]"></a>vModeBus_Query_Secondary</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, taskrs232.o(i.vModeBus_Query_Secondary))
<BR><BR>[Called By]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vModeBusRtu_Analysis
</UL>

<P><STRONG><a name="[15b]"></a>vModeBus_Query_THD</STRONG> (Thumb, 206 bytes, Stack size 32 bytes, taskrs232.o(i.vModeBus_Query_THD))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = vModeBus_Query_THD &rArr; __aeabi_f2iz
</UL>
<BR>[Calls]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2iz
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
</UL>
<BR>[Called By]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vModeBusRtu_Analysis
</UL>

<P><STRONG><a name="[158]"></a>vModeBus_SetFrameData</STRONG> (Thumb, 212 bytes, Stack size 24 bytes, taskrs232.o(i.vModeBus_SetFrameData))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = vModeBus_SetFrameData &rArr; USART_DMAReConfig &rArr; DMA_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_DMAReConfig
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usMBCRC16
</UL>
<BR>[Called By]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vModeBusRtu_Analysis
</UL>

<P><STRONG><a name="[15f]"></a>vModeBus_Set_Ctrl_Parm</STRONG> (Thumb, 972 bytes, Stack size 48 bytes, taskrs232.o(i.vModeBus_Set_Ctrl_Parm))
<BR><BR>[Stack]<UL><LI>Max Depth = 376 + Unknown Stack Size
<LI>Call Chain = vModeBus_Set_Ctrl_Parm &rArr; SaveParam &rArr; MemData_WriteParam &rArr; MemData_Write_To_Flash &rArr; FLASH_ProgramWord &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Configuration
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveParam
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PT_TimerDelay
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JudgeSetNewValue
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Do_Item_Judge
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ao_Item_Judge
</UL>
<BR>[Called By]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vModeBusRtu_Analysis
</UL>

<P><STRONG><a name="[15e]"></a>vModeBus_Set_Multi_Relay</STRONG> (Thumb, 58 bytes, Stack size 20 bytes, taskrs232.o(i.vModeBus_Set_Multi_Relay))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = vModeBus_Set_Multi_Relay
</UL>
<BR>[Called By]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vModeBusRtu_Analysis
</UL>

<P><STRONG><a name="[15d]"></a>vModeBus_Set_Relay</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, taskrs232.o(i.vModeBus_Set_Relay))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = vModeBus_Set_Relay
</UL>
<BR>[Called By]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vModeBusRtu_Analysis
</UL>

<P><STRONG><a name="[b7]"></a>__aeabi_d2f</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, d2f.o(x$fpl$d2f))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_d2f
</UL>
<BR>[Called By]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fnDl645Fft_Harmonic_Exec
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RN8032_Updata
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RN8032_Adjust_Angle
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitForFFT
</UL>

<P><STRONG><a name="[162]"></a>_d2f</STRONG> (Thumb, 98 bytes, Stack size 32 bytes, d2f.o(x$fpl$d2f), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fretinf
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[ce]"></a>__aeabi_dadd</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, daddsub_clz.o(x$fpl$dadd))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LineCalcFunc
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asin
</UL>

<P><STRONG><a name="[165]"></a>_dadd</STRONG> (Thumb, 332 bytes, Stack size 16 bytes, daddsub_clz.o(x$fpl$dadd), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsub1
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dretinf
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[168]"></a>__fpl_dcheck_NaN1</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, dcheck1.o(x$fpl$dcheck1))
<BR><BR>[Calls]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_return_NaN
</UL>
<BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
</UL>

<P><STRONG><a name="[c6]"></a>__aeabi_ddiv</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, ddiv.o(x$fpl$ddiv))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_ddiv
</UL>
<BR>[Called By]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RN8032_Adjust_Angle
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LineCalcFunc
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_invalid
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asin
</UL>

<P><STRONG><a name="[16a]"></a>_ddiv</STRONG> (Thumb, 552 bytes, Stack size 32 bytes, ddiv.o(x$fpl$ddiv), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dretinf
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[7a]"></a>__aeabi_d2iz</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, dfix.o(x$fpl$dfix))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_d2iz
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispValueVoltage
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispValueCurrent
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispValue
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenu_Main
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_cos
</UL>

<P><STRONG><a name="[16b]"></a>_dfix</STRONG> (Thumb, 94 bytes, Stack size 32 bytes, dfix.o(x$fpl$dfix), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[ec]"></a>__aeabi_d2uiz</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, dfixu.o(x$fpl$dfixu))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_d2uiz
</UL>
<BR>[Called By]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Protect_AutoProc
</UL>

<P><STRONG><a name="[16c]"></a>_dfixu</STRONG> (Thumb, 90 bytes, Stack size 32 bytes, dfixu.o(x$fpl$dfixu), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[87]"></a>__aeabi_i2d</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, dflt_clz.o(x$fpl$dflt))
<BR><BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LineCalcFunc
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitForFFT
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispValueVoltage
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispValueCurrent
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispValue
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
</UL>

<P><STRONG><a name="[1bd]"></a>_dflt</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, dflt_clz.o(x$fpl$dflt), UNUSED)

<P><STRONG><a name="[7e]"></a>__aeabi_l2d</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, dfltll_clz.o(x$fpl$dfltll))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_l2d
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispValuePower
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenu_Main
</UL>

<P><STRONG><a name="[1be]"></a>_ll_sto_d</STRONG> (Thumb, 162 bytes, Stack size 8 bytes, dfltll_clz.o(x$fpl$dfltll), UNUSED)

<P><STRONG><a name="[78]"></a>__aeabi_ui2d</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, dflt_clz.o(x$fpl$dfltu))
<BR><BR>[Called By]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenu_Main
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
</UL>

<P><STRONG><a name="[1bf]"></a>_dfltu</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, dflt_clz.o(x$fpl$dfltu), UNUSED)

<P><STRONG><a name="[ca]"></a>__aeabi_ul2d</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, dfltll_clz.o(x$fpl$dfltull))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_ul2d
</UL>
<BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LineCalcFunc
</UL>

<P><STRONG><a name="[1c0]"></a>_ll_uto_d</STRONG> (Thumb, 138 bytes, Stack size 8 bytes, dfltll_clz.o(x$fpl$dfltull), UNUSED)

<P><STRONG><a name="[79]"></a>__aeabi_dmul</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, dmul.o(x$fpl$dmul))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_dmul
</UL>
<BR>[Called By]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Protect_AutoProc
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RN8032_Adjust_Angle
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LineCalcFunc
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitForFFT
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispValueVoltage
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispValuePower
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispValueCurrent
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispValue
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenu_Main
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_cos
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asin
</UL>

<P><STRONG><a name="[16d]"></a>_dmul</STRONG> (Thumb, 332 bytes, Stack size 32 bytes, dmul.o(x$fpl$dmul), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dretinf
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[164]"></a>__fpl_dnaninf</STRONG> (Thumb, 156 bytes, Stack size 16 bytes, dnaninf.o(x$fpl$dnaninf))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __fpl_dnaninf
</UL>
<BR>[Called By]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dmul
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ll_ufrom_d
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dfixu
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ll_sfrom_d
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dfix
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ddiv
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsub
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_d2f
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsqrt
</UL>

<P><STRONG><a name="[167]"></a>__fpl_dretinf</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, dretinf.o(x$fpl$dretinf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_f2d
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dmul
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ddiv
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd
</UL>

<P><STRONG><a name="[143]"></a>__aeabi_drsub</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, daddsub_clz.o(x$fpl$drsb))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_drsub
</UL>
<BR>[Called By]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_cos
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asin
</UL>

<P><STRONG><a name="[16e]"></a>_drsb</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, daddsub_clz.o(x$fpl$drsb), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsub1
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd1
</UL>

<P><STRONG><a name="[14e]"></a>_dsqrt</STRONG> (Thumb, 456 bytes, Stack size 24 bytes, dsqrt_noumaal.o(x$fpl$dsqrt))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _dsqrt &rArr; __fpl_dnaninf
</UL>
<BR>[Calls]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>
<BR>[Called By]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqrt
</UL>

<P><STRONG><a name="[cb]"></a>__aeabi_dsub</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, daddsub_clz.o(x$fpl$dsub))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_dsub
</UL>
<BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LineCalcFunc
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_cos
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asin
</UL>

<P><STRONG><a name="[170]"></a>_dsub</STRONG> (Thumb, 464 bytes, Stack size 32 bytes, daddsub_clz.o(x$fpl$dsub), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd1
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[c9]"></a>__aeabi_f2d</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, f2d.o(x$fpl$f2d))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_f2d
</UL>
<BR>[Called By]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Protect_AutoProc
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fnDl645Fft_Harmonic_Exec
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RN8032_Updata
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RN8032_Adjust_Angle
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LineCalcFunc
</UL>

<P><STRONG><a name="[171]"></a>_f2d</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, f2d.o(x$fpl$f2d), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fnaninf
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dretinf
</UL>

<P><STRONG><a name="[8b]"></a>__aeabi_fadd</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, faddsub_clz.o(x$fpl$fadd))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_fadd
</UL>
<BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PwmPercentOutput_Second
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PwmPercentOutput_First
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fnDl645Fft_Harmonic_Exec
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RN8032_Updata
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RN8032_Adjust_U
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RN8032_Adjust_I
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FFT
</UL>

<P><STRONG><a name="[173]"></a>_fadd</STRONG> (Thumb, 196 bytes, Stack size 16 bytes, faddsub_clz.o(x$fpl$fadd), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fsub1
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fretinf
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fnaninf
</UL>

<P><STRONG><a name="[175]"></a>__fpl_fcheck_NaN1</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, fcheck1.o(x$fpl$fcheck1))
<BR><BR>[Calls]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_return_NaN
</UL>
<BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbnf
</UL>

<P><STRONG><a name="[17a]"></a>__fpl_fcmp_Inf</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, fcmpi.o(x$fpl$fcmpinf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fcmple
</UL>

<P><STRONG><a name="[74]"></a>__aeabi_fdiv</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, fdiv.o(x$fpl$fdiv))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_fdiv
</UL>
<BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RN8032_Adjust
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vModeBus_Query_THD
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Protect_AutoProc
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PwmPercentOutput_Second
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PwmPercentOutput_First
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fnDl645Fft_Harmonic_Exec
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RN8032_Updata
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RN8032_Adjust_U
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RN8032_Adjust_I
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RN8032_Adjust_Angle
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispHarmonicContent
</UL>

<P><STRONG><a name="[176]"></a>_fdiv</STRONG> (Thumb, 384 bytes, Stack size 16 bytes, fdiv.o(x$fpl$fdiv), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fretinf
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fnaninf
</UL>

<P><STRONG><a name="[81]"></a>__aeabi_f2iz</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, ffix.o(x$fpl$ffix))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_f2iz
</UL>
<BR>[Called By]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vModeBus_Query_THD
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PwmPercentOutput_First
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RN8032_Updata
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RN8032_Adjust_Angle
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenu_Main
</UL>

<P><STRONG><a name="[177]"></a>_ffix</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, ffix.o(x$fpl$ffix), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fnaninf
</UL>

<P><STRONG><a name="[75]"></a>__aeabi_f2uiz</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, ffixu.o(x$fpl$ffixu))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_f2uiz
</UL>
<BR>[Called By]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Protect_AutoProc
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PwmPercentOutput_Second
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RN8032_Updata
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RN8032_Adjust_U
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RN8032_Adjust_I
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispValueEnergy
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenu_Main
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispHarmonicContent
</UL>

<P><STRONG><a name="[178]"></a>_ffixu</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, ffixu.o(x$fpl$ffixu), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fnaninf
</UL>

<P><STRONG><a name="[ee]"></a>__aeabi_i2f</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, fflt_clz.o(x$fpl$fflt))
<BR><BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PwmPercentOutput_Second
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PwmPercentOutput_First
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RN8032_Updata
</UL>

<P><STRONG><a name="[1c1]"></a>_fflt</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, fflt_clz.o(x$fpl$fflt), UNUSED)

<P><STRONG><a name="[102]"></a>__aeabi_ul2f</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, ffltll_clz.o(x$fpl$ffltll))
<BR><BR>[Called By]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RN8032_Updata
</UL>

<P><STRONG><a name="[1c2]"></a>_ll_uto_f</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, ffltll_clz.o(x$fpl$ffltll), UNUSED)

<P><STRONG><a name="[106]"></a>__aeabi_l2f</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, ffltll_clz.o(x$fpl$ffltll))
<BR><BR>[Called By]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RN8032_Updata
</UL>

<P><STRONG><a name="[1c3]"></a>_ll_sto_f</STRONG> (Thumb, 90 bytes, Stack size 0 bytes, ffltll_clz.o(x$fpl$ffltll), UNUSED)

<P><STRONG><a name="[eb]"></a>__aeabi_ui2f</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, fflt_clz.o(x$fpl$ffltu))
<BR><BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RN8032_Adjust
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Protect_AutoProc
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SampleDataModifyF
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RN8032_Updata
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RN8032_Adjust_U
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RN8032_Adjust_I
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RN8032_Adjust_Angle
</UL>

<P><STRONG><a name="[1c4]"></a>_ffltu</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, fflt_clz.o(x$fpl$ffltu), UNUSED)

<P><STRONG><a name="[103]"></a>__aeabi_cfcmple</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, fleqf.o(x$fpl$fleqf))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_cfcmple
</UL>
<BR>[Called By]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RN8032_Updata
</UL>

<P><STRONG><a name="[179]"></a>_fcmple</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, fleqf.o(x$fpl$fleqf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fnaninf
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fcmp_Inf
</UL>

<P><STRONG><a name="[17d]"></a>__fpl_fcmple_InfNaN</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, fleqf.o(x$fpl$fleqf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_frcmple
</UL>

<P><STRONG><a name="[89]"></a>__aeabi_fmul</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, fmul.o(x$fpl$fmul))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_fmul
</UL>
<BR>[Called By]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Protect_AutoProc
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PwmPercentOutput_Second
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PwmPercentOutput_First
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fnDl645Fft_Harmonic_Exec
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SampleDataModifyF
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RN8032_Updata
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RN8032_Adjust_U
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RN8032_Adjust_I
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RN8032_Adjust_Angle
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LineCalcFunc
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FFT
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispValueEnergy
</UL>

<P><STRONG><a name="[17b]"></a>_fmul</STRONG> (Thumb, 258 bytes, Stack size 16 bytes, fmul.o(x$fpl$fmul), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fretinf
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fnaninf
</UL>

<P><STRONG><a name="[172]"></a>__fpl_fnaninf</STRONG> (Thumb, 140 bytes, Stack size 8 bytes, fnaninf.o(x$fpl$fnaninf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ll_sfrom_f
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ffix
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fdiv
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fsub
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fadd
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_f2d
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fmul
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fcmple
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ll_ufrom_f
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ffixu
</UL>

<P><STRONG><a name="[163]"></a>__fpl_fretinf</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, fretinf.o(x$fpl$fretinf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fdiv
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fadd
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_d2f
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fmul
</UL>

<P><STRONG><a name="[ef]"></a>__aeabi_cfrcmple</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, frleqf.o(x$fpl$frleqf))
<BR><BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PwmPercentOutput_Second
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PwmPercentOutput_First
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RN8032_Updata
</UL>

<P><STRONG><a name="[17c]"></a>_frcmple</STRONG> (Thumb, 98 bytes, Stack size 0 bytes, frleqf.o(x$fpl$frleqf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fcmple_InfNaN
</UL>

<P><STRONG><a name="[8c]"></a>__aeabi_frsub</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, faddsub_clz.o(x$fpl$frsb))
<BR><BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PwmPercentOutput_Second
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PwmPercentOutput_First
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RN8032_Adjust_Angle
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FFT
</UL>

<P><STRONG><a name="[17e]"></a>_frsb</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, faddsub_clz.o(x$fpl$frsb), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fsub1
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fadd1
</UL>

<P><STRONG><a name="[8d]"></a>__aeabi_fsub</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, faddsub_clz.o(x$fpl$fsub))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_fsub
</UL>
<BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RN8032_Adjust
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PwmPercentOutput_Second
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PwmPercentOutput_First
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RN8032_Updata
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RN8032_Adjust_U
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RN8032_Adjust_I
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FFT
</UL>

<P><STRONG><a name="[180]"></a>_fsub</STRONG> (Thumb, 234 bytes, Stack size 16 bytes, faddsub_clz.o(x$fpl$fsub), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fadd1
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fnaninf
</UL>

<P><STRONG><a name="[7f]"></a>__aeabi_d2lz</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, dfixll.o(x$fpl$llsfromd))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_d2lz
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispValuePower
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenu_Main
</UL>

<P><STRONG><a name="[181]"></a>_ll_sfrom_d</STRONG> (Thumb, 194 bytes, Stack size 32 bytes, dfixll.o(x$fpl$llsfromd), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[7d]"></a>__aeabi_f2lz</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, ffixll.o(x$fpl$llsfromf))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_f2lz
</UL>
<BR>[Called By]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenu_Main
</UL>

<P><STRONG><a name="[182]"></a>_ll_sfrom_f</STRONG> (Thumb, 134 bytes, Stack size 16 bytes, ffixll.o(x$fpl$llsfromf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fnaninf
</UL>

<P><STRONG><a name="[cc]"></a>__aeabi_d2ulz</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, dfixull.o(x$fpl$llufromd))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_d2ulz
</UL>
<BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LineCalcFunc
</UL>

<P><STRONG><a name="[183]"></a>_ll_ufrom_d</STRONG> (Thumb, 120 bytes, Stack size 32 bytes, dfixull.o(x$fpl$llufromd), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[c7]"></a>__aeabi_f2ulz</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, ffixull.o(x$fpl$llufromf))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_f2ulz
</UL>
<BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LineCalcFunc
</UL>

<P><STRONG><a name="[184]"></a>_ll_ufrom_f</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, ffixull.o(x$fpl$llufromf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fnaninf
</UL>

<P><STRONG><a name="[169]"></a>__fpl_return_NaN</STRONG> (Thumb, 100 bytes, Stack size 0 bytes, retnan.o(x$fpl$retnan))
<BR><BR>[Calls]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_cmpreturn
</UL>
<BR>[Called By]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fcheck_NaN1
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dcheck_NaN1
</UL>

<P><STRONG><a name="[b5]"></a>__ARM_scalbn</STRONG> (Thumb, 92 bytes, Stack size 0 bytes, scalbn.o(x$fpl$scalbn))
<BR><BR>[Calls]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dcheck_NaN1
</UL>
<BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitForFFT
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_underflow
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_infnan
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_cos
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asin
</UL>

<P><STRONG><a name="[c8]"></a>__ARM_scalbnf</STRONG> (Thumb, 76 bytes, Stack size 0 bytes, scalbnf.o(x$fpl$scalbnf))
<BR><BR>[Calls]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fcheck_NaN1
</UL>
<BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PwmPercentOutput_Second
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PwmPercentOutput_First
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SampleDataModifyF
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RN8032_Updata
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RN8032_Adjust_U
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RN8032_Adjust_I
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RN8032_Adjust_Angle
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LineCalcFunc
</UL>

<P><STRONG><a name="[185]"></a>__fpl_cmpreturn</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, trapv.o(x$fpl$trapveneer))
<BR><BR>[Called By]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_return_NaN
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[121]"></a>SetSysClockTo72</STRONG> (Thumb, 160 bytes, Stack size 12 bytes, system_stm32f10x.o(i.SetSysClockTo72))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = SetSysClockTo72
</UL>
<BR>[Called By]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[fe]"></a>RN8302Init</STRONG> (Thumb, 508 bytes, Stack size 48 bytes, bsp_rn8302b.o(i.RN8302Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = RN8302Init &rArr; RN8302WR &rArr; RN8302_TX_Frame &rArr; Spi_RN8302_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RN8302WR
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RN8302RD
</UL>
<BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RN8032_Adjust
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_InitRN8023
</UL>

<P><STRONG><a name="[ff]"></a>RN8302RD</STRONG> (Thumb, 160 bytes, Stack size 16 bytes, bsp_rn8302b.o(i.RN8302RD))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = RN8302RD &rArr; RN8302_RX_Frame &rArr; Spi_RN8302_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RN8302_RX_Frame
</UL>
<BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RN8032_Adjust
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fnDl645Fft_Harmonic_Exec
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RN8302InitAdjust
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RN8032_Updata
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RN8032_Adjust_U
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RN8032_Adjust_Section_I
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RN8032_Adjust_I
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RN8032_Adjust_Angle
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RN8302Init
</UL>

<P><STRONG><a name="[101]"></a>RN8302WR</STRONG> (Thumb, 110 bytes, Stack size 16 bytes, bsp_rn8302b.o(i.RN8302WR))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = RN8302WR &rArr; RN8302_TX_Frame &rArr; Spi_RN8302_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RN8302_TX_Frame
</UL>
<BR>[Called By]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fnDl645Fft_Harmonic_Exec
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RN8302InitAdjust
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RN8032_Adjust_Section_I
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RN8302Init
</UL>

<P><STRONG><a name="[107]"></a>RN8302_RX_Frame</STRONG> (Thumb, 276 bytes, Stack size 40 bytes, bsp_rn8302b.o(i.RN8302_RX_Frame))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = RN8302_RX_Frame &rArr; Spi_RN8302_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Spi_RN8302_SendByte
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Spi_RN8302_ReadByte
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RN8302RD
</UL>

<P><STRONG><a name="[10b]"></a>RN8302_TX_Frame</STRONG> (Thumb, 224 bytes, Stack size 40 bytes, bsp_rn8302b.o(i.RN8302_TX_Frame))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = RN8302_TX_Frame &rArr; Spi_RN8302_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Spi_RN8302_SendByte
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Spi_RN8302_ReadByte
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RN8302WR
</UL>

<P><STRONG><a name="[16f]"></a>_dadd1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, daddsub_clz.o(x$fpl$dadd), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsub
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_drsb
</UL>

<P><STRONG><a name="[166]"></a>_dsub1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, daddsub_clz.o(x$fpl$dsub), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_drsb
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd
</UL>

<P><STRONG><a name="[17f]"></a>_fadd1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, faddsub_clz.o(x$fpl$fadd), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fsub
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_frsb
</UL>

<P><STRONG><a name="[174]"></a>_fsub1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, faddsub_clz.o(x$fpl$fsub), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_frsb
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fadd
</UL>
<P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
<SCRIPT Language=VBScript><!--

//--></SCRIPT>